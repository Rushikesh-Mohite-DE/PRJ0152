defaultStorageMapping: SOURCE
installedPackages: {}
jobs:
  Job-25:
    excludeSelector: ""
    id: 25
    includeSelector: "{ location: SOURCE name: ML_FCSTS_SALES_DATA } OR { location: SOURCE name: SALES_DATA }"
    name: SALES_DATA
    steps: []
    subgraphs: []
locations:
  SOURCE:
    mappingDefinitions:
      "135":
        database: QUICKSTART
        schema: ML_FUNCTIONS
      "51":
        database: QUICKSTART
        schema: ML_FUNCTIONS
  STAGE:
    mappingDefinitions:
      "135":
        database: QA
        schema: ML
      "51":
        database: QA
        schema: ML
  TARGET:
    mappingDefinitions:
      "135":
        database: QA
        schema: ML
      "51":
        database: QA
        schema: ML
macros:
  Macro-1:
    id: "1"
    macroString: |-
      {%- macro unit_measure(column) -%}
          CASE WHEN {{ column }} = 'EA' THEN 'SAP UNIT' ELSE 'NOT AWARE' END
      {%- endmacro %}

      {%- macro PRD_ID(column) -%}
          CASE WHEN {{ column }} = 707 THEN '1' ELSE '0' END
      {%- endmacro %}


      {%- macro get_value_by_column_attribute_adv(column_attribute, value="name") -%}
          {%- set filtered_columns_by_attribute = desiredState.columns | selectattr(column_attribute) | list -%}
          {%- if filtered_columns_by_attribute | length > 0 -%}
              {{- (filtered_columns_by_attribute | first)[value] -}}
          {%- else -%}
              ## ERR: COLUMN_NOT_FOUND_WITH_ATTRIBUTE_{{ column_attribute }} ##
          {%- endif -%}
      {%- endmacro -%}

      {#-- This macro will drop a table / view / dynamic table if it already exists as a different or the same object type #}
      {#-- Errors can occur when creating a same named object of a different type #}

      {% macro dropTblView() %}

        {%- set db = ref_no_link(node.location.name, node.name).split('.')[0]  %} 
        {%- set sch = ref_no_link(node.location.name, node.name).split('.')[1]  %} 
        {%- set obj = "{{ node.name }}"  %} 

          begin
              let db varchar := '{{db}}';
              let sch varchar := '{{sch}}';
              let obj varchar := '{{obj}}';

              begin
                  execute immediate 'drop table if exists ' || db || '.' || sch || '.' || obj;    
              exception
                  when statement_error then
                      null;
              end;

              begin
                  execute immediate 'drop view if exists ' || db || '.' || sch || '.' || obj;    
              exception
                  when statement_error then
                      null;
              end;

              begin
                  execute immediate 'drop dynamic table if exists ' || db || '.' || sch || '.' || obj;    
              exception
                  when statement_error then
                      null;
              end;

              begin
                  execute immediate 'drop task if exists ' || db || '.' || sch || '.' || obj;    
              exception
                  when statement_error then
                      null;
              end;
          end;
      {% endmacro %}

      {% macro resumeRootTask() %}
      {% set tgtDb = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
      {% set tgtSch = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
      {%- set fqRootTaskName = '' + tgtDb + '.' + tgtSch + '.' + desiredState.config.rootTask + ''-%} 

      begin
          let sqlDml := 'select system$task_dependents_enable(''''{{fqRootTaskName}}'''')';
          execute immediate sqlDml;
              exception
                  when statement_error then
                  return 'Task already running';
          return 'Task resumed';
      end;
      {% endmacro %}

      {% macro dup_rename() %}
          {{ sources[0].columns | selectattr('id','equalto',column.id) | map(attribute='sourceColumns') | first | map(attribute='node') | map(attribute='name') | first + "_" + sources[0].columns | selectattr('id','equalto',column.id) | map(attribute='sourceColumns') | first | map(attribute='column') | map(attribute='name') | first }}
      {%- endmacro %}

      {%- macro partition_by() -%}
          {% if desiredState %}
             {% set config = desiredState.config %}
             {% set node = desiredState.node %}
          {% endif %}
          {%- set nsVariables = namespace(partition="") -%}
          {%- set sourceTableName = node.name -%}

          {%- for i in config.partitionBy.get('items') -%}
              {%- set colName = i.partColName.name -%}
              {%- if loop.first -%}
                  {%- set nsVariables.partition = getSourceNameFromColumnName(colName) + '."' + colName + '"' -%}
              {%- else -%}
                  {%- set nsVariables.partition = nsVariables.partition + ',' + getSourceNameFromColumnName(colName) + '."' + colName + '"' -%}
              {%- endif -%}

          {%- endfor -%}

          {{- nsVariables.partition -}}
      {%- endmacro -%}

      {% macro order_by_col(return) %}

          {% if desiredState %}
             {% set config = desiredState.config %}
             {% set node = desiredState.node %}
          {% endif %}

          {% set nsVariables = namespace(orderBy="") -%}

          {% if config.recordVersioning in ('Datetime Column','Numeric Column') -%}
              {% set datetimeNumericColSort = config.orderBy.get('items') -%}
              {% set dateTimeCol = datetimeNumericColSort  | map(attribute='colName.name') | first -%}        
              {% set nsVariables.orderBy = getSourceNameFromColumnName(dateTimeCol) + '."' + dateTimeCol + '"' -%}
          {% else -%}
              {% set dateTimeColSort = config.orderByDateTime.get('items') -%}
              {% set dateCol = dateTimeColSort | map(attribute='colNameDate.name') | first -%}
              {% set timeCol = dateTimeColSort | map(attribute='colNameTimestamp.name') | first -%}
              {% set nsVariables.orderBy = 'to_timestamp(' + getSourceNameFromColumnName(dateCol) + '."' + dateCol + '" || ' + '\'T\'' + ' ||' + getSourceNameFromColumnName(timeCol) + '."' + timeCol + '")' -%}
          {% endif -%}

          {{ nsVariables.orderBy }}

      {% endmacro %}


      {% macro dimensionHistoryPk() %}
          {%- set nsVariables = namespace(dimensionHistoryColumns="") -%}

          {%- set partitionBy = partition_by().split(",") -%}
          {%- set orderBy = order_by_col() -%}

          {%- for col in partitionBy -%}
              {%- if loop.first -%}
                  {%- set nsVariables.dimensionHistoryColumns = col -%}
              {%- else -%}
                  {%- set nsVariables.dimensionHistoryColumns = nsVariables.dimensionHistoryColumns + ' || ' + '\'-\'' + ' ||' + col -%}
              {%- endif -%}
          {%- endfor -%}

          {%- set nsVariables.dimensionHistoryColumns = nsVariables.dimensionHistoryColumns + ' || ' + '\'-\'' + ' || date_part(epoch_milliseconds, ' + orderBy + ')' -%}

          {{- nsVariables.dimensionHistoryColumns -}}

      {% endmacro %}

      {% macro sourceTable() %}
          {%- set nsVariables = namespace(partition="") -%}
          {% set sourceTableName = desiredState.node.name %}

          {%- for i in desiredState.config.partitionBy.get('items') -%}

          {%- if loop.first -%}
              {%- set nsVariables.partition = '"' + sourceTableName + '"."' + i.partColName.name + '"' -%}
          {%- else -%}
              {%- set nsVariables.partition = nsVariables.partition + ',"' + sourceTableName + '"."' + i.partColName.name + '"' -%}
          {%- endif -%}

          {%- endfor %}

          {{- nsVariables.partition -}}

      {% endmacro %}

      {%- macro getColumnId( colName ) -%}

          {% if desiredState %}
             {% set columns = desiredState.columns %}
          {% endif %}
          {%- set columnId = columns | selectattr('name','equalto',colName) | map(attribute='id') | first -%}

          {{- columnId -}}

      {%- endmacro -%}

      {% macro getSourceNameFromColumnName( colName ) %}

          {% if desiredState %}
             {% set sources = desiredState.sources %}
          {% endif %}

          {%- set sourceObject = sources[0].columns | selectattr('id','eq',getColumnId( colName )) | map(attribute='sourceColumns')  | first | map(attribute='node.name') | first -%}

          "{{- sourceObject -}}"

      {% endmacro %}

      {% macro getSourceNameFromColumnId( colId ) %}

          {% if desiredState %}
             {% set sources = desiredState.sources %}
          {% endif %}
          {%- set sourceObject = sources[0].columns | selectattr('id','eq',colId) | map(attribute='sourceColumns')  | first | map(attribute='node.name') | first -%}

          "{{- sourceObject -}}"

      {% endmacro %}

      {%- macro ref_raw(location_name, node_name) -%}
          {%- raw -%}{{ ref('{% endraw %}{{- location_name }}{% raw %}', '{% endraw %}{{ node_name }}{% raw %}') }}{% endraw %}
      {%- endmacro -%}

      {%- macro ref_no_link_raw(location_name, node_name) -%}
          {% raw %}{{ ref_no_link('{% endraw %}{{ location_name }}{% raw %}', '{% endraw %}{{ node_name }}{% raw %}') }}{% endraw %}
      {%- endmacro -%}

      {%- macro ref_link_raw(location_name, node_name) -%}
          {% raw %}{{ ref_link('{% endraw %}{{ location_name }}{% raw %}', '{% endraw %}{{ node_name }}{% raw %}') }}{% endraw %}
      {%- endmacro -%}


      {%- macro join_columns() -%}
          {%- set nsVariables = namespace(partition="") -%}
          {%- set sourceTableName = node.name -%}

          {%- for i in config.partitionBy.get('items') -%}
              {%- set colName = i.partColName.name -%}
              {%- if loop.first -%}
                  {%- set nsVariables.partition = colName -%}
              {%- else -%}
                  {%- set nsVariables.partition = nsVariables.partition + ',' + colName -%}
              {%- endif -%}

          {%- endfor -%}

          {{- nsVariables.partition -}}

      {%- endmacro -%}


      {#-- This macro will frame the order by clause with the columns and sort order specified in config #}
      {#-- Input parmeters   - None #}
      {#-- Return            - Order by clause #}

      {%- macro sortorder_by_colv(return) -%}
          {%- set nsVariables = namespace(sortcolNames="") -%}
          {% if desiredState %}
             {% set config = desiredState.config %}
          {% endif %}
          {%if config.orderby %}
              {%- for i in config.orderbycolumn.get('items') -%}
                  {%- set colName = i.sortColName.name -%}
                  {%- set colOrder = i.sortOrder -%}
      	        {%- if loop.first -%}	      
      		        {%- set nsVariables.sortcolNames = '"' + colName + '"' + colOrder -%}	  
      	        {%- else -%}      
      		        {%- set nsVariables.sortcolNames = nsVariables.sortcolNames + ',' + '"' + colName + '"' + colOrder-%}	  
      	        {%- endif -%}
              {%- endfor -%}	
                  {%- set nsVariables.sortcolNames = 'order by' + nsVariables.sortcolNames -%}
       
          {% endif %} 
          
          {{- nsVariables.sortcolNames -}}
       
      {%- endmacro -%}



      {#-- This macro will split the join clause into from and rest of the clauses like where,groupby,orderby ,qualify  #}
      {#-- Input parmeters   - joinclause #}
      {#-- Return            - from clause and other clauses #}


      {%- macro get_clause( joinclause , ret_clause ) -%}

                  {% set join_clause = joinclause %}
                  {% set has_where_clause = 'where'in join_clause %}
                  {% set has_WHERE_clause = 'WHERE'in join_clause %}
                  {% set has_order_clause = 'order by'in join_clause %}
                  {% set has_ORDER_clause = 'ORDER BY'in join_clause %}
                  {% set has_group_clause =  'group by'in join_clause %}
                  {% set has_GROUP_clause = 'GROUP BY'in join_clause %}
                  {% set has_qualify_clause =  'qualify'in join_clause %}
                  {% set has_QUALIFY_clause = 'QUALIFY'in join_clause %}

                 

                  {% set clause='default' %}

                  {% if has_where_clause %}

                      {% set keyword='where'%} 
                      {% set clause='where_clause' %}
        
                  {% elif  has_WHERE_clause %}

                       {% set keyword='WHERE'%}
                       {% set clause='where_clause' %}
                  {% endif %}

                  {% if has_group_clause and clause != 'where_clause'  %}

                       {% set keyword='group by'%}
                       {% set clause='group_clause' %}
                  
                  {% elif  has_GROUP_clause and clause != 'where_clause' %}

                       {% set keyword='GROUP BY'%}
                       {% set clause='group_clause' %}

                  {% endif %}
      			
                  {% if has_qualify_clause and clause != 'where_clause' and clause != 'group_clause'  %}

                       {% set keyword='qualify'%}
                       {% set clause='qualify_clause' %}
                  
                  {% elif  has_QUALIFY_clause and clause != 'where_clause' and clause != 'group_clause'  %}

                       {% set keyword='QUALIFY'%}
                       {% set clause='qualify_clause' %}

                  {% endif %}            

      			{% if has_order_clause and  clause != 'where_clause' and clause != 'group_clause' and clause != 'qualify_clause' %}

                       {% set keyword='order by'%}
                       {% set clause='order_clause' %}
                  
                  {% elif has_ORDER_clause and clause != 'where_clause' and clause != 'group_clause' and clause != 'qualify_clause' %}

                       {% set keyword='ORDER BY'%}
                       {% set clause='order_clause' %}

                  {% endif %}



                  {% if clause == 'where_clause' %}
                     {% set parts = join_clause.split(keyword) %}
                     {% set from_clause = parts[0] %}
                     {% set add_clause = 'AND' + join_clause.split(keyword)[1] %}

                  {% elif clause == 'group_clause' %}

                     {% set parts = join_clause.split(keyword) %}
                     {% set from_clause = parts[0] %}
                     {% set add_clause = 'group by' + join_clause.split(keyword)[1] %}

                  
                  {% elif clause == 'qualify_clause' %}

                     {% set parts = join_clause.split(keyword) %}
                     {% set from_clause = parts[0] %}
                     {% set add_clause = 'qualify' + join_clause.split(keyword)[1] %}


                  {% elif clause == 'order_clause' %}

                     {% set parts = join_clause.split(keyword) %}
                     {% set from_clause = parts[0] %}
                     {% set add_clause =  'order by' + join_clause.split(keyword)[1] %}
                     

                  {% else %}

                     {% set from_clause = join_clause %}
                     {% set add_clause = '' %}

                  {% endif %}
      			
      			{% if ret_clause == 'from' %}
      			   {{ from_clause }}
      			{% else %}
      			   {{ add_clause }}
      			{% endif %}
      			
      			
      {%- endmacro -%}
packages: {}
projects: {}
stepTypes:
  StepType-225:
    id: "225"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: ML FORECAST
        short: ML_FCSTS
        tagColor: 'blue'
        plural: ML Forecasts


        config:

        - groupName: Forecast Model Input
          items:


        # Toggle to determine if a single-series forecast or a multi-series forecast is to be created #

            - type: toggleButton
              displayName: 'Multi-Series Forecast'
              attributeName: 'multiseries'
              isRequired: false
              default: 'true'

        # For multiple time series models, the name of the column defining the multiple time series in input data #

            - type: columnDropdownSelector
              displayName: 'Series Column'
              attributeName: 'seriescol'
              isRequired: false
              enableIf: "{{ config.multiseries }}"

        # Name of the column containing the timestamps in input data #

            - type: columnDropdownSelector
              displayName: 'Timestamp Column'
              attributeName: 'tscol'
              isRequired: true

        # Name of the column containing the target (dependent value) in input data #

            - type: columnDropdownSelector
              displayName: 'Target Column'
              attributeName: 'tgtcol'
              isRequired: true


        # An OBJECT containing key-value pairs used to configure the forecast job #

            - type: toggleButton
              displayName: 'Config Object'
              attributeName: 'cobject'
              isRequired: false
              default: false

            - type: textBox
              displayName: 'Prediction Interval'
              attributeName: 'predictioninterval'
              enableIf: '{%- if config.cobject %}true{%- else %}false{%- endif %}'
              default: 'ex:0.80(float value)'

        # The time series to forecast #

            - type: toggleButton
              displayName: 'Series value'
              attributeName: 'series_value'
              isRequired: false
              enableIf: '{%- if config.multiseries  %}true{%- else %}false{%- endif %}' 

            - displayName: Enter the series value
              type: textBox
              attributeName: 'svalue'
              enableIf: '{%- if config.series_value and config.multiseries %}true{%- else %}false{%- endif %}'

        # Exogenous variable:additional features influencing the forecast #

            - type: toggleButton
              displayName: 'Exogenous Variables'
              attributeName: 'exvar'
              isRequired: false
              default: 'true'

            - displayName: Future-valued Exogenous data can be added by enabling the multi source toggle below 
              type: label
              enableIf: '{%- if config.exvar %}true{%- else %}false{%- endif %}'

            - displayName: Exogenous data source
              type: multisourceToggle
              enableIf: '{%- if config.exvar %}true{%- else %}false{%- endif %}'

        # Required for forecasts without exogenous variables.The number of steps ahead to forecast #

            - displayName: Days To Forecast
              attributeName: fcdays
              type: textBox
              enableIf: '{%- if not config.exvar %}true{%- else %}false{%- endif %}' 
              isRequired: false
              default: '30'


        systemColumns:
        - displayName: "FORECAST"
          attributeName: forecast
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
        - displayName: "LOWER_BOUND"
          attributeName: lower_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
        - displayName: "UPPER_BOUND"
          attributeName: upper_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
      templates:
        create:
          templateString: |-
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : ML Forecast == #}
            {# == Node Type Description    : This node creates a forecast table  == #}
            
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'FORECAST_' ~ src_node.name %}
            
            {# Forecast table creation #}
            
            {{ stage('Create Forecast Table') }}
            
            CREATE OR REPLACE TABLE {{ this }}
            (
                {% for col in source.columns  %}
                    "{{ col.name }}" 
                    {%- if col.name == config.tscol.name %} TIMESTAMP 
                    {%- elif col.name == config.tgtcol.name %} FLOAT 
                    {%- else %} {{ col.dataType }}
                    {%- endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{%- endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
        run:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : ML Forecast == #}
            {# == Node Type Description    : This node creates a forecast table  == #}
            
            
            {# INitialize forecast model name #}
            
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'FORECAST_' ~ src_node.name %}
            
            {%- set nsVariables = namespace(squotes="") -%}
            
            {# Check series column datatype to determine if quoted required for series value #}
            
            {% if config.series_value %}
                    {% for col in source.columns  %} 
                        {% if col.id == config.seriescol.id %}
            			    {%if  (col.dataType | replace("0", "")
                | replace("1", "")
                | replace("2", "")
                | replace("3", "")
                | replace("4", "")
                | replace("5", "")
                | replace("6", "")
                | replace("7", "")
                | replace("8", "")
                | replace("9", "") |replace("(","")|replace(")",""))  in ('STRING','VARCHAR','CHAR','TEXT') %}
            				   {% set  nsVariables.squotes ="'" %}
            				{% else %}
            				   {% set  nsVariables.squotes = ""  %}
                                {{ col.dataType}}
            				{% endif %}
            			{% endif %}
                    {% endfor %}
            
            {% endif %}
            
            {# Forecast table truncated #}
            
            {{ stage('Truncate Forecast table') }}
            
            TRUNCATE IF EXISTS {{ this }}
            
            {# Initial training data inserted into forecast table #}
            
            {{ stage('Populate Forecast Table with Historical Data') }}
            
            {% if not config.exvar %}
            
            INSERT INTO {{ this }}
            (
                {%- for col in source.columns  %} 
                    "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
            )
            SELECT 
                {% for col in source.columns  %} 
                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            {{ source.join }}
            
            {% else %}
            
                   INSERT INTO {{ this }}
                  (
                   {%- for col in source.columns  %} 
                    "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                   {%- endfor %}
                   )
            
                    {% for source in sources %}
            		    SELECT 
               			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
                            {{ source.join }}
                         {% if not loop.last %}
            			   {% if node.isMultisource %}
            				UNION
            			   {% endif %}
                         {% endif %}
            	
            		{% endfor %}  
            
            {% endif %}
            
            
            {# Forecast model created #}
            
            {{ stage('Create Forecast Model Instance') }}
            
            
            CREATE OR REPLACE SNOWFLAKE.ML.FORECAST
             {{ ref_no_link(node.location.name, forecast_name) }}(
                INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}            
                    FROM {{ this }}
                    WHERE  "{{ config.tgtcol.name }}" IS NOT NULL
                '),
                {% if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}',
                TARGET_COLNAME => '{{ config.tgtcol.name }}'
            )
            
            {# Forecast data based on model with predicted values  is inserted into forecast table #}
            
            {{ stage('Insert Forecast data') }}
            BEGIN
            
            
            {% if config.exvar %}
                CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST(
                    INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT 
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}            
                    FROM {{ this }}
                    WHERE  "{{ config.tgtcol.name }}" IS NULL
                '),
                {%if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}' 
                {% if config.series_value %}, SERIES_VALUE => {{ nsVariables.squotes}}{{config.svalue}}{{nsVariables.squotes}}  :: Variant {% endif %}
                {% if config.cobject %},CONFIG_OBJECT => {'prediction_interval': {{ config.predictioninterval }}} {% endif %});
            
            
                UPDATE {{ this }} SRC
                SET 
                    {%- for col in columns if  col.forecast or col.lower_bound or col.upper_bound %}
                        "{{ col.name }}" = RES."{{ col.name }}" {%- if not loop.last %}, {%- endif %}
                    {%- endfor %}
                FROM TABLE(RESULT_SCAN(-1)) RES
                WHERE 
                    RES."TS" = SRC."{{ config.tscol.name }}"
                    {%- if config.multiseries  %}
                    AND RES."SERIES" = SRC."{{ config.seriescol.name }}"            
                    {%- endif %};
            
            
            {% else %}
            
            
                CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST(FORECASTING_PERIODS =>{{ config.fcdays }}
                {% if config.series_value %},SERIES_VALUE =>{{ nsVariables.squotes}}{{config.svalue}}{{nsVariables.squotes}}  :: Variant {% endif %}
                {% if config.cobject %},CONFIG_OBJECT => {'prediction_interval': {{ config.predictioninterval }}} {% endif %});
            
            
                INSERT INTO {{ this }}
                (
                    {%- for col in source.columns  %} 
                        "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                )
                SELECT 
                    {% for col in source.columns %}
                        {%- if config.multiseries and col.id == config.seriescol.id %}"SERIES"
                        {%- elif col.id == config.tscol.id %}"TS"
                        {%- elif col.id == config.tgtcol.id %}NULL
                        {%- elif col.forecast or col.lower_bound or col.upper_bound %}"{{ col.name }}"
                        {%- else %}{{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- endif %}{%- if not loop.last %}, {%- endif %}
                    {% endfor %}
                FROM TABLE(RESULT_SCAN(-1)) RES;
            {% endif %}
            
            END
    name: ML Forecast
    version: 1
  StepType-244:
    id: "244"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |+
        capitalized: Anomaly Detection
        short: ML_AD
        tagColor: 'blue'
        plural: ML Anomaly Detections


        config:

        - groupName: Anomaly Model Input
          items:


        # Toggle to determine if a single-series forecast or a multi-series forecast is to be created #

            - type: toggleButton
              displayName: 'Multi-Series'
              attributeName: 'multiseries'
              isRequired: false
              default: 'true'

        # For multiple time series models, the name of the column defining the multiple time series in input data #

            - type: columnDropdownSelector
              displayName: 'Series Column'
              attributeName: 'seriescol'
              isRequired: false
              enableIf: "{{ config.multiseries }}"

        # Name of the column containing the timestamps in input data #

            - type: columnDropdownSelector
              displayName: 'Timestamp Column'
              attributeName: 'tscol'
              isRequired: true

        # Name of the column containing the target (dependent value) in input data #

            - type: columnDropdownSelector
              displayName: 'Target Column'
              attributeName: 'tgtcol'
              isRequired: true


        # An OBJECT containing key-value pairs used to configure the forecast job #

            - type: toggleButton
              displayName: 'Config Object'
              attributeName: 'cobject'
              isRequired: false
              default: false

            - type: textBox
              displayName: 'Prediction Interval'
              attributeName: 'predictioninterval'
              enableIf: '{%- if config.cobject %}true{%- else %}false{%- endif %}'
              default: 'ex:0.80(float value)'

        # The time series to forecast #

            - type: toggleButton
              displayName: 'Series value'
              attributeName: 'series_value'
              isRequired: false
              enableIf: '{%- if config.multiseries  %}true{%- else %}false{%- endif %}' 

            - displayName: Enter the series value
              type: textBox
              attributeName: 'svalue'
              enableIf: '{%- if config.series_value and config.multiseries %}true{%- else %}false{%- endif %}'

        # Exogenous variable:additional features influencing the forecast #

            - type: toggleButton
              displayName: 'Supervised Data'
              attributeName: 'spdata'
              isRequired: false
              default: 'false'

            - type: columnDropdownSelector
              displayName: 'Labelled Column'
              attributeName: 'lcdata'
              isRequired: false
              default: 'false'
              enableIf: '{%-config.spdata %}true{%- else %}false{%- endif %}'


            - type: toggleButton
              displayName: 'Unsupervised Data'
              attributeName: 'uspdata'
              isRequired: false
              default: 'false'
         



            - displayName: Exogenous data source
              type: multisourceToggle
              attributeName: 'mtoggle'
              default: 'true'
              enableIf: '{%- if config.spdata or config.uspdata %}true{%- else %}false{%- endif %}'

            



        systemColumns:
        - displayName: "FORECAST"
          attributeName: forecast
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "LOWER_BOUND"
          attributeName: lower_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "UPPER_BOUND"
          attributeName: upper_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "IS_ANOMALY"
          attributeName: anomaly
          transform: ""
          dataType: BOOLEAN
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "PERCENTILE"
          attributeName: percentile
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "DISTANCE"
          attributeName: distance
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'



      templates:
        create:
          templateString: |-
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : ML Forecast == #}
            {# == Node Type Description    : This node creates a forecast table  == #}
            
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'AnomalyDetection_' ~ src_node.name %}
            
            {# Forecast table creation #}
            
            {{ stage('Create Anomaly Detection Table') }}
            
            CREATE OR REPLACE TABLE {{ this }}
            (
                {% for col in source.columns  %}
                    "{{ col.name }}" 
                    {%- if col.name == config.tscol.name %} TIMESTAMP 
                    {%- elif col.name == config.tgtcol.name %} FLOAT 
                    {%- else %} {{ col.dataType }}
                    {%- endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{%- endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
        run:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : ML Forecast == #}
            {# == Node Type Description    : This node creates a forecast table  == #}
            
            
            {# INitialize forecast model name #}
            
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'FORECAST_' ~ src_node.name %}
            
            {%- set nsVariables = namespace(squotes="") -%}
            
            {# Check series column datatype to determine if quoted required for series value #}
            
            {% if config.series_value %}
                    {% for col in source.columns  %} 
                        {% if col.id == config.seriescol.id %}
            			    {%if  (col.dataType | replace("0", "")
                | replace("1", "")
                | replace("2", "")
                | replace("3", "")
                | replace("4", "")
                | replace("5", "")
                | replace("6", "")
                | replace("7", "")
                | replace("8", "")
                | replace("9", "") |replace("(","")|replace(")",""))  in ('STRING','VARCHAR','CHAR','TEXT') %}
            				   {% set  nsVariables.squotes ="'" %}
            				{% else %}
            				   {% set  nsVariables.squotes = ""  %}
                                {{ col.dataType}}
            				{% endif %}
            			{% endif %}
                    {% endfor %}
            
            {% endif %}
            
            {# Forecast table truncated #}
            
            {{ stage('Truncate Anomaly Detection table') }}
            
            TRUNCATE IF EXISTS {{ this }}
            
            {# Initial training data inserted into forecast table #}
            
            
            {# Forecast model created #}
            
            {{ stage('Create Anomaly Model Instance') }}
            
            
            CREATE OR REPLACE SNOWFLAKE.ML.ANOMALY_DETECTION
             {{ ref_no_link(node.location.name, forecast_name) }}(
                INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound or col.anomaly or col.percentile or col.distance) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}            
                    {{ source.join }}
                    WHERE  "{{ config.tgtcol.name }}" IS NOT NULL
                '),
                {% if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}',
                TARGET_COLNAME => '{{ config.tgtcol.name }}',
            	{% if config.lcdata  %}LABEL_COLNAME => '{{ config.lcdata.name }}' {% else %} LABEL_COLNAME => '' {% endif %}
            )
            
            {# Forecast data based on model with predicted values  is inserted into forecast table #}
            
            {{ stage('Insert Anomaly data') }}
            {% if config.uspdata %}
            BEGIN
            
                CALL {{ ref_no_link(node.location.name, forecast_name) }}!detect_anomalies(
                    INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT 
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound or col.anomaly or col.percentile or col.distance) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}
                    {{ sources[-1].join }}
                '),
                {%if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}' ,
                TARGET_COLNAME => '{{ config.tgtcol.name }}')
                {% if config.cobject %},CONFIG_OBJECT => {'prediction_interval': {{ config.predictioninterval }}} {% endif %};
            
            
                INSERT INTO {{ this }}
                (
                    {%- for col in source.columns  %} 
                        "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                )
                SELECT 
                    {% for col in source.columns %}
                        {%- if config.multiseries and col.id == config.seriescol.id %}"SERIES"
                        {%- elif col.id == config.tscol.id %}"TS"
                        {%- elif col.id == config.tgtcol.id %}"Y"
                        {%- elif col.forecast or col.lower_bound or col.upper_bound or col.anomaly or col.percentile or col.distance %}"{{ col.name }}"
                        {%- else %}{{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- endif %}{%- if not loop.last %}, {%- endif %}
                    {% endfor %}
                FROM TABLE(RESULT_SCAN(-1)) RES;
            
            {% else %}
                CALL {{ ref_no_link(node.location.name, forecast_name) }}!detect_anomalies(
                    INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT 
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound or col.anomaly or col.percentile or col.distance) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}
                    {{ sources[-1].join }}
                '),
                {%if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}' ,
                TARGET_COLNAME => '{{ config.tgtcol.name }}')
                {% if config.cobject %},CONFIG_OBJECT => {'prediction_interval': {{ config.predictioninterval }}} {% endif %};
            
            
                INSERT INTO {{ this }}
                (
                    {%- for col in source.columns  %} 
                        "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                )
                SELECT 
                    {% for col in source.columns %}
                        {%- if config.multiseries and col.id == config.seriescol.id %}"SERIES"
                        {%- elif col.id == config.tscol.id %}"TS"
                        {%- elif col.id == config.tgtcol.id %}"Y"
                        {%- elif col.forecast or col.lower_bound or col.upper_bound or col.anomaly or col.percentile or col.distance %}"{{ col.name }}"
                        {%- else %}{{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- endif %}{%- if not loop.last %}, {%- endif %}
                    {% endfor %}
                FROM TABLE(RESULT_SCAN(-1)) RES;
            
            {% endif %}
            
            END
            
            
            
            
    name: Anomaly Detection BAse
    version: 1
  StepType-247:
    id: "247"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |
            {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Copy of Stage
    version: 1
  StepType-250:
    id: "250"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |+
        capitalized: Anomaly Detection
        short: ML_AD
        tagColor: 'blue'
        plural: ML Anomaly Detections


        config:
         
        - groupName: Anomaly Model Input
          items:




            - type: toggleButton
              displayName: 'Multi-Series'
              attributeName: 'multiseries'
              isRequired: false
              default: 'true'



            - type: columnDropdownSelector
              displayName: 'Series Column'
              attributeName: 'seriescol'
              isRequired: false
              enableIf: "{{ config.multiseries }}"

        # Name of the column containing the timestamps in input data #

            - type: columnDropdownSelector
              displayName: 'Timestamp Column'
              attributeName: 'tscol'
              isRequired: true

        # Name of the column containing the target (dependent value) in input data #

            - type: columnDropdownSelector
              displayName: 'Target Column'
              attributeName: 'tgtcol'
              isRequired: true


        # An OBJECT containing key-value pairs used to configure the forecast job #

            - type: toggleButton
              displayName: 'Config Object'
              attributeName: 'cobject'
              isRequired: false
              default: false

            - type: textBox
              displayName: 'Prediction Interval'
              attributeName: 'predictioninterval'
              enableIf: '{%- if config.cobject %}true{%- else %}false{%- endif %}'
              default: 'ex:0.80(float value)'

        # The time series to forecast #

            - type: toggleButton
              displayName: 'Series value'
              attributeName: 'series_value'
              isRequired: false
              enableIf: '{%- if config.multiseries  %}true{%- else %}false{%- endif %}' 

            - displayName: Enter the series value
              type: textBox
              attributeName: 'svalue'
              enableIf: '{%- if config.series_value and config.multiseries %}true{%- else %}false{%- endif %}'

        # Exogenous variable:additional features influencing the forecast #

            - type: toggleButton
              displayName: 'Supervised Data'
              attributeName: 'spdata'
              isRequired: false
              default: 'false'

            - type: columnDropdownSelector
              displayName: 'Labelled Column'
              attributeName: 'lcdata'
              isRequired: false
              default: 'false'
              enableIf: '{%-if config.spdata %}true{%- else %}false{%- endif %}'


            - type: toggleButton
              displayName: 'Unsupervised Data'
              attributeName: 'uspdata'
              isRequired: false
              default: 'false'
              enableIf: '{%-if config.spdata %}false{%- else %}true{%- endif %}'
         


            - displayName: Exogenous data source
              type: multisourceToggle
              attributeName: 'mtoggle'
              default: 'true'
              enableIf: '{%- if config.spdata or config.uspdata %}true{%- else %}false{%- endif %}'

            



        systemColumns:
        - displayName: "FORECAST"
          attributeName: forecast
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "LOWER_BOUND"
          attributeName: lower_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "UPPER_BOUND"
          attributeName: upper_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "IS_ANOMALY"
          attributeName: anomaly
          transform: ""
          dataType: BOOLEAN
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "PERCENTILE"
          attributeName: percentile
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "DISTANCE"
          attributeName: distance
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'



      templates:
        create:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : ML Anomaly Detection == #}
            {# == Node Type Description    : This node creates a Anomaly Detection table  == #}
            
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'AnomalyDetection_' ~ src_node.name %}
            
            {# Forecast table creation #}
            
            {{ stage('Create Anomaly Detection Table') }}
            
            {% if config.spdata %}
                CREATE OR REPLACE TABLE {{ this }}
                (
                    {%- for col in columns %}
                            {%- if col.name != config.lcdata.name %}
                            "{{ col.name }}" 
                            {%- if col.name == config.tscol.name %} TIMESTAMP 
                            {%- elif col.name == config.tgtcol.name %} FLOAT 
                            {%- else %} {{ col.dataType }}
                            {%- endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{%- endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {%- endif %}
                    {% endfor %}
                )
            {% else %}
                CREATE OR REPLACE TABLE {{ this }}
                (
                    {% for col in source.columns %}
                        "{{ col.name }}" 
                        {%- if col.name == config.tscol.name %} TIMESTAMP 
                        {%- elif col.name == config.tgtcol.name %} FLOAT 
                        {%- else %} {{ col.dataType }}
                        {%- endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{%- endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
            {% endif %}
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
        run:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : ML Anomaly Detection == #}
            {# == Node Type Description    : This node creates a Anomaly Detection table  == #}
            
            
            {# INitialize forecast model name #}
            
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'ANOMALY_' ~ src_node.name %}
            
            {%- set nsVariables = namespace(squotes="") -%}
            
            {# Check series column datatype to determine if quoted required for series value #}
            
            {% if config.series_value %}
                    {% for col in source.columns  %} 
                        {% if col.id == config.seriescol.id %}
            			    {%if  (col.dataType | replace("0", "")
                | replace("1", "")
                | replace("2", "")
                | replace("3", "")
                | replace("4", "")
                | replace("5", "")
                | replace("6", "")
                | replace("7", "")
                | replace("8", "")
                | replace("9", "") |replace("(","")|replace(")",""))  in ('STRING','VARCHAR','CHAR','TEXT') %}
            				   {% set  nsVariables.squotes ="'" %}
            				{% else %}
            				   {% set  nsVariables.squotes = ""  %}
                                {{ col.dataType}}
            				{% endif %}
            			{% endif %}
                    {% endfor %}
            
            {% endif %}
            
            {# Forecast table truncated #}
            
            {{ stage('Truncate Anomaly Detection table') }}
            
            TRUNCATE IF EXISTS {{ this }}
            
            {# Initial training data inserted into forecast table #}
            
            
            {# Forecast model created #}
            
            {{ stage('Create Anomaly Model Instance') }}
            
            
            CREATE OR REPLACE SNOWFLAKE.ML.ANOMALY_DETECTION
             {{ ref_no_link(node.location.name, forecast_name) }}(
                INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound or col.anomaly or col.percentile or col.distance) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}            
                    {{ source.join }}
                    WHERE  "{{ config.tgtcol.name }}" IS NOT NULL
                '),
                {% if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}',
                TARGET_COLNAME => '{{ config.tgtcol.name }}',
            	{% if config.lcdata  %}LABEL_COLNAME => '{{ config.lcdata.name.lower() }}' {% else %} LABEL_COLNAME => '' {% endif %}
            )
            
            {# Forecast data based on model with predicted values  is inserted into forecast table #}
            
            {{ stage('Insert Anomaly data') }}
            BEGIN
            {% if config.uspdata %}
                CALL {{ ref_no_link(node.location.name, forecast_name) }}!detect_anomalies(
                    INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT 
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound or col.anomaly or col.percentile or col.distance or col.lcdata) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}
                    {{ sources[-1].join }}
                '),
                {%if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}' ,
                TARGET_COLNAME => '{{ config.tgtcol.name }}')
                {% if config.cobject %},CONFIG_OBJECT => {'prediction_interval': {{ config.predictioninterval }}} {% endif %};
            
            
                INSERT INTO {{ this }}
                (
                    {%- for col in source.columns  %} 
                        "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                )
                SELECT 
                    {% for col in source.columns %}
                        {%- if config.multiseries and col.id == config.seriescol.id %}"SERIES"
                        {%- elif col.id == config.tscol.id %}"TS"
                        {%- elif col.id == config.tgtcol.id %}"Y"
                        {%- elif col.forecast or col.lower_bound or col.upper_bound or col.anomaly or col.percentile or col.distance %}"{{ col.name }}"
                        {%- else %}{{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- endif %}{%- if not loop.last %}, {%- endif %}
                    {% endfor %}
                FROM TABLE(RESULT_SCAN(-1)) RES;
            
            {% else %}
                CALL {{ ref_no_link(node.location.name, forecast_name) }}!detect_anomalies(
                    INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT 
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound or col.anomaly or col.percentile or col.distance) %}
                    {%- if col.name != config.lcdata.name %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                     {%- endif %}
                    {%- endfor %}
                    {{ sources[-1].join }}
                '),
                {%if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}' ,
                TARGET_COLNAME => '{{ config.tgtcol.name }}')
                {% if config.cobject %},CONFIG_OBJECT => {'prediction_interval': {{ config.predictioninterval }}} {% endif %};
            
            
                INSERT INTO {{ this }}
                (
                    {%- for col in columns %}
                    {%- if col.name != config.lcdata.name %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endif %}
                    {%- endfor %}
                )
                SELECT 
                {% for col in source.columns %}
                    {%- if col.name != config.lcdata.name %}
                        {%- if config.multiseries and col.id == config.seriescol.id %}"SERIES"
                        {%- elif col.id == config.tscol.id %}"TS"
                        {%- elif col.id == config.tgtcol.id %}"Y"
                        {%- elif col.forecast or col.lower_bound or col.upper_bound or col.anomaly or col.percentile or col.distance %}"{{ col.name }}"
                        {%- else %}{{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- endif %}{%- if not loop.last %}, {%- endif %}
                    {%- endif %}
                {% endfor %}
            FROM TABLE(RESULT_SCAN(-1)) RES;
            
            
            {% endif %}
            
            END
            
            
            
            
    name: Anomaly Detection 01
    version: 1
  StepType-255:
    id: "255"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Copy of Persistent Stage
    version: 1
  StepType-256:
    id: "256"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Copy of Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                          SELECT
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  "DIM"."{{ col.name }}"
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                  {{ get_source_transform(col) }}
                              {% endif %}
                              AS "{{ col.name }}",
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                          {{ source.join }}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %}
                          WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %} )
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        {% endif %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Copy of Dimension
    version: 1
  StepType-259:
    id: "259"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |+
        capitalized: Anomaly Detection
        short: ML_AD
        tagColor: 'blue'
        plural: ML Anomaly Detections


        config:
         
        - groupName: Anomaly Model Input
          items:




            - type: toggleButton
              displayName: 'Multi-Series'
              attributeName: 'multiseries'
              isRequired: false
              default: 'true'



            - type: columnDropdownSelector
              displayName: 'Series Column'
              attributeName: 'seriescol'
              isRequired: false
              enableIf: "{{ config.multiseries }}"

        # Name of the column containing the timestamps in input data #

            - type: columnDropdownSelector
              displayName: 'Timestamp Column'
              attributeName: 'tscol'
              isRequired: true

        # Name of the column containing the target (dependent value) in input data #

            - type: columnDropdownSelector
              displayName: 'Target Column'
              attributeName: 'tgtcol'
              isRequired: true


        # An OBJECT containing key-value pairs used to configure the forecast job #

            - type: toggleButton
              displayName: 'Config Object'
              attributeName: 'cobject'
              isRequired: false
              default: false

            - type: textBox
              displayName: 'Prediction Interval'
              attributeName: 'predictioninterval'
              enableIf: '{%- if config.cobject %}true{%- else %}false{%- endif %}'
              default: 'ex:0.80(float value)'


        # Exogenous variable:additional features influencing the forecast #

            - type: toggleButton
              displayName: 'Supervised Data'
              attributeName: 'spdata'
              isRequired: false
              default: 'false'
              enableIf: '{%-if config.uspdata %}false{%- else %}true{%- endif %}'

            - type: columnDropdownSelector
              displayName: 'Labeled Column'
              attributeName: 'lcdata'
              isRequired: false
              default: 'false'
              enableIf: '{%-if config.spdata %}true{%- else %}false{%- endif %}'


            - type: toggleButton
              displayName: 'Unsupervised Data'
              attributeName: 'uspdata'
              isRequired: false
              default: 'false'
              enableIf: '{%-if config.spdata %}false{%- else %}true{%- endif %}'
         
            - displayName: Data that needs to be analyzed can be added by enabling the multi-source toggle below 
              type: label
              enableIf: '{%- if config.spdata or config.uspdata %}true{%- else %}false{%- endif %}'

            - displayName: Exogenous data source
              type: multisourceToggle
              attributeName: 'mtoggle'
              default: 'true'
              enableIf: '{%- if config.spdata or config.uspdata %}true{%- else %}false{%- endif %}'

            



        systemColumns:
        - displayName: "FORECAST"
          attributeName: forecast
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "LOWER_BOUND"
          attributeName: lower_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "UPPER_BOUND"
          attributeName: upper_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "IS_ANOMALY"
          attributeName: anomaly
          transform: ""
          dataType: BOOLEAN
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "PERCENTILE"
          attributeName: percentile
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "DISTANCE"
          attributeName: distance
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'



      templates:
        create:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : ML Anomaly Detection == #}
            {# == Node Type Description    : This node creates a Anomaly Detection table  == #}
            
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'AnomalyDetection_' ~ src_node.name %}
            
            {# Forecast table creation #}
            
            {{ stage('Create Anomaly Detection Table') }}
            
            {% if config.spdata %}
                CREATE OR REPLACE TABLE {{ this }}
                (
                    {%- for col in columns %}
                            {%- if col.name != config.lcdata.name %}
                            "{{ col.name }}" 
                            {%- if col.name == config.tscol.name %} TIMESTAMP 
                            {%- elif col.name == config.tgtcol.name %} FLOAT 
                            {%- else %} {{ col.dataType }}
                            {%- endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{%- endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {%- endif %}
                    {% endfor %}
                )
            {% else %}
                CREATE OR REPLACE TABLE {{ this }}
                (
                    {% for col in source.columns %}
                        "{{ col.name }}" 
                        {%- if col.name == config.tscol.name %} TIMESTAMP 
                        {%- elif col.name == config.tgtcol.name %} FLOAT 
                        {%- else %} {{ col.dataType }}
                        {%- endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{%- endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
            {% endif %}
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
        run:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : ML Anomaly Detection == #}
            {# == Node Type Description    : This node creates a Anomaly Detection table  == #}
            
            
            {# INitialize forecast model name #}
            
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'ANOMALY_' ~ src_node.name %}
            
            {%- set nsVariables = namespace(squotes="") -%}
            
            {# Check series column datatype to determine if quoted required for series value #}
            
            {% if config.series_value %}
                    {% for col in source.columns  %} 
                        {% if col.id == config.seriescol.id %}
            			    {%if  (col.dataType | replace("0", "")
                | replace("1", "")
                | replace("2", "")
                | replace("3", "")
                | replace("4", "")
                | replace("5", "")
                | replace("6", "")
                | replace("7", "")
                | replace("8", "")
                | replace("9", "") |replace("(","")|replace(")",""))  in ('STRING','VARCHAR','CHAR','TEXT') %}
            				   {% set  nsVariables.squotes ="'" %}
            				{% else %}
            				   {% set  nsVariables.squotes = ""  %}
                                {{ col.dataType}}
            				{% endif %}
            			{% endif %}
                    {% endfor %}
            
            {% endif %}
            
            {# Forecast table truncated #}
            
            {{ stage('Truncate Anomaly Detection table') }}
            
            TRUNCATE IF EXISTS {{ this }}
            
            {# Initial training data inserted into forecast table #}
            
            
            {# Forecast model created #}
            
            {{ stage('Create Anomaly Model Instance') }}
            
            
            CREATE OR REPLACE SNOWFLAKE.ML.ANOMALY_DETECTION
             {{ ref_no_link(node.location.name, forecast_name) }}(
                INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound or col.anomaly or col.percentile or col.distance) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}            
                    {{ source.join }}
                    WHERE  "{{ config.tgtcol.name }}" IS NOT NULL
                '),
                {% if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}',
                TARGET_COLNAME => '{{ config.tgtcol.name }}',
            	{% if config.lcdata  %}LABEL_COLNAME => '{{ config.lcdata.name.lower() }}' {% else %} LABEL_COLNAME => '' {% endif %}
            )
            
            {# Forecast data based on model with predicted values  is inserted into forecast table #}
            
            {{ stage('Insert Anomaly data') }}
            BEGIN
            {% if config.uspdata %}
                CALL {{ ref_no_link(node.location.name, forecast_name) }}!detect_anomalies(
                    INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT 
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound or col.anomaly or col.percentile or col.distance or col.lcdata) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}
                    {{ sources[-1].join }}
                '),
                {%if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}' ,
                TARGET_COLNAME => '{{ config.tgtcol.name }}'
                {% if config.cobject %},CONFIG_OBJECT => {'prediction_interval': {{ config.predictioninterval }}} {% endif %});
            
            
                INSERT INTO {{ this }}
                (
                    {%- for col in source.columns  %} 
                        "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                )
                SELECT 
                    {% for col in source.columns %}
                        {%- if config.multiseries and col.id == config.seriescol.id %}"SERIES"
                        {%- elif col.id == config.tscol.id %}"TS"
                        {%- elif col.id == config.tgtcol.id %}"Y"
                        {%- elif col.forecast or col.lower_bound or col.upper_bound or col.anomaly or col.percentile or col.distance %}"{{ col.name }}"
                        {%- else %}{{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- endif %}{%- if not loop.last %}, {%- endif %}
                    {% endfor %}
                FROM TABLE(RESULT_SCAN(-1)) RES;
            
            {% else %}
                CALL {{ ref_no_link(node.location.name, forecast_name) }}!detect_anomalies(
                INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT 
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound or col.anomaly or col.percentile or col.distance) %}
                        {%- if col.name != config.lcdata.name %}
                            "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                        {%- endif %}
                    {%- endfor %}
                    {{ sources[-1].join }}
                '),
                {%if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}',
                TARGET_COLNAME => '{{ config.tgtcol.name }}'{% if config.cobject %},
                
                CONFIG_OBJECT => {'prediction_interval': {{ config.predictioninterval }}} {% endif %}
            );
            
            
            
            
            
                INSERT INTO {{ this }}
                (
                    {%- for col in columns %}
                    {%- if col.name != config.lcdata.name %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endif %}
                    {%- endfor %}
                )
                SELECT 
                {% for col in source.columns %}
                    {%- if col.name != config.lcdata.name %}
                        {%- if config.multiseries and col.id == config.seriescol.id %}"SERIES"
                        {%- elif col.id == config.tscol.id %}"TS"
                        {%- elif col.id == config.tgtcol.id %}"Y"
                        {%- elif col.forecast or col.lower_bound or col.upper_bound or col.anomaly or col.percentile or col.distance %}"{{ col.name }}"
                        {%- else %}{{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- endif %}{%- if not loop.last %}, {%- endif %}
                    {%- endif %}
                {% endfor %}
            FROM TABLE(RESULT_SCAN(-1)) RES;
            
            
            {% endif %}
            
            END
            
            
            
            
    name: Anomaly Detection 1.0
    version: 1
  StepType-Dimension:
    id: Dimension
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                          SELECT
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  "DIM"."{{ col.name }}"
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                  {{ get_source_transform(col) }}
                              {% endif %}
                              AS "{{ col.name }}",
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                          {{ source.join }}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %}
                          WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %} )
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        {% endif %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension
    version: 1
  StepType-Fact:
    id: Fact
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Fact
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |2-

                {% if node.materializationType == 'table' %}
                    {{ stage('Create Fact Table') }}
                
                    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                
                
                {% elif node.materializationType == 'view' %}
                    {{ stage('Create Fact View') }}
                
                    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                    AS
                    {% for source in sources %}
                
                        {% if loop.first %}SELECT {% endif %}
                
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                
                        {% if not loop.last %} UNION ALL {% endif %}
                    {% endfor %}
                
                {% endif %}
                
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                    
                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
                    
                    {% for source in sources %}
                    
                        {% if has_business_key %}
                    
                            {{ stage('MERGE ' + source.name | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }})
                                AS "SRC"
                            ON
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in source.columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}
                    
                            {{ stage('Insert ' + source.name | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                        {% endif %}
                    {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
                
                
    name: Fact
    version: 1
  StepType-Source:
    id: Source
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Source
        short: null
        tagColor: '#D26000'
        plural: Sources
      templates:
        create:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
        run:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
    name: Source
    version: 1
  StepType-Stage:
    id: Stage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage
    version: 1
  StepType-View:
    id: View
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-persistentStage:
    id: persistentStage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage
    version: 1
subgraphs:
  Subgraph-56:
    id: "56"
    name: Supervised Data
    steps:
      - 9e99ca9b-9c93-4454-85c0-c9592f7a9f99
      - 0b61ea6a-258f-4107-9271-825c33ae0501
      - fd555d58-9016-4e85-b8a4-1d57f8123931
      - 2fa38cf7-5ea6-454f-ac3f-7fa4cd69f094
      - 58342162-5fa9-4ef2-bfb9-1b68603a0fba
      - 2dda3f81-e415-4fb1-871f-85a8c52c179f
  Subgraph-57:
    id: "57"
    name: Unsupervised Data
    steps:
      - 9e99ca9b-9c93-4454-85c0-c9592f7a9f99
      - 0b61ea6a-258f-4107-9271-825c33ae0501
      - a804f266-0572-425a-8eff-f2cd91205885
      - daa0a4c4-4dc0-45fb-92f4-d499fb774e1c
  Subgraph-58:
    id: "58"
    name: Supervised Data with Multiseries
    steps:
      - 89a0a39f-daca-4271-a1e7-41abc27f72ae
      - c3498c55-5a7b-4d15-b220-46166d532e4f
      - 8915b6ee-9b22-4726-a936-1cf70caa4a71
      - f1a58ce0-a9e1-4a41-aeee-44f813aee468
      - 29f0e6bd-7f52-4454-bd41-bd3e5a14e094
  Subgraph-59:
    id: "59"
    name: Unsupervised Data with MultiSeries
    steps:
      - 89a0a39f-daca-4271-a1e7-41abc27f72ae
      - c3498c55-5a7b-4d15-b220-46166d532e4f
      - c63d25b3-834d-4fe1-ab69-8b15cf377a95
      - 9aa8db0e-c16b-4da6-b6d6-b7f9011a335a
      - 4f26afbe-2a17-49dd-86a9-b2df7b548e98
version: 2
