defaultStorageMapping: SOURCE
installedPackages: {}
jobs: {}
locations:
  SOURCE:
    mappingDefinitions:
      "135":
        database: QUICKSTART
        schema: ML_FUNCTIONS
      "51":
        database: QUICKSTART
        schema: ML_FUNCTIONS
  STAGE:
    mappingDefinitions:
      "135":
        database: QA
        schema: ML_QA
      "51":
        database: QA
        schema: ML_QA
  TARGET:
    mappingDefinitions:
      "135":
        database: QA
        schema: ML_QA
      "51":
        database: QA
        schema: ML_QA
macros:
  Macro-1:
    id: "1"
    macroString: |-
      {#-- The below block of code initialises variables in case of node typess using advance deployment strategy #}
      
      {% if desiredState %}
          {% set columns = desiredState.columns %}
          {% set storageLocations = desiredState.storageLocations %}
          {% set config = desiredState.config %}
          {% set sources = desiredState.sources %}
          {% set node = desiredState.node %}
          {% set parameters = desiredState.parameters %}
      {% endif %}
      
      {%- macro unit_measure(column) -%}
          CASE WHEN {{ column }} = 'EA' THEN 'SAP UNIT' ELSE 'NOT AWARE' END
      {%- endmacro %}
      
      {%- macro PRD_ID(column) -%}
          CASE WHEN {{ column }} = 707 THEN '1' ELSE '0' END
      {%- endmacro %}
      
      {#-- This macro will drop a table / view / dynamic table if it already exists as a different or the same object type #}
      {#-- Errors can occur when creating a same named object of a different type #}
      
      {% macro dropTblView() %}
      
        {%- set db = ref_no_link(node.location.name, node.name).split('.')[0]  %} 
        {%- set sch = ref_no_link(node.location.name, node.name).split('.')[1]  %} 
        {%- set obj = "{{ node.name }}"  %} 
      
          begin
              let db varchar := '{{db}}';
              let sch varchar := '{{sch}}';
              let obj varchar := '{{obj}}';
      
              begin
                  execute immediate 'drop table if exists ' || db || '.' || sch || '.' || obj;    
              exception
                  when statement_error then
                      null;
              end;
      
              begin
                  execute immediate 'drop view if exists ' || db || '.' || sch || '.' || obj;    
              exception
                  when statement_error then
                      null;
              end;
      
              begin
                  execute immediate 'drop dynamic table if exists ' || db || '.' || sch || '.' || obj;    
              exception
                  when statement_error then
                      null;
              end;
      
              begin
                  execute immediate 'drop task if exists ' || db || '.' || sch || '.' || obj;    
              exception
                  when statement_error then
                      null;
              end;
          end;
      {% endmacro %}
      
      {% macro resumeRootTask() %}
      {% set tgtDb = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
      {% set tgtSch = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
      {%- set fqRootTaskName = '' + tgtDb + '.' + tgtSch + '.' + desiredState.config.rootTask + ''-%} 
      
      begin
          let sqlDml := 'select system$task_dependents_enable(''''{{fqRootTaskName}}'''')';
          execute immediate sqlDml;
              exception
                  when statement_error then
                  return 'Task already running';
          return 'Task resumed';
      end;
      {% endmacro %}
      
      {% macro dup_rename() %}
          {{ sources[0].columns | selectattr('id','equalto',column.id) | map(attribute='sourceColumns') | first | map(attribute='node') | map(attribute='name') | first + "_" + sources[0].columns | selectattr('id','equalto',column.id) | map(attribute='sourceColumns') | first | map(attribute='column') | map(attribute='name') | first }}
      {%- endmacro %}
      
      {%- macro partition_by() -%}
      
          {%- set nsVariables = namespace(partition="") -%}
          {%- set sourceTableName = node.name -%}
      
          {%- for i in config.partitionBy.get('items') -%}
              {%- set colName = i.partColName.name -%}
              {%- if loop.first -%}
                  {%- set nsVariables.partition = getSourceNameFromColumnName(colName) + '."' + colName + '"' -%}
              {%- else -%}
                  {%- set nsVariables.partition = nsVariables.partition + ',' + getSourceNameFromColumnName(colName) + '."' + colName + '"' -%}
              {%- endif -%}
      
          {%- endfor -%}
      
          {{- nsVariables.partition -}}
      {%- endmacro -%}
      
      {% macro order_by_col(return) %}
      
          {% set nsVariables = namespace(orderBy="") -%}
      
          {% if config.recordVersioning in ('Datetime Column','Numeric Column') -%}
              {% set datetimeNumericColSort = config.orderBy.get('items') -%}
              {% set dateTimeCol = datetimeNumericColSort  | map(attribute='colName.name') | first -%}        
              {% set nsVariables.orderBy = getSourceNameFromColumnName(dateTimeCol) + '."' + dateTimeCol + '"' -%}
          {% else -%}
              {% set dateTimeColSort = config.orderByDateTime.get('items') -%}
              {% set dateCol = dateTimeColSort | map(attribute='colNameDate.name') | first -%}
              {% set timeCol = dateTimeColSort | map(attribute='colNameTimestamp.name') | first -%}
              {% set nsVariables.orderBy = 'to_timestamp(' + getSourceNameFromColumnName(dateCol) + '."' + dateCol + '" || ' + '\'T\'' + ' ||' + getSourceNameFromColumnName(timeCol) + '."' + timeCol + '")' -%}
          {% endif -%}
      
          {{ nsVariables.orderBy }}
      
      {% endmacro %}
      
      
      {% macro dimensionHistoryPk() %}
          {%- set nsVariables = namespace(dimensionHistoryColumns="") -%}
      
          {%- set partitionBy = partition_by().split(",") -%}
          {%- set orderBy = order_by_col() -%}
      
          {%- for col in partitionBy -%}
              {%- if loop.first -%}
                  {%- set nsVariables.dimensionHistoryColumns = col -%}
              {%- else -%}
                  {%- set nsVariables.dimensionHistoryColumns = nsVariables.dimensionHistoryColumns + ' || ' + '\'-\'' + ' ||' + col -%}
              {%- endif -%}
          {%- endfor -%}
      
          {%- set nsVariables.dimensionHistoryColumns = nsVariables.dimensionHistoryColumns + ' || ' + '\'-\'' + ' || date_part(epoch_milliseconds, ' + orderBy + ')' -%}
      
          {{- nsVariables.dimensionHistoryColumns -}}
      
      {% endmacro %}
      
      {% macro sourceTable() %}
          {%- set nsVariables = namespace(partition="") -%}
          {% set sourceTableName = desiredState.node.name %}
      
          {%- for i in desiredState.config.partitionBy.get('items') -%}
      
          {%- if loop.first -%}
              {%- set nsVariables.partition = '"' + sourceTableName + '"."' + i.partColName.name + '"' -%}
          {%- else -%}
              {%- set nsVariables.partition = nsVariables.partition + ',"' + sourceTableName + '"."' + i.partColName.name + '"' -%}
          {%- endif -%}
      
          {%- endfor %}
      
          {{- nsVariables.partition -}}
      
      {% endmacro %}
      
      
      {%- macro getColumnId( colName ) -%}
      
          {%- set columnId = columns | selectattr('name','equalto',colName) | map(attribute='id') | first -%}
      
          {{- columnId -}}
      
      {%- endmacro -%}
      
      {% macro getSourceNameFromColumnName( colName ) %}
      
          {%- set sourceObject = sources[0].columns | selectattr('id','eq',getColumnId( colName )) | map(attribute='sourceColumns')  | first | map(attribute='node.name') | first -%}
      
          "{{- sourceObject -}}"
      
      {% endmacro %}
      
      {% macro getSourceNameFromColumnId( colId ) %}
      
          {%- set sourceObject = sources[0].columns | selectattr('id','eq',colId) | map(attribute='sourceColumns')  | first | map(attribute='node.name') | first -%}
      
          "{{- sourceObject -}}"
      
      {% endmacro %}
      
      {%- macro ref_raw(location_name, node_name) -%}
          {%- raw -%}{{ ref('{% endraw %}{{- location_name }}{% raw %}', '{% endraw %}{{ node_name }}{% raw %}') }}{% endraw %}
      {%- endmacro -%}
      
      {%- macro ref_no_link_raw(location_name, node_name) -%}
          {% raw %}{{ ref_no_link('{% endraw %}{{ location_name }}{% raw %}', '{% endraw %}{{ node_name }}{% raw %}') }}{% endraw %}
      {%- endmacro -%}
      
      {%- macro ref_link_raw(location_name, node_name) -%}
          {% raw %}{{ ref_link('{% endraw %}{{ location_name }}{% raw %}', '{% endraw %}{{ node_name }}{% raw %}') }}{% endraw %}
      {%- endmacro -%}
      
      
      {%- macro join_columns() -%}
          {%- set nsVariables = namespace(partition="") -%}
          {%- set sourceTableName = node.name -%}
      
          {%- for i in config.partitionBy.get('items') -%}
              {%- set colName = i.partColName.name -%}
              {%- if loop.first -%}
                  {%- set nsVariables.partition = colName -%}
              {%- else -%}
                  {%- set nsVariables.partition = nsVariables.partition + ',' + colName -%}
              {%- endif -%}
      
          {%- endfor -%}
      
          {{- nsVariables.partition -}}
      
      {%- endmacro -%}
      
      
      {#-- This macro will frame the order by clause with the columns and sort order specified in config #}
      {#-- Input parmeters   - None #}
      {#-- Return            - Order by clause #}
      
      {%- macro sortorder_by_colv(return) -%}
          {%- set nsVariables = namespace(sortcolNames="") -%}
          {%if config.orderby %}
              {%- for i in config.orderbycolumn.get('items') -%}
                  {%- set colName = i.sortColName.name -%}
                  {%- set colOrder = i.sortOrder -%}
      	        {%- if loop.first -%}	      
      		        {%- set nsVariables.sortcolNames = '"' + colName + '"' + colOrder -%}	  
      	        {%- else -%}      
      		        {%- set nsVariables.sortcolNames = nsVariables.sortcolNames + ',' + '"' + colName + '"' + colOrder-%}	  
      	        {%- endif -%}
              {%- endfor -%}	
                  {%- set nsVariables.sortcolNames = 'order by' + nsVariables.sortcolNames -%}
       
          {% endif %} 
          
          {{- nsVariables.sortcolNames -}}
       
      {%- endmacro -%}
      
      
      
      {#-- This macro will split the join clause into from and rest of the clauses like where,groupby,orderby ,qualify  #}
      {#-- Input parmeters   - joinclause #}
      {#-- Return            - from clause and other clauses #}
      
      
      {%- macro get_clause( joinclause , ret_clause ) -%}
      
                  {% set join_clause = joinclause %}
                  {% set has_where_clause = 'where'in join_clause %}
                  {% set has_WHERE_clause = 'WHERE'in join_clause %}
                  {% set has_order_clause = 'order by'in join_clause %}
                  {% set has_ORDER_clause = 'ORDER BY'in join_clause %}
                  {% set has_group_clause =  'group by'in join_clause %}
                  {% set has_GROUP_clause = 'GROUP BY'in join_clause %}
                  {% set has_qualify_clause =  'qualify'in join_clause %}
                  {% set has_QUALIFY_clause = 'QUALIFY'in join_clause %}
      
                 
      
                  {% set clause='default' %}
      
                  {% if has_where_clause %}
      
                      {% set keyword='where'%} 
                      {% set clause='where_clause' %}
        
                  {% elif  has_WHERE_clause %}
      
                       {% set keyword='WHERE'%}
                       {% set clause='where_clause' %}
                  {% endif %}
      
                  {% if has_group_clause and clause != 'where_clause'  %}
      
                       {% set keyword='group by'%}
                       {% set clause='group_clause' %}
                  
                  {% elif  has_GROUP_clause and clause != 'where_clause' %}
      
                       {% set keyword='GROUP BY'%}
                       {% set clause='group_clause' %}
      
                  {% endif %}
      			
                  {% if has_qualify_clause and clause != 'where_clause' and clause != 'group_clause'  %}
      
                       {% set keyword='qualify'%}
                       {% set clause='qualify_clause' %}
                  
                  {% elif  has_QUALIFY_clause and clause != 'where_clause' and clause != 'group_clause'  %}
      
                       {% set keyword='QUALIFY'%}
                       {% set clause='qualify_clause' %}
      
                  {% endif %}            
      
      			{% if has_order_clause and  clause != 'where_clause' and clause != 'group_clause' and clause != 'qualify_clause' %}
      
                       {% set keyword='order by'%}
                       {% set clause='order_clause' %}
                  
                  {% elif has_ORDER_clause and clause != 'where_clause' and clause != 'group_clause' and clause != 'qualify_clause' %}
      
                       {% set keyword='ORDER BY'%}
                       {% set clause='order_clause' %}
      
                  {% endif %}
      
      
      
                  {% if clause == 'where_clause' %}
                     {% set parts = join_clause.split(keyword) %}
                     {% set from_clause = parts[0] %}
                     {% set add_clause = 'AND' + join_clause.split(keyword)[1] %}
      
                  {% elif clause == 'group_clause' %}
      
                     {% set parts = join_clause.split(keyword) %}
                     {% set from_clause = parts[0] %}
                     {% set add_clause = 'group by' + join_clause.split(keyword)[1] %}
      
                  
                  {% elif clause == 'qualify_clause' %}
      
                     {% set parts = join_clause.split(keyword) %}
                     {% set from_clause = parts[0] %}
                     {% set add_clause = 'qualify' + join_clause.split(keyword)[1] %}
      
      
                  {% elif clause == 'order_clause' %}
      
                     {% set parts = join_clause.split(keyword) %}
                     {% set from_clause = parts[0] %}
                     {% set add_clause =  'order by' + join_clause.split(keyword)[1] %}
                     
      
                  {% else %}
      
                     {% set from_clause = join_clause %}
                     {% set add_clause = '' %}
      
                  {% endif %}
      			
      			{% if ret_clause == 'from' %}
      			   {{ from_clause }}
      			{% else %}
      			   {{ add_clause }}
      			{% endif %}
      			
      			
      {%- endmacro -%}
packages: {}
projects: {}
stepTypes:
  StepType-151:
    id: "151"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |+
        capitalized: Work with Task
        short: TSKWRK
        plural: Stages
        tagColor: "#FF851F"

        deployStrategy: advanced

        config:
        - groupName: Options
          items:
          - displayName: Development Mode
            attributeName: devMode
            type: toggleButton
            isRequired: true
            default: true

        # Cluster Key-determine if a node is to be clustered or not #

          - type: toggleButton
            attributeName: clusterKey
            displayName: Cluster Key
            default: false
            isRequired: true

          - type: toggleButton
            attributeName: clusterKeyExpressions
            displayName: Allow Expressions in Cluster Key
            default: false
            isRequired: true
            enableIf: "{% if config.clusterKey %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfig
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnName
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and not config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfigExpressions
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnNameExpressions
               isRequired: false
          
            -  type: textBox
               displayName: Expression
               attributeName: sqlExpression
               default: "ex. trunc(<column_name>, -5)"
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - type: multisourceToggle

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
            
          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: false


        - groupName: General Options
          items:

          - type: toggleButton
            attributeName: selectDistinct
            displayName: Distinct
            default: false
            enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"

          - type: toggleButton
            attributeName: groupByAll
            displayName: Group By All
            enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"
            default: false
             
          - displayName: Order By
            attributeName: orderby
            type: toggleButton
            default: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - type: tabular
            displayName: 'Sort column'
            attributeName: orderbycolumn
            columns:

              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: sortColName

              -  type: dropdownSelector
                 displayName: Sort Order
                 attributeName: sortOrder
                 default: desc
                 options:
                 - desc
                 - asc
               
            isRequired: true
            enableIf: "{% if config.orderby %} true {% else %} false {% endif %}"

              
        - groupName: Scheduling Options

         # Schedule mode-specifies whether a warehouse or serverless compute is used to run the task #

          enableIf: "{% if config.devMode == true %} false {% else %} true {% endif %}" 
          items:
          - displayName: Scheduling Mode
            attributeName: schedulingMode
            type: dropdownSelector
            default: Warehouse Task
            options:
              - Warehouse Task
              - Serverless Task
            isRequired: true

          # Checks whether source streams have data before executing a task #

          - displayName: When Source Stream has Data Flag
            attributeName: flagSrcStream
            type: toggleButton
            default: true
            isRequired: true

          - displayName: Multiple Stream has Data Logic
            attributeName: multiStreamBehavior
            type: dropdownSelector
            default: AND
            options:
              - AND
              - OR
            isRequired: true
            enableIf: "{% if config.flagSrcStream == true %} true {% else %} false {% endif %}"

          # Warehouse name you want the task to run #

          - displayName: Select Warehouse on which to run task
            attributeName: whName
            type: textBox
            default: '<WAREHOUSE_NAME>'
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Warehouse Task' %} true {% else %} false {% endif %}"

          - displayName: Select initial serverless Warehouse size
            attributeName: serverlessSize
            type: dropdownSelector
            default: 'MEDIUM'
            options:
              - XSMALL
              - SMALL
              - MEDIUM
              - LARGE
              - XLARGE
              - XXLARGE
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Serverless Task' %} true {% else %} false {% endif %}"

          # Way to schedule the task to run #

          - displayName: Task Schedule
            attributeName: schedulePeriodOption
            type: dropdownSelector
            default: Predecessor
            options:
              - Minutes
              - CRON
              - Predecessor
            isRequired: true

          - displayName: Enter task schedule using minutes
            attributeName: schedulePeriod
            type: textBox
            default: '60'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Minutes' %} true {% else %} false {% endif %}"

          - displayName: Enter task schedule using CRON
            attributeName: scheduleCRON
            type: textBox
            default: '5 0-23 * * * America/Los_Angeles'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'CRON' %} true {% else %} false {% endif %}"

          - displayName: Enter predecessor task(s) separated by a comma
            attributeName: predTask
            type: textBox
            default: 'DATA_TRANSFORMATION_ROOT_TASK'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

          - displayName: Enter root task name
            attributeName: rootTask
            type: textBox
            default: 'DATA_TRANSFORMATION_ROOT_TASK'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

        - groupName: Hidden Config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: task
            options:
            - task
            isRequired: false

      templates:
        create:
          templateString: |-
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Work With Task == #}
            {# == Node Type Description    : This node creates a work table and a task to insert data into work table == #}

            {# Create / Alter Table first #}
            {% if desiredState == currentState %}

                {{ stage('No table edits.') }}
                select 1 = 0

            {% elif desiredState %}

                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                {% if currentState == undefined %}
                    {# Figure out cluster key #}
                    {% set nsVariables = namespace(finalClusterKey="") %}
                    {% if desiredState.config.clusterKey == true %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% else %}

                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% endif %}
                    {% endif %}

                    {{ stage('Create Work Table', true, "sql", "create") }}
                    CREATE OR REPLACE TABLE {{ fullyQualifiedTargetTableName }}
                    (
                        {% for col in desiredState.columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

                    {% if desiredState.config.clusterKey == true %}
                        {{ stage('Apply Table Clustering', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

                        {{ stage('Resume Recluster Table', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER
                    {% endif %}

                {% elif currentState != undefined %}

                    {# Change Node Name or Change Storage Location #}
                    {# Storage Location Tests #}
                    {# Only need to account for updated Storage Location mappings   #}
                    {# Current Namespace Varialbes #}
                    {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                    {# Current State Storage Location Info #}
                    {% for source in currentState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                    {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                    {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                    {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                    {# Desired Namespace Variables #}
                    {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                    {% set nsVariables = namespace(storageLocationTest="") %}

                    {# Desired State Storage Location Info #}
                    {% for source in desiredState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                    {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                    {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                    {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                    {# Test  #}
                    {% set nsVariables.storageLocationTest = true %}
                    {% set nodeCommentTest = currentState.node.description == desiredState.node.description %}

                    {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                        {# Current mappings #}
                        {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                        
                        {# Desired mappings #}
                        {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                        {% if currentDatabaseSchema != desiredDatabaseSchema %}
                            {% set nsVariables.storageLocationTest = false %}
                        {% endif %}
                    {% endfor %}

                    {# Clustering Test #}
                    {% set clusterKeyTest = currentState.config.clusterKey == desiredState.config.clusterKey %}
                    {% set clusterKeyExpressionsTest = currentState.config.clusterKeyExpressions == desiredState.config.clusterKeyExpressions %}
                    {% set clusterKeyConfigTest = currentState.config.clusterKeyConfig == desiredState.config.clusterKeyConfig %}
                    {% set clusterKeyConfigExpressionsTest = currentState.config.clusterKeyConfigExpressions == desiredState.config.clusterKeyConfigExpressions %}

                    {% if 
                        clusterKeyTest == false or
                        clusterKeyExpressionsTest == false or
                        clusterKeyConfigTest == false or
                        clusterKeyConfigExpressionsTest == false %}

                        {% set clusterTest = false %}
                    {% else %}
                        {% set clusterTest = true %}
                    {% endif %}

                    {# Rename / Move Object #}
                    {% if (nsVariables.storageLocationTest == false or currentState.node.name != desiredState.node.name) %}
                        {{ stage('Rename and / or Move Table', true, "sql", "alter") }}
                        ALTER TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                        RENAME TO   {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                    {% endif %}

                    {# Change table description #}
                    {% if (nsVariables.nodeCommentTest == false or currentState.node.description != desiredState.node.description) %}
                        {{ stage('Change table description', true, "sql", "alter") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        SET COMMENT = '{{ desiredState.node.description | escape }}'
                    {% endif %}


                    {# Drop Columns #}
                    {% set nsVariables = namespace(colchanges=0) %}
                    {% for dropCurCol in currentState.columns %}
                        {% if dropCurCol.id not in desiredState.columns | map(attribute="id") %}
                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                            {% if nsVariables.colchanges == 1 %}
                                {{ stage('Drop Columns', true, "sql", "alter") }}
                                ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                DROP COLUMN 
                            {% else %}
                                , 
                            {% endif %}
                            "{{ dropCurCol.name }}"
                        {% endif %}
                    {% endfor %}

                    {# Add Columns #}
                    {% set nsVariables = namespace(colchanges=0) %}
                    {% for addDesCol in desiredState.columns %}
                        {% if addDesCol.id not in currentState.columns | map(attribute="id") %}
                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                            {% if nsVariables.colchanges == 1 %}
                                {{ stage('Add Columns', true, "sql", "alter") }}
                                ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                ADD COLUMN
                            {% else %}
                                ,
                            {% endif %}
                                "{{ addDesCol.name }}" {{ addDesCol.dataType }}
                                {%- if not addDesCol.nullable %} NOT NULL
                                    {%- if addDesCol.defaultValue | length > 0 %} DEFAULT {{ addDesCol.defaultValue }}{% endif %}
                                {% endif %}
                                {%- if addDesCol.description | length > 0 %} COMMENT '{{ addDescol.description | escape }}'{% endif %}
                        {% endif %}
                    {% endfor %}

                    {# Rename Columns #}
                    {% for renameCurCol in currentState.columns %}
                        {% if renameCurCol.id in desiredState.columns | map(attribute="id") %}
                            {% set desiredColumnName = desiredState.columns | selectattr('id', 'equalto', renameCurCol.id) | map(attribute='name') | first %}
                            {% if renameCurCol.name != desiredColumnName %}
                                {{ stage('Rename Column ' + renameCurCol.name, true, "sql", "alter") }}
                                ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                RENAME COLUMN "{{ renameCurCol.name }}"
                                TO "{{ desiredColumnName }}"
                            {% endif %}
                        {% endif %}
                    {% endfor %}

                    {# Change data types or other column level chnages #}
                    
                    {% set nsVariables.colchanges = 0 %}
                    {% for alterCurCol in currentState.columns %}        
                        {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
                            {% set currentDatatype = alterCurCol.dataType %}
                            {% set currentNullable = alterCurCol.nullable %}
                            {% set currentDefaultValue = alterCurCol.defaultValue %}
                            {% set currentDescription = alterCurCol.description %}

                            {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                            {% set desiredDatatype = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                            {% set desiredNullable = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                            {% set desiredDefaultValue = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                            {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}

                            {% set datatypeTest = currentDatatype == desiredDatatype %}
                            {% set nullableTest = currentNullable == desiredNullable %}
                            {% set defaultValueTest = currentDefaultValue == desiredDefaultValue %}
                            {% set descriptionTest = currentDescription == desiredDescription %}

                            {% if (datatypeTest == false or 
                                    nullableTest == false  or
                                    defaultValueTest == false or
                                    descriptionTest == false) %}
                                {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                {% if nsVariables.colchanges == 1 %}
                                    {{ stage('Change Column Attributes', true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    MODIFY
                                {% endif %}
                                {% if datatypeTest == false %}
                                    {% if nsVariables.colchanges > 1 %},{% endif %}
                                    COLUMN "{{ desiredColumnName }}"
                                    SET DATA TYPE {{ desiredDatatype }}
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                {% endif %}
                                {% if nullableTest == false %}
                                    {% if nsVariables.colchanges > 1 %},{% endif %}
                                    COLUMN "{{ desiredColumnName }}"
                                    {% if currentNullable == true %}
                                        SET
                                    {% else %}
                                        DROP
                                    {% endif %}
                                    NOT NULL
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                {% endif %}
                                {% if descriptionTest == false %}
                                    {% if nsVariables.colchanges > 1 %},{% endif %}
                                    COLUMN "{{ desiredColumnName }}"
                                    COMMENT '{{ desiredDescription }}'
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                {% endif %}
                                {% if defaultValueTest == false %}
                                    {% if nsVariables.colchanges > 1 %},{% endif %}
                                    COLUMN "{{ desiredColumnName }}"
                                    {% if desiredDefaultValue == '' %}
                                        DROP DEFAULT
                                    {% else %}
                                        SET DEFAULT {{ desiredDefaultValue }}
                                    {% endif %}
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                {% endif %}
                                
                            {% else %}
                                                    
                            {% endif %}
                        {% endif %}
                    {% endfor %}

                    {# Figure out cluster key #}
                    {% set nsVariables = namespace(finalClusterKey="") %}
                    {% if clusterTest == false %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% elif desiredState.config.clusterKey == true %}

                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
                        
                        {% else %}

                            {% set nsVariables.finalClusterKey = 'DROP CLUSTERING KEY' %}

                        {% endif %}

                        {{ stage('Recluster TABLE', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        {{ nsVariables.finalClusterKey }}

                    {% endif %}
                {% endif %}

            {% elif currentState != undefined and desiredState == undefined %}

                {# Table or View Name #}
                {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {{ stage('Drop Table', true, "sql", "drop") }}
                DROP {{ currentState.node.materializationType }} IF EXISTS {{ fullyQualifiedTargetObjectName }}

            {%- else -%}

            {{ stage('No table edits.  Unknown state.') }}
            select 1 = 0

            {% endif %}

            {# Create Task Second #}
            {% if desiredState == currentState %}

                {{ stage('No task edits.') }}
                select 1 = 0

            {% elif desiredState %}

                    {# Target Table Info #}
                    {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}


                    {% if desiredState.config.devMode == false %}
                        {%- if desiredState.config.schedulePeriodOption == 'Predecessor' -%} 
                            {%- set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + desiredState.config.rootTask + '"' -%} 
                            {{ stage('Suspend Root Task', true, "sql", "alter") }}
                            ALTER TASK {{ fullyQualifiedRootTaskName }} SUSPEND
                        {%- endif -%}

                        {{ stage('Create Task', true, "sql", "alter") }}
                        {# Set Namespace Variables #}
                        {% set nsVariables = namespace(taskWhenRun="") %}
                        {% set nsVariables = namespace(poll="WHEN ") %}

                        {# Task Info #}
                        {% set taskName = desiredState.node.name + '_TASK'  %}
                        {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

                        {# Task Type #}
                        {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
                            {# Can be updated during deployment via a parameter to account for different warehouse names in different deployments #}
                            {% if desiredState.parameters.targetTaskWarehouse == 'DEV ENVIRONMENT' %}
                                {% set taskType = 'WAREHOUSE = ' + desiredState.config.whName %}
                            {% else %}
                                {% set taskType = 'WAREHOUSE = ' + desiredState.parameters.targetTaskWarehouse %}
                            {% endif %}
                        {%- else -%}
                            {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
                        {%- endif -%}

                        {# Schedule Type #}
                        {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
                            {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
                        {% elif desiredState.config.schedulePeriodOption == 'CRON' %}
                            {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON +"'" %}
                        {%- else -%}
                            {%- set nsVariables.taskWhenRun = 'AFTER ' -%}
                            {%- set predecessorTasks = (desiredState.config.predTask).split(",") -%}

                            {%- for p in predecessorTasks -%}
                                {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + targetTableDatabase + '.' + targetTableSchema + '.' + p -%}
                                {%- if not loop.last -%} 
                                    {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + ',' -%}
                                {%- endif %}
                            {% endfor %}    
                        {%- endif -%}

                        {# When Stream has data logic #}
                        {# Source Stream Location and Name #}
                        {% if desiredState.config.flagSrcStream == true %}
                            {% for source in desiredState.sources %}
                                {% for dep in source.dependencies %}
                                    {% if (dep.node.materializationType == 'stream') %}
                                        {% set streamStorageLocation = dep.node.location.name %}
                                        {% set streamSourceDatabase = desiredState.storageLocations | selectattr('name', 'equalto', streamStorageLocation) | map(attribute='database') | first %}
                                        {% set streamSourceSchema = desiredState.storageLocations | selectattr('name', 'equalto', streamStorageLocation) | map(attribute='schema') | first %}
                                        {% set streamSourceName = dep.node.name %}

                                        {%- if nsVariables.poll == 'WHEN ' -%}
                                            {% set nsVariables.poll = nsVariables.poll + 'SYSTEM$STREAM_HAS_DATA(\'"' + streamSourceDatabase + '"."'  + streamSourceSchema + '"."' + streamSourceName + '"\')'  %}
                                        {% else %}
                                            {% set nsVariables.poll = nsVariables.poll + desiredState.config.multiStreamBehavior + ' SYSTEM$STREAM_HAS_DATA(\'"' + streamSourceDatabase + '"."'  + streamSourceSchema + '"."' + streamSourceName + '"\')'  %}
                                        {%- endif -%}
                                    {%- endif -%}
                                {% endfor %}
                            {% endfor %}
                        {% endif -%}

                        {# To mimic truncate behavior #}
                        {% if desiredState.config.truncateBefore == true %}
                            {% set truncateBehavior = 'INSERT OVERWRITE' %}
                        {% else %}
                            {% set truncateBehavior = 'INSERT' %}
                        {% endif -%}

                        CREATE OR REPLACE TASK 
                            {{ fullyQualifiedTaskName }} 
                            {{ taskType}} 
                            {{ nsVariables.taskWhenRun }} 
                            {% if nsVariables.poll != 'WHEN ' %} {{ nsVariables.poll }} {% endif %}
                        AS 
                        {{ truncateBehavior }} INTO {{ fullyQualifiedTargetTableName }}
                            (
                                {% for col in desiredState.columns %}
                                    "{{ col.name }}"
                                    {%- if not loop.last -%},{% endif %}
                                {% endfor %}
                            )
                        
                            {% for source in desiredState.sources %}
                                /* Combine Sources if needed */
                                {% if loop.first %}
                                    SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                                    {% for col in desiredState.columns  %}
                                        "{{ col.name }}" AS "{{ col.name }}"
                                        {% if not loop.last %}, {% endif %}
                                    {% endfor %}
                                    FROM (
                                {% endif %}
                                SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                                {% for col in source.columns if not col.isSurrogateKey %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"{% if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }}                  
                                {% if not loop.last %}
                                    {{ desiredState.config.insertStrategy }}
                                {% endif %}
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            {% if desiredState.config.groupByAll %}GROUP BY ALL{% endif %}
                            {{ sortorder_by_colv() }}

                        {%- if desiredState.config.schedulePeriodOption != 'Predecessor' -%} 
                            {{ stage('Resume Task', true, "sql", "alter") }}
                            ALTER TASK {{ fullyQualifiedTaskName }} RESUME;
                        {%- endif -%}

                    {% else %}
                        {{ stage('Development Mode - No Task.') }}
                        select 1 = 0
                    
                    {%- endif -%}

            {% elif currentState != undefined and desiredState == undefined %}

                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {% if currentState.config.devMode == false %}
                    {# FQ Root Task name #}
                    {% set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + currentState.config.rootTask + '"'%}

                    {# Task Info #}
                    {% set taskName = currentState.node.name + '_TASK'  %}
                    {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

                    {%- if currentState.config.schedulePeriodOption == 'Predecessor' -%} 
                    {{ stage('Suspend Root Task', true, "sql", "drop") }}
                        ALTER TASK IF EXISTS {{ fullyQualifiedRootTaskName }} SUSPEND
                    {{ stage('Drop Current Task', true, "sql", "drop") }}
                        DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                    {%- else -%}
                    {{ stage('Drop Current Task', true, "sql", "drop") }}
                        DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                    {%- endif -%}
                {%- endif -%}

            {%- else -%}

            {{ stage('No task edits.  Unknown state.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: |-
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Work With Task == #}
            {# == Node Type Description    : This node loads data into work table == #}

            {# Development mode -To test the SQL the task will execute to make sure it runs without errors and returns the expected data #}

            {% if config.devMode == true %}

                    {# To mimic truncate behavior #}
                    {% if config.truncateBefore == true %}
                        {% set truncateBehavior = 'INSERT OVERWRITE' %}
                    {% else %}
                        {% set truncateBehavior = 'INSERT' %}
                    {% endif -%}

                {{ stage('Insert Data') }}

                            {{ truncateBehavior }} INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                        {% for source in sources %}
                            /* Combine Sources if needed */
                            {% if loop.first %}
                                SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                                {% for col in columns  %}
                                    "{{ col.name }}" AS "{{ col.name }}"
                                    {% if not loop.last %}, {% endif %}
                                {% endfor %}
                                FROM (
                            {% endif %}
                            SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {{ get_source_transform(col) }} AS "{{ col.name }}"{% if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }}
                            {% if not loop.last %}
                                {{ config.insertStrategy }}
                            {% endif %}
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {% if config.groupByAll %}GROUP BY ALL{% endif %}
                         {{sortorder_by_colv()}}
            {% endif -%}
    name: Work with Task
    version: 1
  StepType-152:
    id: "152"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |+
        capitalized: Stream and Insert or Merge
        short: SIM
        tagColor: black
        plural: Streams and Merges

        deployStrategy: advanced

        config:
        - groupName: General Options
          items:
          - displayName: Development Mode
            attributeName: devMode
            type: toggleButton
            isRequired: true
            default: true

          - type: toggleButton
            attributeName: selectDistinct
            displayName: Distinct
            default: false
            enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"

          - type: toggleButton
            attributeName: groupByAll
            displayName: Group By All
            enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"
            default: false


        - groupName: Stream Options
          items:
          - displayName: Source Object
            attributeName: sourceType
            type: dropdownSelector
            default: Table
            options:
              - Table
              - External Table
              - View
            isRequired: true

          - displayName: Append Only Stream
            attributeName: appendOnly
            type: toggleButton
            default: false
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"

          - displayName: Show Initial Rows
            attributeName: initialRows
            type: toggleButton
            default: true
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"


          - displayName: Redeployment Behavior
            attributeName: redeploymentBehavior
            type: dropdownSelector
            default: Create At Existing Stream
            options:
              - Create or Replace
              - Create If Not Exists
              - Create At Existing Stream
            isRequired: true

        - groupName: Target Loading Options
          items:
          - displayName: Load Type
            attributeName: loadType
            type: dropdownSelector
            default: Insert
            options:
              - Insert
              - Merge
            isRequired: true

          - type: tabular 
            displayName: 'Table Key(s)'
            attributeName: partitionBy
            columns:
          
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: partColName
               isRequired: false
                
            isRequired: false
            enableIf: "{% if config.loadType == 'Merge' %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Record Date / Timestamp'
            attributeName: orderBy
            columns:
          
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: colName
               isRequired: false
            
            -  type: dropdownSelector
               displayName: Sort Order
               attributeName: sortOrd
               default: desc
               options:
               - desc
               - asc
               isRequired: false
            
            isRequired: false
            enableIf: "{% if config.loadType == 'Merge' %} true {% else %} false {% endif %}"
         
          # Cluster Key-Determine if a node is to be clustered or not #
          
          - type: toggleButton
            attributeName: clusterKey
            displayName: Cluster Key
            default: false
            isRequired: true

          - type: toggleButton
            attributeName: clusterKeyExpressions
            displayName: Allow Expressions in Cluster Key
            default: false
            isRequired: true
            enableIf: "{% if config.clusterKey %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfig
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnName
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and not config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfigExpressions
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnNameExpressions
               isRequired: false
          
            -  type: textBox
               displayName: Expression
               attributeName: sqlExpression
               default: "ex. trunc(<column_name>, -5)"
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

        - groupName: Scheduling Options

        # Schedule mode-Specifies whether a warehouse or serverless compute is used to run the task #

          enableIf: "{% if config.devMode == true %} false {% else %} true {% endif %}" 
          items:
          - displayName: Scheduling Mode
            attributeName: schedulingMode
            type: dropdownSelector
            default: Warehouse Task
            options:
              - Warehouse Task
              - Serverless Task
            isRequired: true

        # Checks whether source streams have data before executing a task #

          - displayName: When Source Stream has Data Flag
            attributeName: flagSrcStream
            type: toggleButton
            default: true
            isRequired: true

        # Warehouse name  you want the task to run #

          - displayName: Select Warehouse on which to run task
            attributeName: whName
            type: textBox
            default: '<WAREHOUSE_NAME>'
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Warehouse Task' %} true {% else %} false {% endif %}"

          - displayName: Select initial serverless Warehouse size
            attributeName: serverlessSize
            type: dropdownSelector
            default: 'MEDIUM'
            options:
              - XSMALL
              - SMALL
              - MEDIUM
              - LARGE
              - XLARGE
              - XXLARGE
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Serverless Task' %} true {% else %} false {% endif %}"

        # Way to schedule the task to run #

          - displayName: Task Schedule
            attributeName: schedulePeriodOption
            type: dropdownSelector
            default: Predecessor
            options:
              - Minutes
              - CRON
              - Predecessor
            isRequired: true

          - displayName: Enter task schedule using minutes
            attributeName: schedulePeriod
            type: textBox
            default: '60'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Minutes' %} true {% else %} false {% endif %}"

          - displayName: Enter task schedule using CRON
            attributeName: scheduleCRON
            type: textBox
            default: '5 0-23 * * * America/Los_Angeles'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'CRON' %} true {% else %} false {% endif %}"

          - displayName: Enter predecessor task(s) separated by a comma
            attributeName: predTask
            type: textBox
            default: 'DATA_TRANSFORMATION_ROOT_TASK'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

          - displayName: Enter root task name
            attributeName: rootTask
            type: textBox
            default: 'DATA_TRANSFORMATION_ROOT_TASK'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

        - groupName: Hidden Config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: task
            options:
            - task
            isRequired: false

      templates:
        create:
          templateString: |+
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Stream and Insert or Merge == #}
            {# == Node Type Description    : This node creates and deploys a stream on top of a table, view or external table.Also provides option to create a target table to insert or merge data from source with a task on top of it.
            == #}

            {# Create Stream First #}
            {% if desiredState %}

                {# Source Object Location and Name #}
                {% set sourceStorageLocation = desiredState.sources[0].dependencies[0].node.location.name %}
                {% set sourceDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='database') | first %}
                {% set sourceSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='schema') | first %}
                {% set sourceTableName = desiredState.sources[0].dependencies[0].node.name %}
                {% set fullyQualifiedSourceTableName = '"' + sourceDatabaseName + '"."' + sourceSchemaName + '"."' + sourceTableName + '"' %}
                {% set refLink = "{{ ref('" + sourceStorageLocation + "', '" + sourceTableName + "') }}" %}

                {# Target Stream Location and Name #}
                {% set streamTargetLocationName = desiredState.node.location.name %}
                {% set streamTargetDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = desiredState.node.name + '_STREAM' %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}

                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}
                {% set targetTableName = desiredState.node.name %}

                {# Stream Type #}
                {% if desiredState.config.sourceType == 'Table' %} 
                    {% set streamType = 'TABLE' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% elif desiredState.config.sourceType == 'External Table' %} 
                    {% set streamType = 'EXTERNAL TABLE' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% elif desiredState.config.sourceType == 'Directory Table' %} 
                    {% set streamType = 'STAGE' %}
                    {% set streamSourceObjectName = desiredState.config.stageName %}
                {% else %} 
                    {% set streamType = 'VIEW' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% endif %}

                {# Stream Append Behavior #}
                {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                    {% if desiredState.config.appendOnly == true %} 
                        {% set streamAppendMode = 'APPEND_ONLY = TRUE' %}
                    {% else %} 
                        {% set streamAppendMode = 'APPEND_ONLY = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamAppendMode = '' %}
                {% endif %}

                {# Stream Initial Row Behavior #}
                {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                    {% if desiredState.config.initialRows == true %} 
                        {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = TRUE' %}
                    {% else %} 
                        {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamInitialRowsMode = '' %}
                {% endif %}

                {# Stream Insert Only Behavior #}
                {% if streamType == 'EXTERNAL TABLE' %} 
                    {% if desiredState.config.insertOnly == true %} 
                        {% set streamInsertOnlyMode = 'INSERT_ONLY = TRUE' %}
                    {% else %} 
                        {% set streamInsertOnlyMode = 'INSERT_ONLY = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamInsertOnlyMode = '' %}
                {% endif %}
            {% endif %}

            {# Create Stream first #}
            {% if desiredState or desiredState == currentState %}

                {% if currentState == undefined or desiredState.config.redeploymentBehavior == 'Create or Replace' %}
                    {{ stage('Create Stream', true, "sql", "alter") }}
                    CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
                        ON {{ streamType }} {{ refLink }}
                        {{ streamAppendMode }}
                        {{ streamInitialRowsMode }}
                        {{ streamInsertOnlyMode }}

                {% elif currentState != undefined and desiredState.config.redeploymentBehavior == 'Create If Not Exists'%}
                    {{ stage('Create Stream If Not Exists', true, "sql", "alter") }}
                    CREATE STREAM IF NOT EXISTS {{ fullyQualifiedStreamName }}
                        ON {{ streamType }} {{ refLink }}
                        {{ streamAppendMode }}
                        {{ streamInitialRowsMode }}
                        {{ streamInsertOnlyMode }}

                {% elif currentState != undefined and desiredState.config.redeploymentBehavior == 'Create At Existing Stream'%}
                    {{ stage('Re-Create Stream at existing offset', true, "sql", "alter") }}
                    CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
                        ON {{ streamType }} {{ refLink }}
                        AT(STREAM => '{{ fullyQualifiedStreamName }}');

                {% else %}
                    {{ stage('Unknown state.', true, "sql", "alter") }}
                    select 1 = 0
                {% endif %}


            {% elif desiredState == undefined %}

                {# Source Stream Location and Name #}
                {% set streamTargetLocationName = currentState.node.location.name %}
                {% set streamTargetDatabaseName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = currentState.node.name + '_STREAM' %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}

                {{ stage('Drop Stream', true, "sql", "drop") }}
                DROP STREAM IF EXISTS {{ fullyQualifiedStreamName }}

            {%- else -%}

                {{ stage('Unknown state.  Nothing to do.') }}
                select 1 = 0

            {% endif %}

            {# Create / Alter Table Second #}
            {% if desiredState == currentState %}

                {{ stage('No table edits.') }}
                select 1 = 0

            {% elif desiredState %}

                {% if currentState == undefined %}
                    {# Figure out cluster key #}
                    {% set nsVariables = namespace(finalClusterKey="") %}
                    {% if desiredState.config.clusterKey == true %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% else %}

                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% endif %}
                    {% endif %}

                    {{ stage('Create Stage Table', true, "sql", "create") }}
                    CREATE OR REPLACE TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                    (
                        {% for col in desiredState.columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

                    {% if desiredState.config.clusterKey == true %}
                        {{ stage('Apply Table Clustering', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

                        {{ stage('Resume Recluster Table', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER
                    {% endif %}

                {% elif currentState != undefined %}

                    {# Change Node Name or Change Storage Location #}
                    {# Storage Location Tests #}
                    {# Only need to account for updated Storage Location mappings   #}
                    {# Current Namespace Varialbes #}
                    {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                    {# Current State Storage Location Info #}
                    {% for source in currentState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                    {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                    {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                    {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                    {# Desired Namespace Variables #}
                    {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                    {% set nsVariables = namespace(storageLocationTest="") %}

                    {# Desired State Storage Location Info #}
                    {% for source in desiredState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                    {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                    {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                    {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                    {# Test  #}
                    {% set nsVariables.storageLocationTest = true %}
                    {% set nodeCommentTest = currentState.node.description == desiredState.node.description %}

                    {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                        {# Current mappings #}
                        {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                        
                        {# Desired mappings #}
                        {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                        {% if currentDatabaseSchema != desiredDatabaseSchema %}
                            {% set nsVariables.storageLocationTest = false %}
                        {% endif %}
                    {% endfor %}

                    {# Clustering Test #}
                    {% set clusterKeyTest = currentState.config.clusterKey == desiredState.config.clusterKey %}
                    {% set clusterKeyExpressionsTest = currentState.config.clusterKeyExpressions == desiredState.config.clusterKeyExpressions %}
                    {% set clusterKeyConfigTest = currentState.config.clusterKeyConfig == desiredState.config.clusterKeyConfig %}
                    {% set clusterKeyConfigExpressionsTest = currentState.config.clusterKeyConfigExpressions == desiredState.config.clusterKeyConfigExpressions %}

                    {% if 
                        clusterKeyTest == false or
                        clusterKeyExpressionsTest == false or
                        clusterKeyConfigTest == false or
                        clusterKeyConfigExpressionsTest == false %}

                        {% set clusterTest = false %}
                    {% else %}
                        {% set clusterTest = true %}
                    {% endif %}

                    {# Rename / Move Object #}
                    {% if (nsVariables.storageLocationTest == false or currentState.node.name != desiredState.node.name) %}
                        {{ stage('Rename and / or Move Table', true, "sql", "alter") }}
                        ALTER TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                        RENAME TO   {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                    {% endif %}

                    {# Change table description #}
                    {% if (nsVariables.nodeCommentTest == false or currentState.node.description != desiredState.node.description) %}
                        {{ stage('Change table description', true, "sql", "alter") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        SET COMMENT = '{{ desiredState.node.description | escape }}'
                    {% endif %}

                    {# Drop Columns #}
                    {% set nsVariables = namespace(colchanges=0) %}
                    {% for dropCurCol in currentState.columns %}
                        {% if dropCurCol.id not in desiredState.columns | map(attribute="id") %}
                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                            {% if nsVariables.colchanges == 1 %}
                                {{ stage('Drop Columns', true, "sql", "alter") }}
                                ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                DROP COLUMN 
                            {% else %}
                                , 
                            {% endif %}
                            "{{ dropCurCol.name }}"
                        {% endif %}
                    {% endfor %}

                    {# Add Columns #}
                    {% set nsVariables = namespace(colchanges=0) %}
                    {% for addDesCol in desiredState.columns %}
                        {% if addDesCol.id not in currentState.columns | map(attribute="id") %}
                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                            {% if nsVariables.colchanges == 1 %}
                                {{ stage('Add Columns', true, "sql", "alter") }}
                                ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                ADD COLUMN
                            {% else %}
                                ,
                            {% endif %}
                                "{{ addDesCol.name }}" {{ addDesCol.dataType }}
                                {%- if not addDesCol.nullable %} NOT NULL
                                    {%- if addDesCol.defaultValue | length > 0 %} DEFAULT {{ addDesCol.defaultValue }}{% endif %}
                                {% endif %}
                                {%- if addDesCol.description | length > 0 %} COMMENT '{{ addDescol.description | escape }}'{% endif %}
                        {% endif %}
                    {% endfor %}

                    {# Rename Columns #}
                    {% for renameCurCol in currentState.columns %}
                        {% if renameCurCol.id in desiredState.columns | map(attribute="id") %}
                            {% set desiredColumnName = desiredState.columns | selectattr('id', 'equalto', renameCurCol.id) | map(attribute='name') | first %}
                            {% if renameCurCol.name != desiredColumnName %}
                                {{ stage('Rename Column ' + renameCurCol.name, true, "sql", "alter") }}
                                ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                RENAME COLUMN "{{ renameCurCol.name }}"
                                TO "{{ desiredColumnName }}"
                            {% endif %}
                        {% endif %}
                    {% endfor %}

                    {# Change data types or other column level chnages #}
                    
                    {% set nsVariables.colchanges = 0 %}
                    {% for alterCurCol in currentState.columns %}        
                        {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
                            {% set currentDatatype = alterCurCol.dataType %}
                            {% set currentNullable = alterCurCol.nullable %}
                            {% set currentDefaultValue = alterCurCol.defaultValue %}
                            {% set currentDescription = alterCurCol.description %}

                            {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                            {% set desiredDatatype = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                            {% set desiredNullable = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                            {% set desiredDefaultValue = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                            {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}

                            {% set datatypeTest = currentDatatype == desiredDatatype %}
                            {% set nullableTest = currentNullable == desiredNullable %}
                            {% set defaultValueTest = currentDefaultValue == desiredDefaultValue %}
                            {% set descriptionTest = currentDescription == desiredDescription %}

                            {% if (datatypeTest == false or 
                                    nullableTest == false  or
                                    defaultValueTest == false or
                                    descriptionTest == false) %}
                                {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                {% if nsVariables.colchanges == 1 %}
                                    {{ stage('Change Column Attributes', true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    MODIFY
                                {% endif %}
                                {% if datatypeTest == false %}
                                    {% if nsVariables.colchanges > 1 %},{% endif %}
                                    COLUMN "{{ desiredColumnName }}"
                                    SET DATA TYPE {{ desiredDatatype }}
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                {% endif %}
                                {% if nullableTest == false %}
                                    {% if nsVariables.colchanges > 1 %},{% endif %}
                                    COLUMN "{{ desiredColumnName }}"
                                    {% if currentNullable == true %}
                                        SET
                                    {% else %}
                                        DROP
                                    {% endif %}
                                    NOT NULL
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                {% endif %}
                                {% if descriptionTest == false %}
                                    {% if nsVariables.colchanges > 1 %},{% endif %}
                                    COLUMN "{{ desiredColumnName }}"
                                    COMMENT '{{ desiredDescription }}'
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                {% endif %}
                                {% if defaultValueTest == false %}
                                    {% if nsVariables.colchanges > 1 %},{% endif %}
                                    COLUMN "{{ desiredColumnName }}"
                                    {% if desiredDefaultValue == '' %}
                                        DROP DEFAULT
                                    {% else %}
                                        SET DEFAULT {{ desiredDefaultValue }}
                                    {% endif %}
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                {% endif %}
                                
                            {% else %}
                                                    
                            {% endif %}
                        {% endif %}
                    {% endfor %}

                    {# Figure out cluster key #}
                    {% set nsVariables = namespace(finalClusterKey="") %}
                    {% if clusterTest == false %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% elif desiredState.config.clusterKey == true %}

                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
                        
                        {% else %}

                            {% set nsVariables.finalClusterKey = 'DROP CLUSTERING KEY' %}

                        {% endif %}

                        {{ stage('Recluster TABLE', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        {{ nsVariables.finalClusterKey }}

                    {% endif %}
                {% endif %}


            {% elif currentState != undefined and desiredState == undefined %}

                {# Table or View Name #}
                {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {{ stage('Drop Table', true, "sql", "drop") }}
                DROP TABLE IF EXISTS {{ fullyQualifiedTargetObjectName }}

            {%- else -%}

            {{ stage('No table edits.  Unknown state.') }}
            select 1 = 0

            {% endif %}

            {# Create Task Third #}
            {% if desiredState == currentState %}

                {{ stage('No task edits.') }}
                select 1 = 0

            {% elif desiredState %}

                    {% if desiredState.config.devMode == false %}
                        {%- if desiredState.config.schedulePeriodOption == 'Predecessor' -%} 
                            {%- set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + desiredState.config.rootTask + '"' -%} 
                            {{ stage('Suspend Root Task', true, "sql", "alter") }}
                            ALTER TASK {{ fullyQualifiedRootTaskName }} SUSPEND
                        {%- endif -%}

                        {# Set Namespace Variables #}
                        {% set nsVariables = namespace(taskWhenRun="") %}
                        {% set nsVariables = namespace(poll="WHEN ") %}

                        {# Task Info #}
                        {% set taskName = desiredState.node.name + '_TASK'  %}
                        {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

                        {# Task Type #}
                        {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
                            {# Can be updated during deployment via a parameter to account for different warehouse names in different deployments #}
                            {% if desiredState.parameters.targetTaskWarehouse == 'DEV ENVIRONMENT' %}
                                {% set taskType = 'WAREHOUSE = ' + desiredState.config.whName %}
                            {% else %}
                                {% set taskType = 'WAREHOUSE = ' + desiredState.parameters.targetTaskWarehouse %}
                            {% endif %}
                        {%- else -%}
                            {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
                        {%- endif -%}

                        {# Schedule Type #}
                        {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
                            {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
                        {% elif desiredState.config.schedulePeriodOption == 'CRON' %}
                            {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON + "'" %}
                        {%- else -%}
                            {%- set nsVariables.taskWhenRun = 'AFTER ' -%}
                            {%- set predecessorTasks = (desiredState.config.predTask).split(",") -%}

                            {%- for p in predecessorTasks -%}
                                {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + targetTableDatabase + '.' + targetTableSchema + '.' + p -%}
                                {%- if not loop.last -%} 
                                    {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + ',' -%}
                                {%- endif %}
                            {% endfor %}    
                        {%- endif -%}

                        {# When Stream has data logic #}
                        {# Source Stream Location and Name #}
                        {% if desiredState.config.flagSrcStream == true %}
                            {%- if nsVariables.poll == 'WHEN ' -%}
                                {% set nsVariables.poll = nsVariables.poll + 'SYSTEM$STREAM_HAS_DATA (\'' + fullyQualifiedStreamName + '\')'  %}
                            {%- endif -%}
                        {% endif -%}

                        {% set tableColumnIds = desiredState.columns | map(attribute='id') | list %}
                        {% set tableColumnNames = desiredState.columns | map(attribute='name') | list %}

                        {# Merge partition by and order by #}
                        {%- if desiredState.config.loadType == 'Merge' -%} 
                            {% set tableColumnNamesUpdate = tableColumnNames | reject('in', desiredState.config.partitionBy.get('items') | map(attribute='partColName.name')) | list %}
                            
                            {% for i in desiredState.config.partitionBy.get('items') %}
                                {%- if loop.first -%}
                                    {% set nsVariables.partition = '"' + i.partColName.name + '"' %}
                                {% else %}
                                    {% set nsVariables.partition = nsVariables.partition + ', "' + i.partColName.name + '"' %}
                                {%- endif -%}

                                {% set tableColumnNamesUpdate = tableColumnNames | reject('in', i.partColName.name) | list %}

                            {% endfor %}

                            {% for i in desiredState.config.orderBy.get('items') %}
                                {%- if loop.first -%}
                                    {% set nsVariables.orderBy = '"' + i.colName.name + '" ' + i.sortOrd %}
                                {% else %}
                                    {% set nsVariables.orderBy = nsVariables.orderBy + ', "' + i.colName.name + '" ' + i.sortOrd %}
                                {%- endif -%}
                            {% endfor %}
                            {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}

                            {%- set nsVariables.tableKey = desiredState.config.partitionBy.get('items') %}
                            {% set nsVariables.tableKey = nsVariables.tableKey | map(attribute='partColName.name') | list %}
                        {%- endif -%}

                        {{ stage('Create Task', true, "sql", "alter") }}
                        CREATE OR REPLACE TASK 
                            {{ fullyQualifiedTaskName }} 
                            {{ taskType}} 
                            {{ nsVariables.taskWhenRun }} 
                            {% if nsVariables.poll != 'WHEN ' %} {{ nsVariables.poll }} {% endif %}
                        AS 
                    {% if desiredState.config.loadType == 'Insert' -%} 
                        INSERT INTO {{ fullyQualifiedTargetTableName }}
                        SELECT  {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                                 {% for id in tableColumnIds %}
                                {% set col = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='name') | first -%}
                                {% set columnTransformation = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='transform') | first -%}
                                {%- if columnTransformation == "" -%}
                                "{{ col }}" as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                                {%- else -%}
                                {{ columnTransformation | replace(sourceTableName, streamName) }} as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                                {%- endif %}
                            {%- endfor %}               
                        FROM {{ fullyQualifiedStreamName }}
                        {% if desiredState.config.groupByAll %}GROUP BY ALL{% endif %}
                        {% else -%}
                        MERGE INTO {{ fullyQualifiedTargetTableName }} tgt USING
                        -- Select Statement Preparing Data for Merge
                        (SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                                {% for id in tableColumnIds %}
                                {% set col = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='name') | first -%}
                                {% set columnTransformation = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='transform') | first -%}
                                {%- if columnTransformation == "" -%}
                                "{{ col }}" as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                                {%- else -%}
                                {{ columnTransformation | replace(sourceTableName, streamName) }} as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                                {%- endif %}
                            {%- endfor %}
                        FROM {{ fullyQualifiedStreamName }}
                        {% if desiredState.config.groupByAll %}GROUP BY ALL{% endif %}
                        QUALIFY {{ nsVariables.rowNumber }} = 1) src
                        
                        -- Join Condition
                        ON {% for col in nsVariables.tableKey -%}
                            src."{{ col }}" = tgt."{{ col }}"
                        {% if not loop.last %} AND {% endif %}
                            {%- endfor -%}
                        
                        -- What to do if data is matched based on table key
                        WHEN MATCHED THEN UPDATE SET 
                            {%- for col in tableColumnNamesUpdate %}
                                    tgt."{{ col }}" = src."{{ col }}"
                                    {%- if not loop.last -%}, {%- endif %}
                            {%- endfor %}
                        -- What to do with new records based on table key
                        WHEN NOT MATCHED THEN INSERT 
                            (
                            {%- for col in desiredState.columns -%}
                                    "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                            {% endfor %}) 
                        VALUES (
                            {%- for col in desiredState.columns -%}
                                    src."{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                            {% endfor %})
                        {%- endif -%}

                        {%- if desiredState.config.schedulePeriodOption != 'Predecessor' -%} 
                            {{ stage('Resume Task', true, "sql", "alter") }}
                            ALTER TASK {{ fullyQualifiedTaskName }} RESUME;
                        {%- endif -%}

                    {% else %}
                        {{ stage('Development Mode - No Task.') }}
                        select 1 = 0
                        
                    {%- endif -%}

            {% elif currentState != undefined and desiredState == undefined %}

                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {% if currentState.config.devMode == false %}
                    {# FQ Root Task name #}
                    {% set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + currentState.config.rootTask + '"'%}

                    {# Task Info #}
                    {% set taskName = currentState.node.name + '_TASK'  %}
                    {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

                    {%- if currentState.config.schedulePeriodOption == 'Predecessor' -%} 
                    {{ stage('Suspend Root Task', true, "sql", "drop") }}
                        ALTER TASK IF EXISTS {{ fullyQualifiedRootTaskName }} SUSPEND
                    {{ stage('Drop Current Task', true, "sql", "drop") }}
                        DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                    {%- else -%}
                    {{ stage('Drop Current Task', true, "sql", "drop") }}
                        DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                    {%- endif -%}
                {%- endif -%}

            {%- else -%}

                {{ stage('Nothing to do.') }}
                select 1 = 0

            {% endif %}

        run:
          templateString: |-
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Stream and Insert or Merge == #}
            {# == Node Type Description    : This node inserts/merge data into target table == #}

            {# Development mode -To test the SQL the task will execute to make sure it runs without errors and returns the expected data #}

            {% if config.devMode == true %}

                {% set nsVariables = namespace() %}

                {# Target Stream Location and Name #}
                {% set streamTargetLocationName = node.location.name %}
                {% set streamTargetDatabaseName = storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = node.name + '_STREAM' %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}

                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(node.location.name, node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(node.location.name, node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(node.location.name, node.name) %}
                {% set targetTableName = node.name %}

                {% set tableColumnIds = columns | map(attribute='id') | list %}
                {% set tableColumnNames = columns | map(attribute='name') | list %}

                {# Merge partition by and order by #}
                {%- if config.loadType == 'Merge' -%} 
                    {% set tableColumnNamesUpdate = tableColumnNames | reject('in', config.partitionBy.get('items') | map(attribute='partColName.name')) | list %}
                    
                    {% for i in config.partitionBy.get('items') %}
                        {%- if loop.first -%}
                            {% set nsVariables.partition = '"' + i.partColName.name + '"' %}
                        {% else %}
                            {% set nsVariables.partition = nsVariables.partition + ', "' + i.partColName.name + '"' %}
                        {%- endif -%}

                        {% set tableColumnNamesUpdate = tableColumnNames | reject('in', i.partColName.name) | list %}

                    {% endfor %}

                    {% for i in config.orderBy.get('items') %}
                        {%- if loop.first -%}
                            {% set nsVariables.orderBy = '"' + i.colName.name + '" ' + i.sortOrd %}
                        {% else %}
                            {% set nsVariables.orderBy = nsVariables.orderBy + ', "' + i.colName.name + '" ' + i.sortOrd %}
                        {%- endif -%}
                    {% endfor %}
                    {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}

                    {%- set nsVariables.tableKey = config.partitionBy.get('items') %}
                    {% set nsVariables.tableKey = nsVariables.tableKey | map(attribute='partColName.name') | list %}
                {%- endif -%}

                {# Merge partition by and order by #}
                {%- if config.loadType == 'Merge' -%} 
                    {% set tableColumnNamesUpdate = tableColumnNames | reject('in', config.partitionBy.get('items') | map(attribute='partColName.name')) | list %}
                    
                    {% for i in config.partitionBy.get('items') %}
                        {%- if loop.first -%}
                            {% set nsVariables.partition = '"' + i.partColName.name + '"' %}
                        {% else %}
                            {% set nsVariables.partition = nsVariables.partition + ', "' + i.partColName.name + '"' %}
                        {%- endif -%}

                        {% set tableColumnNamesUpdate = tableColumnNames | reject('in', i.partColName.name) | list %}

                    {% endfor %}

                    {% for i in config.orderBy.get('items') %}
                        {%- if loop.first -%}
                            {% set nsVariables.orderBy = '"' + i.colName.name + '" ' + i.sortOrd %}
                        {% else %}
                            {% set nsVariables.orderBy = nsVariables.orderBy + ', "' + i.colName.name + '" ' + i.sortOrd %}
                        {%- endif -%}
                    {% endfor %}
                    {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}

                    {%- set nsVariables.tableKey = config.partitionBy.get('items') %}
                    {% set nsVariables.tableKey = nsVariables.tableKey | map(attribute='partColName.name') | list %}
                {%- endif -%}

                {{ stage('Insert or Merge Data') }}

                    {% if config.loadType == 'Insert' -%} 
                        INSERT INTO {{ fullyQualifiedTargetTableName }}
                        SELECT  {% if config.selectDistinct %} DISTINCT {% endif %}
                                {% for id in tableColumnIds %}
                                {% set col = sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='name') | first -%}
                                {% set columnTransformation = sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='transform') | first -%}
                                {%- if columnTransformation == "" -%}
                                "{{ col }}" as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                                {%- else -%}
                                {{ columnTransformation | replace(sourceTableName, streamName) }} as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                                {%- endif %}
                            {%- endfor %}
                        FROM {{ fullyQualifiedStreamName }}
                        {% if config.groupByAll %}GROUP BY ALL{% endif %}
                        {% else -%}
                        MERGE INTO {{ fullyQualifiedTargetTableName }} tgt USING
                        -- Select Statement Preparing Data for Merge
                        (SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                                {% for id in tableColumnIds %}
                                {% set col = sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='name') | first -%}
                                {% set columnTransformation = sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='transform') | first -%}
                                {%- if columnTransformation == "" -%}
                                "{{ col }}" as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                                {%- else -%}
                                {{ columnTransformation | replace(sourceTableName, streamName) }} as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                                {%- endif %}
                            {%- endfor %}
                        FROM {{ fullyQualifiedStreamName }}
                        {% if config.groupByAll %}GROUP BY ALL{% endif %}
                        QUALIFY {{ nsVariables.rowNumber }} = 1) src
                         
                        -- Join Condition
                        ON {% for col in nsVariables.tableKey -%}
                            src."{{ col }}" = tgt."{{ col }}"
                        {% if not loop.last %} AND {% endif %}
                            {%- endfor -%}
                       
                        -- What to do if data is matched based on table key
                        WHEN MATCHED THEN UPDATE SET 
                            {%- for col in tableColumnNamesUpdate %}
                                    tgt."{{ col }}" = src."{{ col }}"
                                    {%- if not loop.last -%}, {%- endif %}
                            {%- endfor %}
                        -- What to do with new records based on table key
                        WHEN NOT MATCHED THEN INSERT 
                            (
                            {%- for col in columns -%}
                                    "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                            {% endfor %}) 
                        VALUES (
                            {%- for col in columns -%}
                                    src."{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                            {% endfor %})
                        {%- endif -%}

            {% endif -%}
    name: Stream and Insert or Merge
    version: 1
  StepType-153:
    id: "153"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Stream
        short: STREAM
        tagColor: "#808B96"
        plural: Streams

        deployStrategy: advanced

        config:
        - groupName: Stream Options
          items:
          - displayName: Source Object
            attributeName: sourceType
            type: dropdownSelector
            default: Table
            options:
              - Table
              - External Table
              - View
            isRequired: true

          - displayName: Append Only Stream
            attributeName: appendOnly
            type: toggleButton
            default: false
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"

          - displayName: Show Initial Rows
            attributeName: initialRows
            type: toggleButton
            default: true
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"

          - displayName: Redeployment Behavior
            attributeName: redeploymentBehavior
            type: dropdownSelector
            default: Create At Existing Stream
            options:
              - Create or Replace
              - Create If Not Exists
              - Create At Existing Stream
            isRequired: true

        - groupName: Hidden Config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: stream
            options:
            - stream
            isRequired: false

        systemColumns:
        - displayName: METADATA$ACTION
          transform: ''
          dataType: STRING
          placement: end
          attributeName: metadataAction

        - displayName: METADATA$ISUPDATE
          transform: ''
          dataType: boolean
          placement: end
          attributeName: metadataIsUpdate

        - displayName: METADATA$ROW_ID
          transform: ''
          dataType: STRING
          placement: end
          attributeName: metadataRowID
      templates:
        create:
          templateString: |+
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Stream == #}
            {# == Node Type Description    : This node creates and deploys a stream on top of a table, view or external table.
            == #}

            {% if desiredState %}

                {# Source Object Location and Name #}
                {% set sourceStorageLocation = desiredState.sources[0].dependencies[0].node.location.name %}
                {% set sourceDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='database') | first %}
                {% set sourceSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='schema') | first %}
                {% set sourceTableName = desiredState.sources[0].dependencies[0].node.name %}
                {% set fullyQualifiedSourceTableName = '"' + sourceDatabaseName + '"."' + sourceSchemaName + '"."' + sourceTableName + '"' %}
                {% set refLink = "{{ ref('" + sourceStorageLocation + "', '" + sourceTableName + "') }}" %}

                {# Target Stream Location and Name #}
                {% set streamTargetLocationName = desiredState.node.location.name %}
                {% set streamTargetDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = desiredState.node.name %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}

                {# Stream Type #}
                {% if desiredState.config.sourceType == 'Table' %} 
                    {% set streamType = 'TABLE' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% elif desiredState.config.sourceType == 'External Table' %} 
                    {% set streamType = 'EXTERNAL TABLE' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% elif desiredState.config.sourceType == 'Directory Table' %} 
                    {% set streamType = 'STAGE' %}
                    {% set streamSourceObjectName = desiredState.config.stageName %}
                {% else %} 
                    {% set streamType = 'VIEW' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% endif %}

                {# Stream Append Behavior #}
                {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                    {% if desiredState.config.appendOnly == true %} 
                        {% set streamAppendMode = 'APPEND_ONLY = TRUE' %}
                    {% else %} 
                        {% set streamAppendMode = 'APPEND_ONLY = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamAppendMode = '' %}
                {% endif %}

                {# Stream Initial Row Behavior #}
                {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                    {% if desiredState.config.initialRows == true %} 
                        {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = TRUE' %}
                    {% else %} 
                        {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamInitialRowsMode = '' %}
                {% endif %}

                {# Stream Insert Only Behavior #}
                {% if streamType == 'EXTERNAL TABLE' %}      
                        {% set streamInsertOnlyMode = 'INSERT_ONLY = TRUE' %}
                {% else %}
                    {% set streamInsertOnlyMode = '' %}
                {% endif %}
            {% endif %}

            {# Create Stream first #}
            {% if desiredState or desiredState == currentState %}

                {% if currentState == undefined or desiredState.config.redeploymentBehavior == 'Create or Replace' %}
                    {{ stage('Create Stream', true, "sql", "alter") }}
                    CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
                        ON {{ streamType }} {{ refLink }}
                        {{ streamAppendMode }}
                        {{ streamInitialRowsMode }}
                        {{ streamInsertOnlyMode }}

                {% elif currentState != undefined and desiredState.config.redeploymentBehavior == 'Create If Not Exists'%}
                    {{ stage('Re-Create Stream at existing offset', true, "sql", "alter") }}
                    CREATE STREAM IF NOT EXISTS {{ fullyQualifiedStreamName }}
                        ON {{ streamType }} {{ refLink }}
                        {{ streamAppendMode }}
                        {{ streamInitialRowsMode }}
                        {{ streamInsertOnlyMode }}

                {% elif currentState != undefined and desiredState.config.redeploymentBehavior == 'Create At Existing Stream'%}
                    {{ stage('Re-Create Stream at existing offset', true, "sql", "alter") }}
                    CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
                        ON {{ streamType }} {{ refLink }}
                        AT(STREAM => '{{ fullyQualifiedStreamName }}');

                {% else %}
                    {{ stage('Unknown state.', true, "sql", "alter") }}
                    select 1 = 0
                {% endif %}


            {% elif desiredState == undefined %}

                {# Source Stream Location and Name #}
                {% set streamTargetLocationName = currentState.node.location.name %}
                {% set streamTargetDatabaseName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = currentState.node.name %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}

                {{ stage('Drop Stream', true, "sql", "drop") }}
                DROP STREAM IF EXISTS {{ fullyQualifiedStreamName }}

            {%- else -%}

                {{ stage('Unknown state.  Nothing to do.') }}
                select 1 = 0

            {% endif %}

        run:
          templateString: ""
    name: Stream
    version: 1
  StepType-178:
    id: "178"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Materialized View Stage
        short: MV
        tagColor: "#BB8FCE"
        isDisabled: true
        plural: Materialized Views

        deployStrategy: advanced

        config:
          - groupName: Materialized View Options
            items: 
            - type: toggleButton
              attributeName: clusterKey
              displayName: Cluster Key
              default: false
              isRequired: true

            - type: toggleButton
              attributeName: clusterKeyExpressions
              displayName: Allow Expressions in Cluster Key
              default: false
              isRequired: true
              enableIf: "{% if config.clusterKey %} true {% else %} false {% endif %}"

        # Cluster Key-determine if a node is to be clustered or not #

            - type: tabular
              displayName: 'Cluster Key'
              attributeName: clusterKeyConfig
              columns:
          
              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: columnName
                 isRequired: false
            
              isRequired: false
              enableIf: "{% if (config.clusterKey and not config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

            - type: tabular
              displayName: 'Cluster Key'
              attributeName: clusterKeyConfigExpressions
              columns:
          
              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: columnNameExpressions
                 isRequired: false
            
              -  type: textBox
                 displayName: Expression
                 attributeName: sqlExpression
                 default: "ex. trunc(<column_name>, -5)"
                 isRequired: false
            
              isRequired: false
              enableIf: "{% if (config.clusterKey and config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

        # Option to create a secured materialized view #

            - type: toggleButton
              attributeName: secureOption
              displayName: Secure
              default: false
              isRequired: true

          - groupName: General Options
            items: 
            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct
              default: false


          - groupName: Hidden Config
            enableIf: "false"
            items:
            - displayName: Type
              type: materializationSelector
              default: Materialized View
              options:
              - Materialized View
              isRequired: false
      templates:
        create:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Materialized View Stage == #}
            {# == Node Type Description    : This node creates a materialized view == #}


            {% if desiredState == currentState %}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% elif desiredState %}
                {# Identify all config changes that would cause a CREATE instead of ALTER #}
                {% if currentState != undefined %} 
                    {# General metadata #}
                    {% set columnsTest = currentState.columns == desiredState.columns %}
                    {% set joinTest = currentState.join == desiredState.join %}

                    {# Test to see if the transform in a column has changed #}
                    {# Desired Namespace Variables Transform #}
                    {% set desiredTransformArray = desiredState.sources | map(attribute='columns') | first | map(attribute='transform') | list -%}

                    {# Test to see if the transform in a column has changed #}
                    {# Current Namespace Variables Transform #}
                    {% set currentTransformArray = currentState.sources | map(attribute='columns') | first | map(attribute='transform') | list -%}

                    {% set columnsTransformTest = currentTransformArray == desiredTransformArray %}

                    {# Storage Location Tests #}
                    {# Only need to account for updated Storage Location mappings   #}
                    {# sourceTest handles changed Storage Location Names #}
                    {# Current Namespace Varialbes #}
                    {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                    {# Current State Storage Location Info #}
                    {% for source in currentState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                    {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                    {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                    {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                    {# Desired Namespace Variables #}
                    {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                    {% set nsVariables = namespace(storageLocationTest="") %}

                    {# Desired State Storage Location Info #}
                    {% for source in desiredState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                    {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                    {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                    {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                    {# Test  #}
                    {% set nsVariables.storageLocationTest = true %}
                    {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                        {# Current mappings #}
                        {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                        
                        {# Desired mappings #}
                        {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                        {% if currentDatabaseSchema != desiredDatabaseSchema %}
                            {% set nsVariables.storageLocationTest = false %}
                        {% endif %}
                    {% endfor %}

                    {# Config #}
                    {% set selectDistinctTest = currentState.config.selectDistinct == desiredState.config.selectDistinct %}

                    {# Node #}
                    {% set nodeMaterializationType = currentState.node.materializationType == desiredState.node.materializationType %}

                    {# If any of the above are false then a CREATE must be run #}
                    {% if 
                        columnsTest == false or
                        joinTest == false or
                        columnsTransformTest == false or
                        nsVariables.storageLocationTest == false or 
                        selectDistinctTest == false or 
                        nodeMaterializationType == false %}    

                        {% set createTest = true %}
                    {% else %}
                        {% set createTest = false %}
                    {% endif %}
                {% endif %}
                
                {# Identify config changes that would only result in ALTER #}
                {% if createTest == false %}
                    {% set nodeNameTest = currentState.node.name == desiredState.node.name %}

                    {% set secureOptionTest = currentState.config.secureOption == desiredState.config.secureOption %}

                    {% set nodeCommentTest = currentState.node.description == desiredState.node.description %}

                    {# Clustering Test #}
                    {% set clusterKeyTest = currentState.config.clusterKey == desiredState.config.clusterKey %}
                    {% set clusterKeyExpressionsTest = currentState.config.clusterKeyExpressions == desiredState.config.clusterKeyExpressions %}
                    {% set clusterKeyConfigTest = currentState.config.clusterKeyConfig == desiredState.config.clusterKeyConfig %}
                    {% set clusterKeyConfigExpressionsTest = currentState.config.clusterKeyConfigExpressions == desiredState.config.clusterKeyConfigExpressions %}

                    {% if 
                        clusterKeyTest == false or
                        clusterKeyExpressionsTest == false or
                        clusterKeyConfigTest == false or
                        clusterKeyConfigExpressionsTest == false %}

                        {% set clusterTest = false %}
                    {% else %}
                        {% set clusterTest = true %}
                    {% endif %}

                    {% if 
                        nodeNameTest == false or
                        clusterTest == false or
                        secureOptionTest == false or
                        nodeCommentTest == false %}    

                        {% set alterOnlyTest = true %}
                    {% else %}
                        {% set alterOnlyTest = false %}
                    {% endif %}
                {% endif %}


                {# CREATE or ALTER #}
                {% if (currentState == undefined) or (createTest == true) %}

                    {# Materialized View Name #}
                    {% set targetMaterializedViewDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set targetMaterializedViewSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set fullyQualifiedTargetMaterializedViewName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                    {# Figure out cluster key #}
                    {% set nsVariables = namespace(finalClusterKey="") %}
                    {% if desiredState.config.clusterKey == true %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% else %}

                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% endif %}
                    {% endif %}

                    {{ stage('Create Materialized View', true, "sql", "create") }}
                    CREATE OR REPLACE {% if desiredState.config.secureOption %} SECURE {% endif %} MATERIALIZED VIEW {{ fullyQualifiedTargetMaterializedViewName }}
                    (
                        {% for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}
                    AS
                    {% for source in desiredState.sources %}
                        SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}

                        {{ source.join }}

                    {% endfor %}

                    {% if desiredState.config.clusterKey == true %}
                        {{ stage('Apply Materialized View Clustering', true, "sql", "create") }}
                        ALTER MATERIALIZED VIEW {{ fullyQualifiedTargetMaterializedViewName }} {{ nsVariables.finalClusterKey }}

                        {{ stage('Resume Recluster Materialized View', true, "sql", "create") }}
                        ALTER MATERIALIZED VIEW {{ fullyQualifiedTargetMaterializedViewName }} RESUME RECLUSTER
                    {% endif %}

                {% elif (currentState != undefined) and (alterOnlyTest == true) %}

                    {# Desired Materialized View Name #}
                    {% set desiredTargetMaterializedViewDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set desiredTargetMaterializedViewSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set desiredFullyQualifiedTargetMaterializedViewName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}
                    {% set currentFullyQualifiedTargetMaterializedViewName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                    {# Desired Node Name #}
                    {% set desiredNodeName = desiredState.node.name %}

                    {# Desired Secure Option #}
                    {% set desiredSecureOption = desiredState.config.secureOption %}

                    {# Desired Clustering Key #}
                    {% set desiredClusterKey = finalClusterKey %}

                    {# Desired Comment #}
                    {% set desiredNodeComment = desiredState.node.description %}

                    {# Current Node Name #}
                    {% set currentNodeName = currentState.node.name %}

                    {# Current Secure Option #}
                    {% set currentSecureOption = currentState.config.secureOption %}

                    {# Current Comment #}
                    {% set currentNodeComment = currentState.node.description %}

                    {# ALTER for Node name #}
                    {% set materializedViewName = '' %}
                    {% if desiredNodeName != currentNodeName %}
                        {% set materializedViewName = 'RENAME TO ' + desiredFullyQualifiedTargetMaterializedViewName %}

                        {{ stage('Alter Materialized View - Rename', true, "sql", "create") }}
                        ALTER MATERIALIZED VIEW {{ currentFullyQualifiedTargetMaterializedViewName }}
                            {{ materializedViewName }}
                    {% endif %}

                    {# Figure out cluster key #}
                    {% set nsVariables = namespace(finalClusterKey="") %}
                    {% if clusterTest == false %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% elif desiredState.config.clusterKey == true %}

                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
                        
                        {% else %}

                            {% set nsVariables.finalClusterKey = 'DROP CLUSTERING KEY' %}

                        {% endif %}

                        {{ stage('Recluster Materialized View', true, "sql", "create") }}
                        ALTER MATERIALIZED VIEW {{ desiredFullyQualifiedTargetMaterializedViewName }} 
                        {{ nsVariables.finalClusterKey }}

                    {% endif %}

                    {# ALTER for Comment #}
                    {%- if desiredNodeComment != currentNodeComment %} 
                        {% set dynamicTableComment = "SET COMMENT = " + "'" + desiredState.node.description + "'" %}

                        {{ stage('Alter Materialized View - Comment', true, "sql", "create") }}
                        ALTER MATERIALIZED VIEW {{ desiredFullyQualifiedTargetMaterializedViewName }}
                            {{ dynamicTableComment }}
                    {% endif %}

                    {# ALTER for Secure Option #}
                    {% set materializedViewSecureOption = '' %}
                    {% if desiredSecureOption != currentSecureOption %}
                        {% if desiredSecureOption == true %}            
                            {% set materializedViewSecureOption = 'SET SECURE' %}
                        {% else %}
                            {% set materializedViewSecureOption = 'UNSET SECURE' %}
                        {% endif %}

                        {{ stage('Alter Materialized View - Secure Option', true, "sql", "create") }}
                        ALTER MATERIALIZED VIEW {{ desiredFullyQualifiedTargetMaterializedViewName }}
                            {{ materializedViewSecureOption }}
                    {% endif %}

                    {% if desiredState.config.clusterKey == true %}
                        {{ stage('Resume Recluster Materialized View', true, "sql", "create") }}
                        ALTER MATERIALIZED VIEW {{ desiredFullyQualifiedTargetMaterializedViewName }} RESUME RECLUSTER
                    {% endif %}

                {% else %}
                    {{ stage('Nothing to do.') }}
                    select 1 = 0
                
                {% endif %}
                    
            {% elif currentState != undefined and desiredState == undefined %}

                {# Materialized View Name #}
                {% set targetMaterializedViewDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetMaterializedViewSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetMaterializedViewName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {{ stage('Drop Materialized View', true, "sql", "drop") }}
                DROP MATERIALIZED VIEW IF EXISTS {{ fullyQualifiedTargetMaterializedViewName }}


            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: ""
    name: Materialized View Stage
    version: 1
  StepType-225:
    id: "225"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: ML FORECAST
        short: ML_FCSTS
        tagColor: 'blue'
        plural: ML Forecasts


        config:

        - groupName: Forecast Model Input
          items:


        # Toggle to determine if a single-series forecast or a multi-series forecast is to be created #

            - type: toggleButton
              displayName: 'Multi-Series Forecast'
              attributeName: 'multiseries'
              isRequired: false
              default: 'true'

        # For multiple time series models, the name of the column defining the multiple time series in input data #

            - type: columnDropdownSelector
              displayName: 'Series Column'
              attributeName: 'seriescol'
              isRequired: false
              enableIf: "{{ config.multiseries }}"

        # Name of the column containing the timestamps in input data #

            - type: columnDropdownSelector
              displayName: 'Timestamp Column'
              attributeName: 'tscol'
              isRequired: true

        # Name of the column containing the target (dependent value) in input data #

            - type: columnDropdownSelector
              displayName: 'Target Column'
              attributeName: 'tgtcol'
              isRequired: true


        # An OBJECT containing key-value pairs used to configure the forecast job #

            - type: toggleButton
              displayName: 'Config Object'
              attributeName: 'cobject'
              isRequired: false
              default: false

            - type: textBox
              displayName: 'Prediction Interval'
              attributeName: 'predictioninterval'
              enableIf: '{%- if config.cobject %}true{%- else %}false{%- endif %}'
              default: 'ex:0.80(float value)'

        # The time series to forecast #

            - type: toggleButton
              displayName: 'Series value'
              attributeName: 'series_value'
              isRequired: false
              enableIf: '{%- if config.multiseries  %}true{%- else %}false{%- endif %}' 

            - displayName: Enter the series value
              type: textBox
              attributeName: 'svalue'
              enableIf: '{%- if config.series_value and config.multiseries %}true{%- else %}false{%- endif %}'

        # Exogenous variable:additional features influencing the forecast #

            - type: toggleButton
              displayName: 'Exogenous Variables'
              attributeName: 'exvar'
              isRequired: false
              default: 'true'

            - displayName: Future-valued Exogenous data can be added by enabling the multi source toggle below 
              type: label
              enableIf: '{%- if config.exvar %}true{%- else %}false{%- endif %}'

            - displayName: Exogenous data source
              type: multisourceToggle
              enableIf: '{%- if config.exvar %}true{%- else %}false{%- endif %}'

        # Required for forecasts without exogenous variables.The number of steps ahead to forecast #

            - displayName: Days To Forecast
              attributeName: fcdays
              type: textBox
              enableIf: '{%- if not config.exvar %}true{%- else %}false{%- endif %}' 
              isRequired: false
              default: '30'


        systemColumns:
        - displayName: "FORECAST"
          attributeName: forecast
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
        - displayName: "LOWER_BOUND"
          attributeName: lower_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
        - displayName: "UPPER_BOUND"
          attributeName: upper_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
      templates:
        create:
          templateString: |-
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : ML Forecast == #}
            {# == Node Type Description    : This node creates a forecast table  == #}

            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'FORECAST_' ~ src_node.name %}

            {# Forecast table creation #}

            {{ stage('Create Forecast Table') }}

            CREATE OR REPLACE TABLE {{ this }}
            (
                {% for col in source.columns  %}
                    "{{ col.name }}" 
                    {%- if col.name == config.tscol.name %} TIMESTAMP 
                    {%- elif col.name == config.tgtcol.name %} FLOAT 
                    {%- else %} {{ col.dataType }}
                    {%- endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{%- endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
        run:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : ML Forecast == #}
            {# == Node Type Description    : This node creates a forecast table  == #}


            {# INitialize forecast model name #}

            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'FORECAST_' ~ src_node.name %}

            {%- set nsVariables = namespace(squotes="") -%}

            {# Check series column datatype to determine if quoted required for series value #}

            {% if config.series_value %}
                    {% for col in source.columns  %} 
                        {% if col.id == config.seriescol.id %}
            			    {%if  (col.dataType | replace("0", "")
                | replace("1", "")
                | replace("2", "")
                | replace("3", "")
                | replace("4", "")
                | replace("5", "")
                | replace("6", "")
                | replace("7", "")
                | replace("8", "")
                | replace("9", "") |replace("(","")|replace(")",""))  in ('STRING','VARCHAR','CHAR','TEXT') %}
            				   {% set  nsVariables.squotes ="'" %}
            				{% else %}
            				   {% set  nsVariables.squotes = ""  %}
                                {{ col.dataType}}
            				{% endif %}
            			{% endif %}
                    {% endfor %}

            {% endif %}

            {# Forecast table truncated #}

            {{ stage('Truncate Forecast table') }}

            TRUNCATE IF EXISTS {{ this }}

            {# Initial training data inserted into forecast table #}

            {{ stage('Populate Forecast Table with Historical Data') }}

            {% if not config.exvar %}

            INSERT INTO {{ this }}
            (
                {%- for col in source.columns  %} 
                    "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
            )
            SELECT 
                {% for col in source.columns  %} 
                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            {{ source.join }}

            {% else %}

                   INSERT INTO {{ this }}
                  (
                   {%- for col in source.columns  %} 
                    "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                   {%- endfor %}
                   )

                    {% for source in sources %}
            		    SELECT 
               			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
                            {{ source.join }}
                         {% if not loop.last %}
            			   {% if node.isMultisource %}
            				UNION
            			   {% endif %}
                         {% endif %}
            	
            		{% endfor %}  

            {% endif %}


            {# Forecast model created #}

            {{ stage('Create Forecast Model Instance') }}


            CREATE OR REPLACE SNOWFLAKE.ML.FORECAST
             {{ ref_no_link(node.location.name, forecast_name) }}(
                INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}            
                    FROM {{ this }}
                    WHERE  "{{ config.tgtcol.name }}" IS NOT NULL
                '),
                {% if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}',
                TARGET_COLNAME => '{{ config.tgtcol.name }}'
            )

            {# Forecast data based on model with predicted values  is inserted into forecast table #}

            {{ stage('Insert Forecast data') }}
            BEGIN


            {% if config.exvar %}
                CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST(
                    INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT 
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}            
                    FROM {{ this }}
                    WHERE  "{{ config.tgtcol.name }}" IS NULL
                '),
                {%if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}' 
                {% if config.series_value %}, SERIES_VALUE => {{ nsVariables.squotes}}{{config.svalue}}{{nsVariables.squotes}}  :: Variant {% endif %}
                {% if config.cobject %},CONFIG_OBJECT => {'prediction_interval': {{ config.predictioninterval }}} {% endif %});


                UPDATE {{ this }} SRC
                SET 
                    {%- for col in columns if  col.forecast or col.lower_bound or col.upper_bound %}
                        "{{ col.name }}" = RES."{{ col.name }}" {%- if not loop.last %}, {%- endif %}
                    {%- endfor %}
                FROM TABLE(RESULT_SCAN(-1)) RES
                WHERE 
                    RES."TS" = SRC."{{ config.tscol.name }}"
                    {%- if config.multiseries  %}
                    AND RES."SERIES" = SRC."{{ config.seriescol.name }}"            
                    {%- endif %};


            {% else %}


                CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST(FORECASTING_PERIODS =>{{ config.fcdays }}
                {% if config.series_value %},SERIES_VALUE =>{{ nsVariables.squotes}}{{config.svalue}}{{nsVariables.squotes}}  :: Variant {% endif %}
                {% if config.cobject %},CONFIG_OBJECT => {'prediction_interval': {{ config.predictioninterval }}} {% endif %});


                INSERT INTO {{ this }}
                (
                    {%- for col in source.columns  %} 
                        "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                )
                SELECT 
                    {% for col in source.columns %}
                        {%- if config.multiseries and col.id == config.seriescol.id %}"SERIES"
                        {%- elif col.id == config.tscol.id %}"TS"
                        {%- elif col.id == config.tgtcol.id %}NULL
                        {%- elif col.forecast or col.lower_bound or col.upper_bound %}"{{ col.name }}"
                        {%- else %}{{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- endif %}{%- if not loop.last %}, {%- endif %}
                    {% endfor %}
                FROM TABLE(RESULT_SCAN(-1)) RES;
            {% endif %}

            END
    name: ML Forecast
    version: 1
  StepType-242:
    id: "242"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Deferred Merge - Delta Stream
        short: DM_VIEW
        tagColor: black
        plural: Deferred Merge

        deployStrategy: advanced

        config:
        - groupName: Stream Options
          items:
          - displayName: Source Object
            attributeName: sourceType
            type: dropdownSelector
            default: Table
            options:
              - Table
              - External Table
              - View
            isRequired: false

          - displayName: Append Only Stream
            attributeName: appendOnly
            type: dropdownSelector
            default: "false"
            options:
              - "false"
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"

          - displayName: Show Initial Rows
            attributeName: initialRows
            type: toggleButton
            default: true
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"

          - displayName: Insert Only
            attributeName: insertOnly
            type: toggleButton
            default: false
            isRequired: true
            enableIf: "{% if config.sourceType == 'External Table' %} true {% else %} false {% endif %}"

        - groupName: Target Loading Options
          items:
          - type: tabular
            displayName: 'Table Key(s)'
            attributeName: partitionBy
            columns:
          
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: partColName
               isRequired: true
                
            isRequired: false

          - displayName: Record Versioning
            attributeName: recordVersioning
            type: dropdownSelector
            default: Datetime Column
            options:
              - Datetime Column
              - Date Column and Time Column
              - Numeric Column
            isRequired: true

          - type: tabular
            displayName: 'Timestamp or Sequence'
            attributeName: orderBy
            columns:
          
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: colName
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"
            
            -  type: dropdownSelector
               displayName: Sort Order
               attributeName: sortOrd
               default: desc
               options:
               - desc
               - asc
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"
            
            isRequired: false
            enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Date / Timestamp Columns'
            attributeName: orderByDateTime
            columns:
          
            -  type: columnDropdownSelector
               displayName: Date Column
               attributeName: colNameDate
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
            -  type: columnDropdownSelector
               displayName: Timestamp Column
               attributeName: colNameTimestamp
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
            -  type: dropdownSelector
               displayName: Sort Order
               attributeName: sortOrdDateTimestamp
               default: desc
               options:
               - desc
               - asc
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
            isRequired: false
            enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"

        - groupName: Target Row DML Operations
          items:
          - displayName: Column that Identifies DML Operations
            attributeName: dmlCol
            type: columnDropdownSelector
            isRequired: false

          - displayName: Include Value for Update
            attributeName: capUpdate
            type: toggleButton
            default: false
            isRequired: false
         
          - displayName: Insert Value
            attributeName: dmlInsert
            type: textBox
            default: I
            isRequired: true
         
          - displayName: Update Value
            attributeName: dmlUpdate
            type: textBox
            default: U
            isRequired: true
            enableIf: "{% if config.capUpdate == true %} true {% else %} false {% endif %}"
         
          - displayName: Delete Value
            attributeName: dmlDelete
            type: textBox
            default: D
            isRequired: true
         
        - groupName: Target Delete Options
          items:
          - displayName: Soft Delete
            attributeName: softDeleteFlag
            type: toggleButton
            default: false
            isRequired: false

          - displayName: Retain Last Non-Deleted Values
            attributeName: retainLastNonDeleteFlag
            type: toggleButton
            default: false
            isRequired: false
         
        - groupName: Target Clustering Options
          items:
          - displayName: Cluster Key
            attributeName: clsKey
            type: dropdownSelector
            default: None
            options:
              - None
              - Table Key
              - Primary Key from Source
              - Row Update Timestamp
              - Primary Key and Update Timestamp from Source
              - Update Timestamp and Primary Key from Source
              - Custom Cluster Columns
              - Custom Cluster Key
            isRequired: false

          - displayName: Custom Cluster Key (ex. col1, left(col2,3), coln)
            attributeName: clsKeyCus
            type: textBox
            isRequired: false
            enableIf: "{% if config.clsKey == 'Custom Cluster Key' %} true {% else %} false {% endif %}"
         
        - groupName: Scheduling Options
          items:
          - displayName: Scheduling Options
            attributeName: schedulingMode
            type: dropdownSelector
            default: Warehouse Task
            options:
              - Warehouse Task
              - Serverless Task
            isRequired: true

          - displayName: When Source Stream has Data Flag
            attributeName: flagSrcStream
            type: toggleButton
            isRequired: true

          - displayName: Select Warehouse on which to run task
            attributeName: whName
            type: textBox
            default: '<WAREHOUSE_NAME>'
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Warehouse Task' %} true {% else %} false {% endif %}"

          - displayName: Select initial serverless Warehouse size
            attributeName: serverlessSize
            type: dropdownSelector
            default: 'MEDIUM'
            options:
              - XSMALL
              - SMALL
              - MEDIUM
              - LARGE
              - XLARGE
              - XXLARGE
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Serverless Task' %} true {% else %} false {% endif %}"

          - displayName: Task Schedule
            attributeName: schedulePeriodOption
            type: dropdownSelector
            default: Minutes
            options:
              - Minutes
              - CRON
              - Predecessor
            isRequired: TRUE

          - displayName: Enter task schedule using minutes
            attributeName: schedulePeriod
            type: textBox
            default: '60'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Minutes' %} true {% else %} false {% endif %}"

          - displayName: Enter task schedule using CRON
            attributeName: scheduleCRON
            type: textBox
            default: '5 0-23 * * * America/Los_Angeles'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'CRON' %} true {% else %} false {% endif %}"

          - displayName: Enter predecessor task(s) seperated by a comma 
            attributeName: predTask
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

          - displayName: Enter root task name
            attributeName: rootTask
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

        - groupName: "Pre/Post SQL"
          items: 
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: 'DM_UPDATE_TIMESTAMP'
          transform: "current_timestamp::timestamp_ntz"
          dataType: timestamp
          placement: end
          attributeName: hmUpdTs
      templates:
        create:
          templateString: |
            {% if (currentState == undefined and desiredState != undefined) or (currentState != undefined and desiredState != undefined ) %}

            {# Set Namespace Variables #}
                {% set nsVariables = namespace(taskWhenRun="") %}
                {% set nsVariables = namespace(partition="") %}
                {% set nsVariables = namespace(orderBy="") %}
                {% set nsVariables = namespace(rowNumber="") %}
                {% set nsVariables = namespace(tableKey=[]) %}
                {% set nsVariables = namespace(sortKey=[]) %}
                {% set nsVariables = namespace(tableKeySort=[]) %}
                {% set nsVariables = namespace(hybridMergeSortFilter=[]) %}

                {# Source Object Location and Name #}
                {% set sourceStorageLocation = desiredState.sources[0].dependencies[0].node.location.name %}
                {% set sourceDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='database') | first %}
                {% set sourceSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='schema') | first %}
                {% set sourceTableName = desiredState.sources[0].dependencies[0].node.name %}
                {% set fullyQualifiedSourceTableName = '"' + sourceDatabaseName + '"."' + sourceSchemaName + '"."' + sourceTableName + '"' %}

                {# Target Stream Location and Name #}
                {% set streamTargetLocationName = desiredState.node.location.name %}
                {% set streamTargetDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = desiredState.node.name + '_STREAM' %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}
                {% set changesClauseAt = 'AT(stream => \'' + fullyQualifiedStreamName + '\')' %}

                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name).replace('DM_VIEW_','DM_TABLE_') %}
                {% set targetTableName = desiredState.node.name %}

                {% set targetTableColumnIds = desiredState.columns | map(attribute='id') | list %}
                {% set targetTableColumnNames = desiredState.columns | map(attribute='name') | list %}
                {% set targetTableMergeUpdateColumn = desiredState.columns | selectattr('hmUpdTs', 'defined') | map(attribute='name') | first %}
                {% set targetTableDmlIdentifierColumn = desiredState.config.dmlCol.name %}
                {% set targetTableDmlIdentifierColumnDatatype = desiredState.config.dmlCol.dataType %}
                {% set targetTableDmlIdentifierColumnQuotes = '"' + targetTableDmlIdentifierColumn + '"' %}

                {# Merge partition by and order by #}
                {% set targetTableColumnNamesUpdate = targetTableColumnNames | reject('in', desiredState.config.partitionBy.get('items') | map(attribute='partColName.name')) | list %}

                {% for i in desiredState.config.partitionBy.get('items') %}
                    {%- if loop.first -%}
                        {% set nsVariables.partition = '"' + i.partColName.name + '"' %}
                    {% else %}
                        {% set nsVariables.partition = nsVariables.partition + ', "' + i.partColName.name + '"' %}
                    {%- endif -%}

                    {% set targetTableColumnNamesUpdate = targetTableColumnNames | reject('in', i.partColName.name) | list %}

                {% endfor %}

                {% if desiredState.config.recordVersioning in ('Datetime Column','Numeric Column') %}
                    {% set datetimeNumericColSort = desiredState.config.orderBy.get('items') %}
                    {% set nsVariables.orderBy = '"' + datetimeNumericColSort  | map(attribute='colName.name') | first + '" ' + datetimeNumericColSort  | map(attribute='sortOrd') | first %}
                    {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
                    {% set nsVariables.hybridMergeSortFilter = 'alias."' + datetimeNumericColSort  | map(attribute='colName.name') | first + '"' %}

                    {%- set nsVariables.sortKey = desiredState.config.orderBy.get('items') %}
                    {% set nsVariables.sortKey = nsVariables.sortKey | map(attribute='colName.name') | list %}
                {% else %}
                    {% set dateTimeColSort = desiredState.config.orderByDateTime.get('items') %}
                    {% set dateCol = dateTimeColSort | map(attribute='colNameDate.name') | first %}
                    {% set timeCol = dateTimeColSort | map(attribute='colNameTimestamp.name') | first %}
                    {% set sortOrdDateTimestamp = dateTimeColSort | map(attribute='sortOrdDateTimestamp') | first %}
                    {% set nsVariables.orderBy = 'to_timestamp("' + dateCol + '" || ' + '\'T\'' + ' ||"' + timeCol + '") ' + sortOrdDateTimestamp %}
                    {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
                    {% set nsVariables.hybridMergeSortFilter = 'to_timestamp(alias."' + dateCol + '" || ' + '\'T\'' + ' || alias."' + timeCol + '")' %}

                    {%- set nsVariables.sortKey = desiredState.config.orderByDateTime.get('items') %}
                    {% set nsVariables.sortKey = nsVariables.sortKey | map(attribute='colNameDate.name') | list + nsVariables.sortKey | map(attribute='colNameTimestamp.name') | list %}
                {% endif %}

                {%- set nsVariables.tableKey = desiredState.config.partitionBy.get('items') %}
                {% set nsVariables.tableKey = nsVariables.tableKey | map(attribute='partColName.name') | list %}

                {%- set nsVariables.tableKeySort = nsVariables.tableKey + nsVariables.sortKey %}

                {# Stream Type #}
                {% if desiredState.config.sourceType == 'Table' %} 
                    {% set streamType = 'TABLE' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% elif desiredState.config.sourceType == 'External Table' %} 
                    {% set streamType = 'EXTERNAL TABLE' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% else %} 
                    {% set streamType = 'VIEW' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% endif %}

                {# DML Identifier Quoting #}
                {% if ((targetTableDmlIdentifierColumnDatatype in ('FLOAT','BOOLEAN')) or (targetTableDmlIdentifierColumnDatatype[:6] == 'NUMBER')) %}
                    {% set insertValue = desiredState.config.dmlInsert %}
                    {% set deleteValue = desiredState.config.dmlDelete %}
                    {% if desiredState.config.capUpdate == true %}
                        {% set updateValue = desiredState.config.dmlUpdate %}
                    {% endif %}
                {% else %}
                    {% set insertValue = "'" + desiredState.config.dmlInsert + "'" %}
                    {% set deleteValue = "'" + desiredState.config.dmlDelete + "'" %}
                    {% if desiredState.config.capUpdate == true %}
                        {% set updateValue = "'" + desiredState.config.dmlUpdate + "'" %}
                    {% endif %}
                {% endif %}

                {# Stream Append Behavior #}
                {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                    {% set streamAppendMode = 'APPEND_ONLY = FALSE' %}
                    {% set changesClauseMode = 'CHANGES(information => default)' %}
                    {% set updateStreamFilter = '' %}
                    {% set insertStreamFilter = '(metadata$action = \'INSERT\' and metadata$isupdate = false)' %}
                    {% if desiredState.config.capUpdate == true %}
                        {% set updateStreamFilter = ' OR (metadata$action = \'INSERT\' and metadata$isupdate = true)' %}
                    {% endif %}
                    {% set deleteStreamFilter = ' OR (metadata$action = \'DELETE\' and metadata$isupdate = false)' %}
                    {% set whereStreamFilter = 'WHERE (' + insertStreamFilter + updateStreamFilter + deleteStreamFilter + ')' %}
                    {% set andStreamFilter = 'AND (' + insertStreamFilter + updateStreamFilter + deleteStreamFilter + ')' %}
                    {% set identifyDefaultInsertRow = 'WHEN ' + targetTableDmlIdentifierColumnQuotes + ' = ' + insertValue + ' OR ' + insertStreamFilter + ' THEN ' + insertValue %}
                    {% set identifyDefaultDeleteRow = ' WHEN ' + targetTableDmlIdentifierColumnQuotes + ' = ' + deleteValue + deleteStreamFilter + ' THEN ' + deleteValue %}
                    {% set identifyDefaultUpdateRow = '' %}
                    {% if desiredState.config.capUpdate == true %}
                        {% set identifyDefaultUpdateRow = ' WHEN ' + targetTableDmlIdentifierColumnQuotes + ' = ' + updateValue + updateStreamFilter + ' THEN ' + updateValue %}
                    {% endif %}

                    {% set identifyDefaultStreamDeletedRow = 'CASE ' + identifyDefaultInsertRow + identifyDefaultDeleteRow + identifyDefaultUpdateRow + ' END' %}
                    {% set identifyDefaultStreamDeletedRowLoadFlag = 'CASE WHEN (CASE ' + identifyDefaultInsertRow + identifyDefaultDeleteRow + identifyDefaultUpdateRow + ' END) = ' + deleteValue + ' THEN 1 ELSE 0 END' %}
                {% else %}
                    {% set streamAppendMode = '' %}
                {% endif %}

                {# Stream Initial Row Behavior #}
                {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                    {% if desiredState.config.initialRows == true %} 
                        {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = TRUE' %}
                    {% else %} 
                        {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamInitialRowsMode = '' %}
                {% endif %}

                {# Stream Insert Only Behavior #}
                {% if streamType == 'EXTERNAL TABLE' %} 
                    {% if desiredState.config.insertOnly == true %} 
                        {% set streamInsertOnlyMode = 'INSERT_ONLY = TRUE' %}
                    {% else %} 
                        {% set streamInsertOnlyMode = 'INSERT_ONLY = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamInsertOnlyMode = '' %}
                {% endif %}

                {# Hybrid View Info #}
                {# View created in same schema as Target Table #}
                {% set targetHybridViewDatabase = targetTableDatabase %} 
                {% set targetHybridViewSchema = targetTableSchema %} 
                {% set targetHybridViewName = desiredState.node.name  %}
                {% set fullyQualifiedHybridViewName = targetHybridViewDatabase + '.' + targetHybridViewSchema + '."' + targetHybridViewName + '"' %}

                {# Task Info #}
                {% set taskName = desiredState.node.name + '_TASK'  %}
                {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

                {# Task Type #}
                {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
                    {%- set taskType = 'WAREHOUSE = ' + desiredState.config.whName -%} 
                {%- else -%}
                    {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
                {%- endif -%}

                {# Schedule Type #}
                {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
                    {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
                {% elif desiredState.config.schedulePeriodOption == 'CRON' %}
                    {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON %}
                {%- else -%}
                    {%- set nsVariables.taskWhenRun = 'AFTER ' -%}
                    {%- set predecessorTasks = (desiredState.config.predTask).split(",") -%}

                    {%- for p in predecessorTasks -%}
                        {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + targetTableDatabase + '.' + targetTableSchema + '.' + p -%}
                        {%- if not loop.last -%} 
                            {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + ',' -%}
                        {%- endif %}
                    {% endfor %}    
                {%- endif -%}

                {# When Stream has data logic #}
                {%- if desiredState.config.flagSrcStream == true -%} 
                    {%- set streamPoll = "WHEN SYSTEM$STREAM_HAS_DATA('" + fullyQualifiedStreamName + "')" -%} 
                {%- endif -%}

                {{ stage('Create Stream') }}
                CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
                    ON {{ streamType }} {{ streamSourceObjectName }}
                    {{ streamAppendMode }}
                    {{ streamInitialRowsMode }}
                    {{ streamInsertOnlyMode }}
                    
                {{ stage('Create Target Table') }}
                CREATE OR REPLACE TABLE {{ fullyQualifiedTargetTableName }}
                    (
                    {%- for col in desiredState.columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    )

                {% if desiredState.config.initialRows == true %}
                    {{ stage('Target Table Initial Load') }}
                    INSERT INTO {{ fullyQualifiedTargetTableName }}
                    SELECT
                    {%- for col in desiredState.columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    FROM (SELECT {%- for col in desiredState.columns %}
                                    {% if col.name == targetTableMergeUpdateColumn %}
                                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                    {% else %}
                                        "{{ col.name }}" as "{{ col.name }}"
                                    {% endif %}
                                    {%- if not loop.last -%}, {% endif %}
                                {%- endfor %}
                                {% if desiredState.config.softDeleteFlag == false %}
                                    ,{{ identifyDefaultStreamDeletedRowLoadFlag }} as load_flag
                                {% endif %}
                        FROM {{ fullyQualifiedStreamName }}
                        QUALIFY {{ nsVariables.rowNumber }} = 1)
                        {% if desiredState.config.softDeleteFlag == false %}
                            WHERE load_flag = 1
                        {% endif %}
                {% endif %}

                {{ stage('Create Hybrid View') }}
                CREATE OR REPLACE VIEW {{ fullyQualifiedHybridViewName }} (
                    {%- for col in desiredState.columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %} ) AS

                {% if desiredState.config.softDeleteFlag == true and desiredState.config.retainLastNonDeleteFlag == false %}
                    /* SOFT_DELETE = true RETAIN_LAST_NON_DELETE = false */
                    WITH delta AS 
                    (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn %}
                                    {{ identifyDefaultStreamDeletedRow }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    {{ whereStreamFilter }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1)

                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    WHERE NOT EXISTS (SELECT 1
                                    FROM delta d
                                    WHERE {%- for col in (nsVariables.partition).split(",") %}
                                                a.{{ col }} = d.{{ col }}
                                                {% if not loop.last -%}AND {% endif %}
                                            {%- endfor %})
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM delta d

                {% elif desiredState.config.softDeleteFlag == false and desiredState.config.retainLastNonDeleteFlag == false %} 
                    /* SOFT_DELETE = false RETAIN_LAST_NON_DELETE = false */
                    WITH delta AS 
                    (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn %}
                                    {{ identifyDefaultStreamDeletedRow }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                , 
                            {%- endfor %}
                                CASE WHEN {{ identifyDefaultStreamDeletedRow }} = {{ deleteValue }} THEN 0 ELSE 1 END AS LOAD_FLAG
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    {{ whereStreamFilter }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1)

                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    WHERE NOT EXISTS (SELECT 1
                                    FROM delta d
                                    WHERE {%- for col in (nsVariables.partition).split(",") %}
                                                a.{{ col }} = d.{{ col }}
                                                {% if not loop.last -%}AND {% endif %}
                                            {%- endfor %})
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM delta d
                    WHERE LOAD_FLAG = 1

                {% elif desiredState.config.softDeleteFlag == true and desiredState.config.retainLastNonDeleteFlag == true %} 
                    /* SOFT_DELETE = true RETAIN_LAST_NON_DELETE = true */
                    WITH 
                    a AS (
                    SELECT {%- for col in desiredState.columns %}
                                {%- if col.name == targetTableMergeUpdateColumn -%}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn %}
                                    {{ identifyDefaultStreamDeletedRow }} as "{{ col.name }}_CALC"
                                {%- else -%}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {%- endif -%}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE "{{ targetTableDmlIdentifierColumn }}_CALC" != {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),

                    d AS (
                    SELECT {%- for col in desiredState.columns %}
                                {%- if col.name == targetTableMergeUpdateColumn -%}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn %}
                                    {{ identifyDefaultStreamDeletedRow }} as "{{ col.name }}_CALC"
                                {%- else -%}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {%- endif -%}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE "{{ targetTableDmlIdentifierColumn }}_CALC" = {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),

                    ods_d as (
                    SELECT {% for col in desiredState.columns -%}
                                {% if col.name == targetTableMergeUpdateColumn -%}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  -%} 
                                    d."{{ col.name }}" as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  -%} 
                                    {{ deleteValue }} as "{{ col.name }}"
                                {% else -%}
                                    a."{{ col.name }}" as "{{ col.name }}"
                                {% endif -%}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    INNER JOIN (
                            SELECT {%- for col in nsVariables.tableKeySort %}
                                            "{{ col }}",
                                    {%- endfor %}
                                            {{ identifyDefaultStreamDeletedRow }} as "{{ col }}"
                                FROM {{ fullyQualifiedSourceTableName }}
                                {{ changesClauseMode }}
                                {{ changesClauseAt }}
                                WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}) d
                    ON 
                    {% for col in nsVariables.tableKey %}
                        a."{{col}}" = d."{{col}}"
                        {%- if not loop.last -%} AND {% endif %}
                        {%- if loop.last -%} ) {% endif %}
                    {% endfor %}

                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  %} 
                                    coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                    coalesce(d."{{targetTableDmlIdentifierColumn}}_CALC", a."{{targetTableDmlIdentifierColumn}}_CALC") as "{{ col.name }}"
                                {% else %}
                                    a."{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM a
                    LEFT OUTER JOIN d
                    ON 
                        {%- for col in nsVariables.tableKey %}
                                a."{{ col }}" = d."{{ col }}" AND
                        {%- endfor %}
                        {{ nsVariables.hybridMergeSortFilter | replace('alias','d') }} > {{ nsVariables.hybridMergeSortFilter | replace('alias','a') }}
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM ods_d
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                                {%- if not loop.last -%}, {% endif %}
                            {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} d
                    WHERE NOT EXISTS (
                        SELECT 1
                        FROM {{ fullyQualifiedSourceTableName }}
                        {{ changesClauseMode }}
                        {{ changesClauseAt }} a
                        WHERE 
                        {%- for col in nsVariables.tableKey %}
                                a."{{ col }}" = d."{{ col }}"
                            {%- if not loop.last -%} AND {% endif %}
                        {%- endfor %}
                        {{ andStreamFilter }})

                {% elif desiredState.config.softDeleteFlag == false and desiredState.config.retainLastNonDeleteFlag == true %} 
                    /* SOFT_DELETE = false RETAIN_LAST_NON_DELETE = true */
                    WITH 
                    a AS (
                    SELECT {%- for col in desiredState.columns %}
                                {%- if col.name == targetTableMergeUpdateColumn -%}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn %}
                                    {{ identifyDefaultStreamDeletedRow }} as "{{ col.name }}_CALC"
                                {%- else -%}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {%- endif -%}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE "{{ targetTableDmlIdentifierColumn }}_CALC" != {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),

                    d AS (
                    SELECT {%- for col in desiredState.columns %}
                                {%- if col.name == targetTableMergeUpdateColumn -%}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn %}
                                    {{ identifyDefaultStreamDeletedRow }} as "{{ col.name }}_CALC"
                                {%- else -%}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {%- endif -%}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE "{{ targetTableDmlIdentifierColumn }}_CALC" = {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),

                    ods_d as (
                    SELECT {% for col in desiredState.columns -%}
                                {% if col.name == targetTableMergeUpdateColumn -%}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  -%} 
                                    d."{{ col.name }}" as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  -%} 
                                    {{ deleteValue }} as "{{ col.name }}"
                                {% else -%}
                                    a."{{ col.name }}" as "{{ col.name }}"
                                {% endif -%}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    INNER JOIN (
                            SELECT {%- for col in nsVariables.tableKeySort %}
                                            "{{ col }}",
                                    {%- endfor %}
                                            {{ identifyDefaultStreamDeletedRow }} as "{{ col }}"
                                FROM {{ fullyQualifiedSourceTableName }}
                                {{ changesClauseMode }}
                                {{ changesClauseAt }}
                                WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}) d
                    ON 
                    {% for col in nsVariables.tableKey %}
                        a."{{col}}" = d."{{col}}"
                        {%- if not loop.last -%} AND {% endif %}
                        {%- if loop.last -%} ) {% endif %}
                    {% endfor %}

                    SELECT 
                    {%- for col in desiredState.columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    FROM (
                        SELECT {%- for col in desiredState.columns %}
                                    {% if col.name == targetTableMergeUpdateColumn %}
                                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                    {% elif col.name in nsVariables.orderBy  %} 
                                        coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                    {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                        coalesce(d."{{ targetTableDmlIdentifierColumn }}_CALC", a."{{ targetTableDmlIdentifierColumn }}_CALC") as "{{ col.name }}"
                                    {% else %}
                                        a."{{ col.name }}" as "{{ col.name }}"
                                    {% endif %}
                                    , 
                            {%- endfor %}
                                    CASE WHEN {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} THEN 0 ELSE 1 END AS LOAD_FLAG
                        FROM a
                        LEFT OUTER JOIN d
                        ON 
                            {%- for col in nsVariables.tableKey %}
                                    a."{{ col }}" = d."{{ col }}" AND
                            {%- endfor %}
                            {{ nsVariables.hybridMergeSortFilter | replace('alias','d') }} > {{ nsVariables.hybridMergeSortFilter | replace('alias','a') }}
                    )
                    WHERE LOAD_FLAG = 1
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM ods_d
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                                {%- if not loop.last -%}, {% endif %}
                            {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} d
                    WHERE NOT EXISTS (
                        SELECT 1
                        FROM {{ fullyQualifiedSourceTableName }}
                        {{ changesClauseMode }}
                        {{ changesClauseAt }} a
                        WHERE 
                        {%- for col in nsVariables.tableKey %}
                                a."{{ col }}" = d."{{ col }}"
                            {%- if not loop.last -%} AND {% endif %}
                        {%- endfor %}
                        {{ andStreamFilter }})

                {% endif %}

                {%- if desiredState.config.schedulePeriodOption == 'Predecessor' -%} 
                    {%- set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + desiredState.config.rootTask + '"' -%} 
                    {{ stage('Suspend Root Task', true, "sql") }}
                    ALTER TASK {{ fullyQualifiedRootTaskName }} SUSPEND
                {%- endif -%}

                {{ stage('Create Task') }}
                CREATE OR REPLACE TASK 
                    {{ fullyQualifiedTaskName }} 
                    {{ taskType}} 
                    {{ nsVariables.taskWhenRun }} 
                    {% if nsVariables.poll != 'WHEN ' %} {{ nsVariables.poll }} {% endif %}
                AS 
                MERGE INTO {{ fullyQualifiedTargetTableName }} a
                USING (SELECT
                {%- for col in desiredState.columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% else %}
                                "{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedStreamName }}
                {{ whereStreamFilter }}
                QUALIFY {{ nsVariables.rowNumber }} = 1) d
                ON 
                {% for col in nsVariables.tableKey %}
                    a."{{col}}" = d."{{col}}"
                    {%- if not loop.last -%} AND {% endif %}
                {% endfor %}

                WHEN NOT MATCHED and d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ insertValue }} THEN INSERT (
                    {% for col in desiredState.columns %}
                        a."{{ col.name }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                    )
                VALUES (
                    {% for col in desiredState.columns %}
                        d."{{ col.name }}"
                        {% if not loop.last %}, {%- endif -%}
                    {%- endfor -%}
                    )
                {% if desiredState.config.capUpdate == true %}
                    WHEN NOT MATCHED and d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ updateValue }} THEN INSERT (
                        {% for col in desiredState.columns %}
                            a."{{ col.name }}"
                            {% if not loop.last %}, {% endif -%}
                        {%- endfor -%}
                        )
                    VALUES (
                        {% for col in desiredState.columns %}
                            d."{{ col.name }}"
                            {% if not loop.last %}, {%- endif -%}
                        {%- endfor -%}
                        )
                {% endif %}
                WHEN NOT MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} AND /* softDeleteFlag True */ {{ desiredState.config.softDeleteFlag }} = True THEN INSERT (
                    {% for col in desiredState.columns %}
                        a."{{ col.name }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                    )
                VALUES (
                    {% for col in desiredState.columns %}
                        d."{{ col.name }}"
                        {% if not loop.last %}, {%- endif -%}
                    {%- endfor -%}
                    )
                {% if desiredState.config.capUpdate == true %}
                    /* Update DML value selected */
                    WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ updateValue }} THEN UPDATE SET
                        {% for col in targetTableColumnNamesUpdate %}
                            a."{{ col }}" = d."{{ col }}"
                            {% if not loop.last %}, {% endif -%}
                        {%- endfor -%}
                {% endif %}
                WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ insertValue }} THEN UPDATE SET
                    {% for col in targetTableColumnNamesUpdate %}
                        a."{{ col }}" = d."{{ col }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                {% if desiredState.config.softDeleteFlag == true %}
                    /* Soft Delete */
                    WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    THEN UPDATE SET
                        {% for col in (targetTableColumnNamesUpdate) %}
                            {% if (col in (targetTableMergeUpdateColumn, targetTableDmlIdentifierColumn)) or col in (nsVariables.sortKey) %}
                                a."{{ col }}" = d."{{ col }}"
                                {% if not loop.last %}, {% endif -%}
                            {% endif %}
                        {%- endfor -%}
                {% else %}
                    /* Hard Delete */
                    WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    THEN DELETE
                {% endif %}

                {%- if desiredState.config.schedulePeriodOption != 'Predecessor' -%} 
                    {{ stage('Resume Task', true, "sql") }}
                    ALTER TASK {{ fullyQualifiedTaskName }} RESUME;
                {%- endif -%}

            {% elif currentState != undefined and desiredState == undefined %}

                {# Target Stream Location and Name #}
                {% set streamTargetLocationName = currentState.node.location.name %}
                {% set streamTargetDatabaseName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = currentState.node.name + '_STREAM' %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}

                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(currentState.node.location.name, currentState.node.name).replace('DM_VIEW_','DM_TABLE_') %}
                {% set targetTableName = currentState.node.name %}

                {# Hybrid View Info #}
                {# View created in same schema as Target Table #}
                {% set targetHybridViewDatabase = targetTableDatabase %} 
                {% set targetHybridViewSchema = targetTableSchema %} 
                {% set targetHybridViewName = currentState.node.name  %}
                {% set fullyQualifiedHybridViewName = targetHybridViewDatabase + '.' + targetHybridViewSchema + '."' + targetHybridViewName + '"' %}

                {# Task Info #}
                {% set taskName = currentState.node.name + '_TASK'  %}
                {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

                {{ stage('Drop Stream') }}
                DROP STREAM IF EXISTS {{ fullyQualifiedStreamName }}

                {{ stage('Drop Table') }}
                DROP TABLE IF EXISTS {{ fullyQualifiedTargetTableName }}

                {{ stage('Drop View') }}
                DROP VIEW IF EXISTS {{ fullyQualifiedHybridViewName }}

                {%- if currentState.config.schedulingPeriodOption == 'Predecessor' -%} 
                {{ stage('Suspend Root Task', true, "sql") }}
                    ALTER TASK IF EXISTS {{ fullyQualifiedRootTaskName }} SUSPEND
                {{ stage('Drop Current Task', true, "sql") }}
                    DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                {%- else -%}
                {{ stage('Drop Current Task', true, "sql") }}
                    DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                {%- endif -%}

            {%- else -%}

                {{ stage('Nothing to do.') }}
                select 1 = 0

            {% endif %}
        run:
          templateString: ""
    name: Deferred Merge - Delta Stream
    version: 1
  StepType-250:
    id: "250"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |+
        capitalized: Anomaly Detection
        short: ML_AD
        tagColor: 'blue'
        plural: ML Anomaly Detections


        config:
         
        - groupName: Anomaly Model Input
          items:




            - type: toggleButton
              displayName: 'Multi-Series'
              attributeName: 'multiseries'
              isRequired: false
              default: 'true'



            - type: columnDropdownSelector
              displayName: 'Series Column'
              attributeName: 'seriescol'
              isRequired: false
              enableIf: "{{ config.multiseries }}"

        # Name of the column containing the timestamps in input data #

            - type: columnDropdownSelector
              displayName: 'Timestamp Column'
              attributeName: 'tscol'
              isRequired: true

        # Name of the column containing the target (dependent value) in input data #

            - type: columnDropdownSelector
              displayName: 'Target Column'
              attributeName: 'tgtcol'
              isRequired: true


        # An OBJECT containing key-value pairs used to configure the forecast job #

            - type: toggleButton
              displayName: 'Config Object'
              attributeName: 'cobject'
              isRequired: false
              default: false

            - type: textBox
              displayName: 'Prediction Interval'
              attributeName: 'predictioninterval'
              enableIf: '{%- if config.cobject %}true{%- else %}false{%- endif %}'
              default: 'ex:0.80(float value)'

        # The time series to forecast #

            - type: toggleButton
              displayName: 'Series value'
              attributeName: 'series_value'
              isRequired: false
              enableIf: '{%- if config.multiseries  %}true{%- else %}false{%- endif %}' 

            - displayName: Enter the series value
              type: textBox
              attributeName: 'svalue'
              enableIf: '{%- if config.series_value and config.multiseries %}true{%- else %}false{%- endif %}'

        # Exogenous variable:additional features influencing the forecast #

            - type: toggleButton
              displayName: 'Supervised Data'
              attributeName: 'spdata'
              isRequired: false
              default: 'false'

            - type: columnDropdownSelector
              displayName: 'Labelled Column'
              attributeName: 'lcdata'
              isRequired: false
              default: 'false'
              enableIf: '{%-if config.spdata %}true{%- else %}false{%- endif %}'


            - type: toggleButton
              displayName: 'Unsupervised Data'
              attributeName: 'uspdata'
              isRequired: false
              default: 'false'
              enableIf: '{%-if config.spdata %}false{%- else %}true{%- endif %}'
         


            - displayName: Exogenous data source
              type: multisourceToggle
              attributeName: 'mtoggle'
              default: 'true'
              enableIf: '{%- if config.spdata or config.uspdata %}true{%- else %}false{%- endif %}'

            



        systemColumns:
        - displayName: "FORECAST"
          attributeName: forecast
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "LOWER_BOUND"
          attributeName: lower_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "UPPER_BOUND"
          attributeName: upper_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "IS_ANOMALY"
          attributeName: anomaly
          transform: ""
          dataType: BOOLEAN
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "PERCENTILE"
          attributeName: percentile
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "DISTANCE"
          attributeName: distance
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'



      templates:
        create:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : ML Anomaly Detection == #}
            {# == Node Type Description    : This node creates a Anomaly Detection table  == #}

            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'AnomalyDetection_' ~ src_node.name %}

            {# Forecast table creation #}

            {{ stage('Create Anomaly Detection Table') }}

            {% if config.spdata %}
                CREATE OR REPLACE TABLE {{ this }}
                (
                    {%- for col in columns %}
                            {%- if col.name != config.lcdata.name %}
                            "{{ col.name }}" 
                            {%- if col.name == config.tscol.name %} TIMESTAMP 
                            {%- elif col.name == config.tgtcol.name %} FLOAT 
                            {%- else %} {{ col.dataType }}
                            {%- endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{%- endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {%- endif %}
                    {% endfor %}
                )
            {% else %}
                CREATE OR REPLACE TABLE {{ this }}
                (
                    {% for col in source.columns %}
                        "{{ col.name }}" 
                        {%- if col.name == config.tscol.name %} TIMESTAMP 
                        {%- elif col.name == config.tgtcol.name %} FLOAT 
                        {%- else %} {{ col.dataType }}
                        {%- endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{%- endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
            {% endif %}
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
        run:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : ML Anomaly Detection == #}
            {# == Node Type Description    : This node creates a Anomaly Detection table  == #}


            {# INitialize forecast model name #}

            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'ANOMALY_' ~ src_node.name %}

            {%- set nsVariables = namespace(squotes="") -%}

            {# Check series column datatype to determine if quoted required for series value #}

            {% if config.series_value %}
                    {% for col in source.columns  %} 
                        {% if col.id == config.seriescol.id %}
            			    {%if  (col.dataType | replace("0", "")
                | replace("1", "")
                | replace("2", "")
                | replace("3", "")
                | replace("4", "")
                | replace("5", "")
                | replace("6", "")
                | replace("7", "")
                | replace("8", "")
                | replace("9", "") |replace("(","")|replace(")",""))  in ('STRING','VARCHAR','CHAR','TEXT') %}
            				   {% set  nsVariables.squotes ="'" %}
            				{% else %}
            				   {% set  nsVariables.squotes = ""  %}
                                {{ col.dataType}}
            				{% endif %}
            			{% endif %}
                    {% endfor %}

            {% endif %}

            {# Forecast table truncated #}

            {{ stage('Truncate Anomaly Detection table') }}

            TRUNCATE IF EXISTS {{ this }}

            {# Initial training data inserted into forecast table #}


            {# Forecast model created #}

            {{ stage('Create Anomaly Model Instance') }}


            CREATE OR REPLACE SNOWFLAKE.ML.ANOMALY_DETECTION
             {{ ref_no_link(node.location.name, forecast_name) }}(
                INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound or col.anomaly or col.percentile or col.distance) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}            
                    {{ source.join }}
                    WHERE  "{{ config.tgtcol.name }}" IS NOT NULL
                '),
                {% if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}',
                TARGET_COLNAME => '{{ config.tgtcol.name }}',
            	{% if config.lcdata  %}LABEL_COLNAME => '{{ config.lcdata.name.lower() }}' {% else %} LABEL_COLNAME => '' {% endif %}
            )

            {# Forecast data based on model with predicted values  is inserted into forecast table #}

            {{ stage('Insert Anomaly data') }}
            BEGIN
            {% if config.uspdata %}
                CALL {{ ref_no_link(node.location.name, forecast_name) }}!detect_anomalies(
                    INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT 
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound or col.anomaly or col.percentile or col.distance or col.lcdata) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}
                    {{ sources[-1].join }}
                '),
                {%if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}' ,
                TARGET_COLNAME => '{{ config.tgtcol.name }}')
                {% if config.cobject %},CONFIG_OBJECT => {'prediction_interval': {{ config.predictioninterval }}} {% endif %};


                INSERT INTO {{ this }}
                (
                    {%- for col in source.columns  %} 
                        "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                )
                SELECT 
                    {% for col in source.columns %}
                        {%- if config.multiseries and col.id == config.seriescol.id %}"SERIES"
                        {%- elif col.id == config.tscol.id %}"TS"
                        {%- elif col.id == config.tgtcol.id %}"Y"
                        {%- elif col.forecast or col.lower_bound or col.upper_bound or col.anomaly or col.percentile or col.distance %}"{{ col.name }}"
                        {%- else %}{{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- endif %}{%- if not loop.last %}, {%- endif %}
                    {% endfor %}
                FROM TABLE(RESULT_SCAN(-1)) RES;

            {% else %}
                CALL {{ ref_no_link(node.location.name, forecast_name) }}!detect_anomalies(
                    INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT 
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound or col.anomaly or col.percentile or col.distance) %}
                    {%- if col.name != config.lcdata.name %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                     {%- endif %}
                    {%- endfor %}
                    {{ sources[-1].join }}
                '),
                {%if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}' ,
                TARGET_COLNAME => '{{ config.tgtcol.name }}')
                {% if config.cobject %},CONFIG_OBJECT => {'prediction_interval': {{ config.predictioninterval }}} {% endif %};


                INSERT INTO {{ this }}
                (
                    {%- for col in columns %}
                    {%- if col.name != config.lcdata.name %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endif %}
                    {%- endfor %}
                )
                SELECT 
                {% for col in source.columns %}
                    {%- if col.name != config.lcdata.name %}
                        {%- if config.multiseries and col.id == config.seriescol.id %}"SERIES"
                        {%- elif col.id == config.tscol.id %}"TS"
                        {%- elif col.id == config.tgtcol.id %}"Y"
                        {%- elif col.forecast or col.lower_bound or col.upper_bound or col.anomaly or col.percentile or col.distance %}"{{ col.name }}"
                        {%- else %}{{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- endif %}{%- if not loop.last %}, {%- endif %}
                    {%- endif %}
                {% endfor %}
            FROM TABLE(RESULT_SCAN(-1)) RES;


            {% endif %}

            END
    name: Anomaly Detection 01
    version: 1
  StepType-259:
    id: "259"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |+
        capitalized: Anomaly Detection
        short: ML_AD
        tagColor: 'blue'
        plural: ML Anomaly Detections


        config:
         
        - groupName: Anomaly Model Input
          items:

            - type: toggleButton
              displayName: 'Multi-Series'
              attributeName: 'multiseries'
              isRequired: false
              default: false

            - type: columnDropdownSelector
              displayName: 'Series Column'
              attributeName: 'seriescol'
              isRequired: false
              enableIf: "{{ config.multiseries }}"

        # Name of the column containing the timestamps in input data #

            - type: columnDropdownSelector
              displayName: 'Timestamp Column'
              attributeName: 'tscol'
              isRequired: true

        # Name of the column containing the target (dependent value) in input data #

            - type: columnDropdownSelector
              displayName: 'Target Column'
              attributeName: 'tgtcol'
              isRequired: true



            - type: toggleButton
              displayName: 'Config Object'
              attributeName: 'cobject'
              isRequired: false
              default: false

            - type: textBox
              displayName: 'Prediction Interval'
              attributeName: 'predictioninterval'
              enableIf: '{%- if config.cobject %}true{%- else %}false{%- endif %}'
              default: 'ex:0.80(float value)'

        # Training an Anomaly Detection Model with Labeled Data #

            - type: toggleButton
              displayName: 'Supervised Data'
              attributeName: 'spdata'
              default: false
              enableIf: '{%-if config.uspdata %}false{%- else %}true{%- endif %}'

            - type: columnDropdownSelector
              displayName: 'Labeled Column'
              attributeName: 'lcdata'
              default: false
              enableIf: '{%-if config.spdata %}true{%- else %}false{%- endif %}'

        # Detecting Anomalies for a Single Time Series (Unsupervised) #

            - type: toggleButton
              displayName: 'Unsupervised Data'
              attributeName: 'uspdata'
              isRequired: false
              default: false
              enableIf: '{%-if config.spdata %}false{%- else %}true{%- endif %}'
              
         
            - displayName: Data that needs to be analyzed can be added by enabling the multi-source toggle below 
              type: label
              enableIf: '{%- if config.spdata or config.uspdata %}true{%- else %}false{%- endif %}'

            - type: multisourceToggle
              attributeName: 'mtoggle'
              default: false
              enableIf: '{%- if config.spdata or config.uspdata %}true{%- else %}false{%- endif %}'

            



        systemColumns:
        - displayName: "FORECAST"
          attributeName: forecast
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "LOWER_BOUND"
          attributeName: lower_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "UPPER_BOUND"
          attributeName: upper_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "IS_ANOMALY"
          attributeName: anomaly
          transform: ""
          dataType: BOOLEAN
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "PERCENTILE"
          attributeName: percentile
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "DISTANCE"
          attributeName: distance
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'



      templates:
        create:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : ML Anomaly Detection == #}
            {# == Node Type Description    : This node creates a Anomaly Detection table  == #}

            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set anomaly_name = 'AnomalyDetection_' ~ src_node.name %}

            {# Anomaly table creation #}

            {{ stage('Create Anomaly Detection Table') }}

            {% if config.spdata %}
                CREATE OR REPLACE TABLE {{ this }}
                (
                    {%- for col in columns %}
                            {%- if col.name != config.lcdata.name %}
                            "{{ col.name }}" 
                            {%- if col.name == config.tscol.name %} TIMESTAMP 
                            {%- elif col.name == config.tgtcol.name %} FLOAT 
                            {%- else %} {{ col.dataType }}
                            {%- endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{%- endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {%- endif %}
                    {% endfor %}
                )
            {% else %}
                CREATE OR REPLACE TABLE {{ this }}
                (
                    {% for col in source.columns %}
                        "{{ col.name }}" 
                        {%- if col.name == config.tscol.name %} TIMESTAMP 
                        {%- elif col.name == config.tgtcol.name %} FLOAT 
                        {%- else %} {{ col.dataType }}
                        {%- endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{%- endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
            {% endif %}
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
        run:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : ML Anomaly Detection == #}
            {# == Node Type Description    : This node creates a Anomaly Detection table  == #}


            {# INitialize anomaly model name #}

            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set anomaly_name = 'ANOMALY_' ~ src_node.name %}

            {%- set nsVariables = namespace(squotes="") -%}


            {# anomaly table truncated #}

            {{ stage('Truncate Anomaly Detection table') }}

            TRUNCATE IF EXISTS {{ this }}


            {# anomaly model created #}

            {{ stage('Create Anomaly Model Instance') }}


            CREATE OR REPLACE SNOWFLAKE.ML.ANOMALY_DETECTION
             {{ ref_no_link(node.location.name, anomaly_name) }}(
                INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound or col.anomaly or col.percentile or col.distance) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}            
                    {{ source.join }}
                    WHERE  "{{ config.tgtcol.name }}" IS NOT NULL
                '),
                {% if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}',
                TARGET_COLNAME => '{{ config.tgtcol.name }}',
            	{% if config.lcdata  %}LABEL_COLNAME => '{{ config.lcdata.name.lower() }}' {% else %} LABEL_COLNAME => '' {% endif %}
            )

            {# Anomaly data based on the model, including anomalous values, is inserted into the Anomaly table. #}

            {{ stage('Insert Anomaly data') }}
            BEGIN
            {% if config.uspdata %}
                CALL {{ ref_no_link(node.location.name, anomaly_name) }}!detect_anomalies(
                    INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT 
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound or col.anomaly or col.percentile or col.distance or col.lcdata) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}
                    {{ sources[-1].join }}
                '),
                {%if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}' ,
                TARGET_COLNAME => '{{ config.tgtcol.name }}'
                {% if config.cobject %},CONFIG_OBJECT => {'prediction_interval': {{ config.predictioninterval }}} {% endif %});


                INSERT INTO {{ this }}
                (
                    {%- for col in source.columns  %} 
                        "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                )
                SELECT 
                    {% for col in source.columns %}
                        {%- if config.multiseries and col.id == config.seriescol.id %}"SERIES"
                        {%- elif col.id == config.tscol.id %}"TS"
                        {%- elif col.id == config.tgtcol.id %}"Y"
                        {%- elif col.forecast or col.lower_bound or col.upper_bound or col.anomaly or col.percentile or col.distance %}"{{ col.name }}"
                        {%- else %}{{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- endif %}{%- if not loop.last %}, {%- endif %}
                    {% endfor %}
                FROM TABLE(RESULT_SCAN(-1)) RES;

            {% else %}
                CALL {{ ref_no_link(node.location.name, anomaly_name) }}!detect_anomalies(
                INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT 
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound or col.anomaly or col.percentile or col.distance) %}
                        {%- if col.name != config.lcdata.name %}
                            "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                        {%- endif %}
                    {%- endfor %}
                    {{ sources[-1].join }}
                '),
                {%if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}',
                TARGET_COLNAME => '{{ config.tgtcol.name }}'{% if config.cobject %},
                
                CONFIG_OBJECT => {'prediction_interval': {{ config.predictioninterval }}} {% endif %}
            );


                INSERT INTO {{ this }}
                (
                    {%- for col in columns %}
                    {%- if col.name != config.lcdata.name %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endif %}
                    {%- endfor %}
                )
                SELECT 
                {% for col in source.columns %}
                    {%- if col.name != config.lcdata.name %}
                        {%- if config.multiseries and col.id == config.seriescol.id %}"SERIES"
                        {%- elif col.id == config.tscol.id %}"TS"
                        {%- elif col.id == config.tgtcol.id %}"Y"
                        {%- elif col.forecast or col.lower_bound or col.upper_bound or col.anomaly or col.percentile or col.distance %}"{{ col.name }}"
                        {%- else %}{{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- endif %}{%- if not loop.last %}, {%- endif %}
                    {%- endif %}
                {% endfor %}
            FROM TABLE(RESULT_SCAN(-1)) RES;


            {% endif %}

            END
    name: Anomaly Detection 1.0
    version: 1
  StepType-261:
    id: "261"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |+
        capitalized: Copy of Anomaly Detection
        short: ML_AD
        tagColor: 'blue'
        plural: ML Anomaly Detections


        config:
         
        - groupName: Anomaly Model Input
          items:

            - type: textBox
              displayName: 'Model Instance Name'
              attributeName: 'mname'
              isRequired: true

            - type: toggleButton
              displayName: 'Create Model'
              attributeName: 'Forcecreate'
              default: true

            - type: toggleButton
              displayName: 'Multi-Series'
              attributeName: 'multiseries'
              isRequired: false
              default: false

            - type: columnDropdownSelector
              displayName: 'Series Column'
              attributeName: 'seriescol'
              isRequired: false
              enableIf: "{{ config.multiseries }}"

        # Name of the column containing the timestamps in input data #

            - type: columnDropdownSelector
              displayName: 'Timestamp Column'
              attributeName: 'tscol'
              isRequired: true

        # Name of the column containing the target (dependent value) in input data #

            - type: columnDropdownSelector
              displayName: 'Target Column'
              attributeName: 'tgtcol'
              isRequired: true



            - type: toggleButton
              displayName: 'Config Object'
              attributeName: 'cobject'
              isRequired: false
              default: false

            - type: textBox
              displayName: 'Prediction Interval'
              attributeName: 'predictioninterval'
              enableIf: '{%- if config.cobject %}true{%- else %}false{%- endif %}'
              default: 'ex:0.80(float value)'

        # Training an Anomaly Detection Model with Labeled Data #

            - type: toggleButton
              displayName: 'Supervised Data'
              attributeName: 'spdata'
              default: false
              enableIf: '{%-if config.uspdata %}false{%- else %}true{%- endif %}'

            - type: columnDropdownSelector
              displayName: 'Labeled Column'
              attributeName: 'lcdata'
              default: false
              enableIf: '{%-if config.spdata %}true{%- else %}false{%- endif %}'

        # Detecting Anomalies for a Single Time Series (Unsupervised) #

            - type: toggleButton
              displayName: 'Unsupervised Data'
              attributeName: 'uspdata'
              isRequired: false
              default: false
              enableIf: '{%-if config.spdata %}false{%- else %}true{%- endif %}'
              
         
            - displayName: Data that needs to be analyzed can be added by enabling the multi-source toggle below 
              type: label
              enableIf: '{%- if config.spdata or config.uspdata %}true{%- else %}false{%- endif %}'

            - type: multisourceToggle
              attributeName: 'mtoggle'
              default: false
              enableIf: '{%- if config.spdata or config.uspdata %}true{%- else %}false{%- endif %}'

            



        systemColumns:
        - displayName: "FORECAST"
          attributeName: forecast
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "LOWER_BOUND"
          attributeName: lower_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "UPPER_BOUND"
          attributeName: upper_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "IS_ANOMALY"
          attributeName: anomaly
          transform: ""
          dataType: BOOLEAN
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "PERCENTILE"
          attributeName: percentile
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "DISTANCE"
          attributeName: distance
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'



      templates:
        create:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : ML Anomaly Detection == #}
            {# == Node Type Description    : This node creates a Anomaly Detection table  == #}

            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set anomaly_name = 'AnomalyDetection_' ~ src_node.name %}

            {# Anomaly table creation #}

            {{ stage('Create Anomaly Detection Table') }}

            {% if config.spdata %}
                CREATE OR REPLACE TABLE {{ this }}
                (
                    {%- for col in columns %}
                            {%- if col.name != config.lcdata.name %}
                            "{{ col.name }}" 
                            {%- if col.name == config.tscol.name %} TIMESTAMP 
                            {%- elif col.name == config.tgtcol.name %} FLOAT 
                            {%- else %} {{ col.dataType }}
                            {%- endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{%- endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {%- endif %}
                    {% endfor %}
                )
            {% else %}
                CREATE OR REPLACE TABLE {{ this }}
                (
                    {% for col in source.columns %}
                        "{{ col.name }}" 
                        {%- if col.name == config.tscol.name %} TIMESTAMP 
                        {%- elif col.name == config.tgtcol.name %} FLOAT 
                        {%- else %} {{ col.dataType }}
                        {%- endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{%- endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
            {% endif %}
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
        run:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : ML Anomaly Detection == #}
            {# == Node Type Description    : This node creates a Anomaly Detection table  == #}


            {# INitialize anomaly model name #}

            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set anomaly_name = config.mname %}
            {% set result = ref_no_link(node.location.name, node.name) %}

            {%- set nsVariables = namespace(squotes="") -%}


            {# anomaly table truncated #}

            {{ stage('Truncate Anomaly Detection table') }}

            TRUNCATE IF EXISTS {{ this }}

            {# anomaly model created #}

            {{ stage('Anomaly Model') }}
            {% if config.Forcecreate%}

            CREATE OR REPLACE SNOWFLAKE.ML.ANOMALY_DETECTION
             {{ ref_no_link(node.location.name, anomaly_name) }}(
                INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound or col.anomaly or col.percentile or col.distance) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}            
                    {{ source.join }}
                    WHERE  "{{ config.tgtcol.name }}" IS NOT NULL
                '),
                {% if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}',
                TARGET_COLNAME => '{{ config.tgtcol.name }}',
            	{% if config.lcdata  %}LABEL_COLNAME => '{{ config.lcdata.name.lower() }}' {% else %} LABEL_COLNAME => '' {% endif %}
            )

            {% else %}
                        SHOW SNOWFLAKE.ML.ANOMALY_DETECTION LIKE '{{ anomaly_name }}' IN SCHEMA {{ result.split('.')[:2]|join('.') }}
            {% endif %}

            {# Anomaly data based on the model, including anomalous values, is inserted into the Anomaly table. #}

            {{ stage('Insert Anomaly data') }}
            BEGIN
            {% if config.uspdata %}
                CALL {{ ref_no_link(node.location.name, anomaly_name) }}!detect_anomalies(
                    INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT 
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound or col.anomaly or col.percentile or col.distance or col.lcdata) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}
                    {{ sources[-1].join }}
                '),
                {%if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}' ,
                TARGET_COLNAME => '{{ config.tgtcol.name }}'
                {% if config.cobject %},CONFIG_OBJECT => {'prediction_interval': {{ config.predictioninterval }}} {% endif %});


                INSERT INTO {{ this }}
                (
                    {%- for col in source.columns  %} 
                        "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                )
                SELECT 
                    {% for col in source.columns %}
                        {%- if config.multiseries and col.id == config.seriescol.id %}"SERIES"
                        {%- elif col.id == config.tscol.id %}"TS"
                        {%- elif col.id == config.tgtcol.id %}"Y"
                        {%- elif col.forecast or col.lower_bound or col.upper_bound or col.anomaly or col.percentile or col.distance %}"{{ col.name }}"
                        {%- else %}{{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- endif %}{%- if not loop.last %}, {%- endif %}
                    {% endfor %}
                FROM TABLE(RESULT_SCAN(-1)) RES;

            {% else %}
                CALL {{ ref_no_link(node.location.name, anomaly_name) }}!detect_anomalies(
                INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT 
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound or col.anomaly or col.percentile or col.distance) %}
                        {%- if col.name != config.lcdata.name %}
                            "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                        {%- endif %}
                    {%- endfor %}
                    {{ sources[-1].join }}
                '),
                {%if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}',
                TARGET_COLNAME => '{{ config.tgtcol.name }}'{% if config.cobject %},
                
                CONFIG_OBJECT => {'prediction_interval': {{ config.predictioninterval }}} {% endif %}
            );


                INSERT INTO {{ this }}
                (
                    {%- for col in columns %}
                    {%- if col.name != config.lcdata.name %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endif %}
                    {%- endfor %}
                )
                SELECT 
                {% for col in source.columns %}
                    {%- if col.name != config.lcdata.name %}
                        {%- if config.multiseries and col.id == config.seriescol.id %}"SERIES"
                        {%- elif col.id == config.tscol.id %}"TS"
                        {%- elif col.id == config.tgtcol.id %}"Y"
                        {%- elif col.forecast or col.lower_bound or col.upper_bound or col.anomaly or col.percentile or col.distance %}"{{ col.name }}"
                        {%- else %}{{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- endif %}{%- if not loop.last %}, {%- endif %}
                    {%- endif %}
                {% endfor %}
            FROM TABLE(RESULT_SCAN(-1)) RES;


            {% endif %}

            END
    name: Anomaly Detection 2.0
    version: 1
  StepType-262:
    id: "262"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Copy of ML FORECAST
        short: ML_FCSTS
        tagColor: 'blue'
        plural: ML Forecasts


        config:

        - groupName: Forecast Model Input
          items:

            - type: textBox
              displayName: 'Model Instance Name'
              attributeName: 'mname'
              isRequired: true

            - type: toggleButton
              displayName: 'Create Model'
              attributeName: 'Forcecreate'
              default: true
              
        # Toggle to determine if a single-series forecast or a multi-series forecast is to be created #

            - type: toggleButton
              displayName: 'Multi-Series Forecast'
              attributeName: 'multiseries'
              isRequired: false
              default: 'true'

        # For multiple time series models, the name of the column defining the multiple time series in input data #

            - type: columnDropdownSelector
              displayName: 'Series Column'
              attributeName: 'seriescol'
              isRequired: false
              enableIf: "{{ config.multiseries }}"

        # Name of the column containing the timestamps in input data #

            - type: columnDropdownSelector
              displayName: 'Timestamp Column'
              attributeName: 'tscol'
              isRequired: true

        # Name of the column containing the target (dependent value) in input data #

            - type: columnDropdownSelector
              displayName: 'Target Column'
              attributeName: 'tgtcol'
              isRequired: true


        # An OBJECT containing key-value pairs used to configure the forecast job #

            - type: toggleButton
              displayName: 'Config Object'
              attributeName: 'cobject'
              isRequired: false
              default: false

            - type: textBox
              displayName: 'Prediction Interval'
              attributeName: 'predictioninterval'
              enableIf: '{%- if config.cobject %}true{%- else %}false{%- endif %}'
              default: 'ex:0.80(float value)'

        # The time series to forecast #

            - type: toggleButton
              displayName: 'Series value'
              attributeName: 'series_value'
              isRequired: false
              enableIf: '{%- if config.multiseries  %}true{%- else %}false{%- endif %}' 

            - displayName: Enter the series value
              type: textBox
              attributeName: 'svalue'
              enableIf: '{%- if config.series_value and config.multiseries %}true{%- else %}false{%- endif %}'

        # Exogenous variable:additional features influencing the forecast #

            - type: toggleButton
              displayName: 'Exogenous Variables'
              attributeName: 'exvar'
              isRequired: false
              default: 'true'

            - displayName: Future-valued Exogenous data can be added by enabling the multi source toggle below 
              type: label
              enableIf: '{%- if config.exvar %}true{%- else %}false{%- endif %}'

            - displayName: Exogenous data source
              type: multisourceToggle
              enableIf: '{%- if config.exvar %}true{%- else %}false{%- endif %}'

        # Required for forecasts without exogenous variables.The number of steps ahead to forecast #

            - displayName: Days To Forecast
              attributeName: fcdays
              type: textBox
              enableIf: '{%- if not config.exvar %}true{%- else %}false{%- endif %}' 
              isRequired: false
              default: '30'


        systemColumns:
        - displayName: "FORECAST"
          attributeName: forecast
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
        - displayName: "LOWER_BOUND"
          attributeName: lower_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
        - displayName: "UPPER_BOUND"
          attributeName: upper_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
      templates:
        create:
          templateString: |-
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : ML Forecast == #}
            {# == Node Type Description    : This node creates a forecast table  == #}

            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'FORECAST_' ~ src_node.name %}

            {# Forecast table creation #}

            {{ stage('Create Forecast Table') }}

            CREATE OR REPLACE TABLE {{ this }}
            (
                {% for col in source.columns  %}
                    "{{ col.name }}" 
                    {%- if col.name == config.tscol.name %} TIMESTAMP 
                    {%- elif col.name == config.tgtcol.name %} FLOAT 
                    {%- else %} {{ col.dataType }}
                    {%- endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{%- endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
        run:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : ML Forecast == #}
            {# == Node Type Description    : This node creates a forecast table  == #}


            {# INitialize forecast model name #}

            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = config.mname %}
            {% set result = ref_no_link(node.location.name, node.name) %}

            {%- set nsVariables = namespace(squotes="") -%}

            {# Check series column datatype to determine if quoted required for series value #}



            {% if config.series_value %}
                    {% for col in source.columns  %} 
                        {% if col.id == config.seriescol.id %}
            			    {%if  (col.dataType | replace("0", "")
                | replace("1", "")
                | replace("2", "")
                | replace("3", "")
                | replace("4", "")
                | replace("5", "")
                | replace("6", "")
                | replace("7", "")
                | replace("8", "")
                | replace("9", "") |replace("(","")|replace(")",""))  in ('STRING','VARCHAR','CHAR','TEXT') %}
            				   {% set  nsVariables.squotes ="'" %}
            				{% else %}
            				   {% set  nsVariables.squotes = ""  %}
                                {{ col.dataType}}
            				{% endif %}
            			{% endif %}
                    {% endfor %}

            {% endif %}

            {{ stage('Model check') }}

            {% if not config.Forcecreate %}

             CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST(FORECASTING_PERIODS =>1);

             {% else %}

            select 'Model will be created'

            {% endif %}


            {# Forecast table truncated #}

            {{ stage('Truncate Forecast table') }}

            TRUNCATE IF EXISTS {{ this }}

            {# Initial training data inserted into forecast table #}

            {{ stage('Populate Forecast Table with Historical Data') }}

            {% if not config.exvar %}

            INSERT INTO {{ this }}
            (
                {%- for col in source.columns  %} 
                    "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
            )
            SELECT 
                {% for col in source.columns  %} 
                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            {{ source.join }}

            {% else %}

                   INSERT INTO {{ this }}
                  (
                   {%- for col in source.columns  %} 
                    "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                   {%- endfor %}
                   )

                    {% for source in sources %}
            		    SELECT 
               			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
                            {{ source.join }}
                         {% if not loop.last %}
            			   {% if node.isMultisource %}
            				UNION
            			   {% endif %}
                         {% endif %}
            	
            		{% endfor %}  

            {% endif %}


            {# Forecast model created #}

            {{ stage('Forecast Model Instance') }}

            {% if config.Forcecreate%}
            CREATE OR REPLACE SNOWFLAKE.ML.FORECAST
             {{ ref_no_link(node.location.name, forecast_name) }}(
                INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}            
                    FROM {{ this }}
                    WHERE  "{{ config.tgtcol.name }}" IS NOT NULL
                '),
                {% if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}',
                TARGET_COLNAME => '{{ config.tgtcol.name }}'
            )

            {% else %}

             SHOW SNOWFLAKE.ML.FORECAST LIKE '{{ forecast_name }}' IN SCHEMA {{ result.split('.')[:2]|join('.') }}


            {% endif %}

            {# Forecast data based on model with predicted values  is inserted into forecast table #}

            {{ stage('Insert Forecast data') }}
            BEGIN


            {% if config.exvar %}
                CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST(
                    INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT 
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}            
                    FROM {{ this }}
                    WHERE  "{{ config.tgtcol.name }}" IS NULL
                '),
                {%if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}' 
                {% if config.series_value %}, SERIES_VALUE => {{ nsVariables.squotes}}{{config.svalue}}{{nsVariables.squotes}}  :: Variant {% endif %}
                {% if config.cobject %},CONFIG_OBJECT => {'prediction_interval': {{ config.predictioninterval }}} {% endif %});


                UPDATE {{ this }} SRC
                SET 
                    {%- for col in columns if  col.forecast or col.lower_bound or col.upper_bound %}
                        "{{ col.name }}" = RES."{{ col.name }}" {%- if not loop.last %}, {%- endif %}
                    {%- endfor %}
                FROM TABLE(RESULT_SCAN(-1)) RES
                WHERE 
                    RES."TS" = SRC."{{ config.tscol.name }}"
                    {%- if config.multiseries  %}
                    AND RES."SERIES" = SRC."{{ config.seriescol.name }}"            
                    {%- endif %};


            {% else %}


                CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST(FORECASTING_PERIODS =>{{ config.fcdays }}
                {% if config.series_value %},SERIES_VALUE =>{{ nsVariables.squotes}}{{config.svalue}}{{nsVariables.squotes}}  :: Variant {% endif %}
                {% if config.cobject %},CONFIG_OBJECT => {'prediction_interval': {{ config.predictioninterval }}} {% endif %});


                INSERT INTO {{ this }}
                (
                    {%- for col in source.columns  %} 
                        "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                )
                SELECT 
                    {% for col in source.columns %}
                        {%- if config.multiseries and col.id == config.seriescol.id %}"SERIES"
                        {%- elif col.id == config.tscol.id %}"TS"
                        {%- elif col.id == config.tgtcol.id %}NULL
                        {%- elif col.forecast or col.lower_bound or col.upper_bound %}"{{ col.name }}"
                        {%- else %}{{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- endif %}{%- if not loop.last %}, {%- endif %}
                    {% endfor %}
                FROM TABLE(RESULT_SCAN(-1)) RES;
            {% endif %}

            END
    name: ML Forecast_mname
    version: 1
  StepType-263:
    id: "263"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |+
        capitalized: Copy of Copy of Anomaly Detection
        short: ML_AD
        tagColor: 'blue'
        plural: ML Anomaly Detections


        config:
         
        - groupName: Anomaly Model Input
          items:

            - type: textBox
              displayName: 'Model Instance Name'
              attributeName: 'mname'
              isRequired: true

            - type: toggleButton
              displayName: 'Create Model'
              attributeName: 'Forcecreate'
              default: true

            - type: toggleButton
              displayName: 'Multi-Series'
              attributeName: 'multiseries'
              isRequired: false
              default: false

            - type: columnDropdownSelector
              displayName: 'Series Column'
              attributeName: 'seriescol'
              isRequired: false
              enableIf: "{{ config.multiseries }}"

        # Name of the column containing the timestamps in input data #

            - type: columnDropdownSelector
              displayName: 'Timestamp Column'
              attributeName: 'tscol'
              isRequired: true

        # Name of the column containing the target (dependent value) in input data #

            - type: columnDropdownSelector
              displayName: 'Target Column'
              attributeName: 'tgtcol'
              isRequired: true



            - type: toggleButton
              displayName: 'Config Object'
              attributeName: 'cobject'
              isRequired: false
              default: false

            - type: textBox
              displayName: 'Prediction Interval'
              attributeName: 'predictioninterval'
              enableIf: '{%- if config.cobject %}true{%- else %}false{%- endif %}'
              default: 'ex:0.80(float value)'

        # Training an Anomaly Detection Model with Labeled Data #

            - type: toggleButton
              displayName: 'Supervised Data'
              attributeName: 'spdata'
              default: false
              enableIf: '{%-if config.uspdata %}false{%- else %}true{%- endif %}'

            - type: columnDropdownSelector
              displayName: 'Labeled Column'
              attributeName: 'lcdata'
              default: false
              enableIf: '{%-if config.spdata %}true{%- else %}false{%- endif %}'

        # Detecting Anomalies for a Single Time Series (Unsupervised) #

            - type: toggleButton
              displayName: 'Unsupervised Data'
              attributeName: 'uspdata'
              isRequired: false
              default: false
              enableIf: '{%-if config.spdata %}false{%- else %}true{%- endif %}'
              
         
            - displayName: Data that needs to be analyzed can be added by enabling the multi-source toggle below 
              type: label
              enableIf: '{%- if config.spdata or config.uspdata %}true{%- else %}false{%- endif %}'

            - type: multisourceToggle
              attributeName: 'mtoggle'
              default: false
              enableIf: '{%- if config.spdata or config.uspdata %}true{%- else %}false{%- endif %}'

            



        systemColumns:
        - displayName: "FORECAST"
          attributeName: forecast
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "LOWER_BOUND"
          attributeName: lower_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "UPPER_BOUND"
          attributeName: upper_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "IS_ANOMALY"
          attributeName: anomaly
          transform: ""
          dataType: BOOLEAN
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "PERCENTILE"
          attributeName: percentile
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'
        - displayName: "DISTANCE"
          attributeName: distance
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Anomaly Detection Model'



      templates:
        create:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : ML Anomaly Detection == #}
            {# == Node Type Description    : This node creates a Anomaly Detection table  == #}

            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set anomaly_name = 'AnomalyDetection_' ~ src_node.name %}

            {# Anomaly table creation #}

            {{ stage('Create Anomaly Detection Table') }}

            {% if config.spdata %}
                CREATE OR REPLACE TABLE {{ this }}
                (
                    {%- for col in columns %}
                            {%- if col.name != config.lcdata.name %}
                            "{{ col.name }}" 
                            {%- if col.name == config.tscol.name %} TIMESTAMP 
                            {%- elif col.name == config.tgtcol.name %} FLOAT 
                            {%- else %} {{ col.dataType }}
                            {%- endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{%- endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {%- endif %}
                    {% endfor %}
                )
            {% else %}
                CREATE OR REPLACE TABLE {{ this }}
                (
                    {% for col in source.columns %}
                        "{{ col.name }}" 
                        {%- if col.name == config.tscol.name %} TIMESTAMP 
                        {%- elif col.name == config.tgtcol.name %} FLOAT 
                        {%- else %} {{ col.dataType }}
                        {%- endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{%- endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
            {% endif %}
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
        run:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : ML Anomaly Detection == #}
            {# == Node Type Description    : This node creates a Anomaly Detection table  == #}


            {# INitialize anomaly model name #}

            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set anomaly_name = config.mname %}
            {% set result = ref_no_link(node.location.name, node.name) %}

            {%- set nsVariables = namespace(squotes="") -%}


            {# anomaly table truncated #}

            {{ stage('Truncate Anomaly Detection table') }}

            TRUNCATE IF EXISTS {{ this }}

            {# anomaly model created #}

            {{ stage('Model availability check', true, "sql", "create") }}
            DECLARE
                sqlDml1 STRING;
                record_count INT;
            BEGIN
                sqlDml1 := 'SHOW SNOWFLAKE.ML.ANOMALY_DETECTION LIKE ''Test 15'' IN SCHEMA "QUICKSTART"."ML_FUNCTIONS"';
                EXECUTE IMMEDIATE sqlDml1 INTO record_count;
                
                IF record_count = 0 THEN
                    RAISE EXCEPTION 'No records found in the model';
                END IF;
                
                RETURN '';
            END;


            {{ stage('Anomaly Model') }}
            {% if config.Forcecreate%}

            CREATE OR REPLACE SNOWFLAKE.ML.ANOMALY_DETECTION
             {{ ref_no_link(node.location.name, anomaly_name) }}(
                INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound or col.anomaly or col.percentile or col.distance) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}            
                    {{ source.join }}
                    WHERE  "{{ config.tgtcol.name }}" IS NOT NULL
                '),
                {% if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}',
                TARGET_COLNAME => '{{ config.tgtcol.name }}',
            	{% if config.lcdata  %}LABEL_COLNAME => '{{ config.lcdata.name.lower() }}' {% else %} LABEL_COLNAME => '' {% endif %}
            )

            {% else %}
                        SHOW SNOWFLAKE.ML.ANOMALY_DETECTION LIKE '{{ anomaly_name }}' IN SCHEMA {{ result.split('.')[:2]|join('.') }}
            {% endif %}

            {# Anomaly data based on the model, including anomalous values, is inserted into the Anomaly table. #}

            {{ stage('Insert Anomaly data') }}
            BEGIN
            {% if config.uspdata %}
                CALL {{ ref_no_link(node.location.name, anomaly_name) }}!detect_anomalies(
                    INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT 
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound or col.anomaly or col.percentile or col.distance or col.lcdata) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}
                    {{ sources[-1].join }}
                '),
                {%if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}' ,
                TARGET_COLNAME => '{{ config.tgtcol.name }}'
                {% if config.cobject %},CONFIG_OBJECT => {'prediction_interval': {{ config.predictioninterval }}} {% endif %});


                INSERT INTO {{ this }}
                (
                    {%- for col in source.columns  %} 
                        "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                )
                SELECT 
                    {% for col in source.columns %}
                        {%- if config.multiseries and col.id == config.seriescol.id %}"SERIES"
                        {%- elif col.id == config.tscol.id %}"TS"
                        {%- elif col.id == config.tgtcol.id %}"Y"
                        {%- elif col.forecast or col.lower_bound or col.upper_bound or col.anomaly or col.percentile or col.distance %}"{{ col.name }}"
                        {%- else %}{{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- endif %}{%- if not loop.last %}, {%- endif %}
                    {% endfor %}
                FROM TABLE(RESULT_SCAN(-1)) RES;

            {% else %}
                CALL {{ ref_no_link(node.location.name, anomaly_name) }}!detect_anomalies(
                INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT 
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound or col.anomaly or col.percentile or col.distance) %}
                        {%- if col.name != config.lcdata.name %}
                            "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                        {%- endif %}
                    {%- endfor %}
                    {{ sources[-1].join }}
                '),
                {%if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}',
                TARGET_COLNAME => '{{ config.tgtcol.name }}'{% if config.cobject %},
                
                CONFIG_OBJECT => {'prediction_interval': {{ config.predictioninterval }}} {% endif %}
            );


                INSERT INTO {{ this }}
                (
                    {%- for col in columns %}
                    {%- if col.name != config.lcdata.name %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endif %}
                    {%- endfor %}
                )
                SELECT 
                {% for col in source.columns %}
                    {%- if col.name != config.lcdata.name %}
                        {%- if config.multiseries and col.id == config.seriescol.id %}"SERIES"
                        {%- elif col.id == config.tscol.id %}"TS"
                        {%- elif col.id == config.tgtcol.id %}"Y"
                        {%- elif col.forecast or col.lower_bound or col.upper_bound or col.anomaly or col.percentile or col.distance %}"{{ col.name }}"
                        {%- else %}{{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- endif %}{%- if not loop.last %}, {%- endif %}
                    {%- endif %}
                {% endfor %}
            FROM TABLE(RESULT_SCAN(-1)) RES;


            {% endif %}

            END
    name: Copy of Anomaly Detection_Mname
    version: 1
  StepType-268:
    id: "268"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: cortex
        short: LLM_
        plural: llms
        tagColor: '#a332f0'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        - groupName: Cortex Package
          items:
          - displayName: Cortex Functions
            attributeName: cfunctions
            type: toggleButton
            default: false

          - displayName: SUMMARIZE
            attributeName: summarizefunction
            type: toggleButton
            default: false
            enableIf: '{% if config.cfunctions %} true {% else %} false {% endif %}'

          - displayName: 'Select Columns '
            type: tabular
            attributeName: pby
            columns:
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: partColName
               isRequired: true
            isRequired: false
            enableIf: '{% if config.summarizefunction %} true {% else %} false {% endif %}'

          - displayName: SENTIMENT
            attributeName: sentimentfunction
            type: toggleButton
            default: false
            enableIf: '{% if config.cfunctions %} true {% else %} false {% endif %}'

          - displayName: 'Select Columns '
            type: tabular
            attributeName: sby
            columns:
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: spartColName
               isRequired: true
            isRequired: false
            enableIf: '{% if config.sentimentfunction %} true {% else %} false {% endif %}'

          - displayName: TRANSLATE
            attributeName: translatefunction
            type: toggleButton
            default: false
            enableIf: '{% if config.cfunctions %} true {% else %} false {% endif %}'

          - type: tabular
            displayName: 'Select Columns'
            attributeName: tby
            columns:
              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: tpartColName         

              -  type: textBox
                 displayName: Translate from
                 attributeName: lanorder
                 default: "'From', 'To'"
                 
                 

            isRequired: false
            enableIf: '{% if config.translatefunction %} true {% else %} false {% endif %}'


          - displayName: EXTRACT ANSWER
            attributeName: extractfunction
            type: toggleButton
            default: false
            enableIf: '{% if config.cfunctions %} true {% else %} false {% endif %}'
         
         
          - type: tabular
            displayName: 'Select Columns'
            attributeName: exby
            columns:
              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: epartColName         

              -  type: textBox
                 displayName: Ask me a Question 
                 attributeName: askque
                 default: "what's the Question ?"
                        

            isRequired: false
            enableIf: '{% if config.extractfunction %} true {% else %} false {% endif %}'
            




            
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% endif %}
        run:
          templateString: |
            {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate  Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}


            {%- set sumcol = []  -%}
            {%- set senticol = []  -%}
            {%- set extractcol = []  -%}
            {%- set quecol = []  -%}
            {%- set translatecol = []  -%}
            {%- set langcol = []  -%}



            {% if config.summarizefunction %}
                {%- for i in config.pby.get('items') -%}
                    {% set sumcol = sumcol.append(i.partColName.name) %}
                {%- endfor %}
            {% endif %}

            {% if config.sentimentfunction %}
                {%- for i in config.sby.get('items') -%}
                    {% set senticol = senticol.append(i.spartColName.name) %}
                {%- endfor %}
            {% endif %}

            {% if config.translatefunction %}
                {%- for i in config.tby.get('items') -%}
                    {% set translatecol = translatecol.append(i.tpartColName.name) %}
            		{% set langcol = langcol.append(i.lanorder ) %}
                {%- endfor %}
            {% endif %}
            {% set seq = translatecol + langcol if translatecol is defined and langcol is defined else [] %}

            {% if config.extractfunction %}
                {%- for i in config.exby.get('items') -%}
                    {% set extractcol = extractcol.append(i.epartColName.name) %}
            		{% set quecol = quecol.append(i.askque ) %}
                {%- endfor %}
            {% endif %}
            {% set seq = extractcol + quecol if extractcol is defined and quecol is defined else [] %}


            SELECT
            {% for col in source.columns %}
                {% if col.name in sumcol %}
                    SNOWFLAKE.CORTEX.SUMMARIZE({{ get_source_transform(col) }}) AS "{{ col.name }}"
                {% elif col.name in senticol %}
                    SNOWFLAKE.CORTEX.SENTIMENT({{ get_source_transform(col) }}) AS "{{ col.name }}"	
            	{% elif col.name in translatecol %}
                    {% set col_index = translatecol.index(col.name) %}
            		SNOWFLAKE.CORTEX.TRANSLATE({{ get_source_transform(col) }}, {{ langcol[col_index] }}) AS "{{ col.name }}"
            		
            	{% elif col.name in extractcol %}
                    {% set col_index1 = extractcol.index(col.name) %}
            		SNOWFLAKE.CORTEX.EXTRACT_ANSWER({{ get_source_transform(col) }}, '''{{quecol[col_index1]}}''') AS "{{ col.name }}"
            		
                {% else %} 
                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                {% endif %}
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}




            {{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Cortex Functions
    version: 1
  StepType-270:
    id: "270"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Copy of Persistent Stage
    version: 1
  StepType-271:
    id: "271"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Cortex Functions 
        short: LLM_
        plural: llms
        tagColor: '#a332f0'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        - groupName: Cortex Package
          items:
          - displayName: SUMMARIZE
            attributeName: summarizefunction
            type: toggleButton
            default: false
            

          - displayName: 'Select Columns '
            type: tabular
            attributeName: pby
            columns:
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: partColName
               isRequired: true
            isRequired: false
            enableIf: '{% if config.summarizefunction %} true {% else %} false {% endif %}'

          - displayName: SENTIMENT
            attributeName: sentimentfunction
            type: toggleButton
            default: false
            

          - displayName: 'Select Columns '
            type: tabular
            attributeName: sby
            columns:
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: spartColName
               isRequired: true
            isRequired: false
            enableIf: '{% if config.sentimentfunction %} true {% else %} false {% endif %}'

          - displayName: TRANSLATE
            attributeName: translatefunction
            type: toggleButton
            default: false
            

          - type: tabular
            displayName: 'Select Columns'
            attributeName: tby
            columns:
              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: tpartColName
                 isRequired: true    

              -  type: textBox
                 displayName: Translate from
                 attributeName: lanorder
                 default: "'From', 'To'"
                 isRequired: true
                 
                 

            isRequired: false
            enableIf: '{% if config.translatefunction %} true {% else %} false {% endif %}'


          - displayName: EXTRACT ANSWER
            attributeName: extractfunction
            type: toggleButton
            default: false
            
          - displayName: Datatype for target column must be an array.
            type: label
            enableIf: '{%- if config.extractfunction %}true{%- else %}false{%- endif %}'
         
         
          - type: tabular
            displayName: 'Select Columns'
            attributeName: exby
            columns:
              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: epartColName 
                 isRequired: true       

              -  type: textBox
                 displayName: Ask me a Question 
                 attributeName: askque
                 default: "what''s the Question ?"
                 isRequired: true
                        

            isRequired: false
            enableIf: '{% if config.extractfunction %} true {% else %} false {% endif %}'
            




            
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% endif %}
        run:
          templateString: |
            {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate  Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}


            {%- set sumcol = []  -%}
            {%- set senticol = []  -%}
            {%- set extractcol = []  -%}
            {%- set quecol = []  -%}
            {%- set translatecol = []  -%}
            {%- set langcol = []  -%}



            {% if config.summarizefunction %}
                {%- for i in config.pby.get('items') -%}
                    {% set sumcol = sumcol.append(i.partColName.name) %}
                {%- endfor %}
            {% endif %}

            {% if config.sentimentfunction %}
                {%- for i in config.sby.get('items') -%}
                    {% set senticol = senticol.append(i.spartColName.name) %}
                {%- endfor %}
            {% endif %}

            {% if config.translatefunction %}
                {%- for i in config.tby.get('items') -%}
                    {% set translatecol = translatecol.append(i.tpartColName.name) %}
            		{% set langcol = langcol.append(i.lanorder ) %}
                {%- endfor %}
            {% endif %}
            {% set seq = translatecol + langcol if translatecol is defined and langcol is defined else [] %}

            {% if config.extractfunction %}
                {%- for i in config.exby.get('items') -%}
                    {% set extractcol = extractcol.append(i.epartColName.name) %}
            		{% set quecol = quecol.append(i.askque | escape) %}
                {%- endfor %}
            {% endif %}
            {% set seq = extractcol + quecol if extractcol is defined and quecol is defined else [] %}


            SELECT
            {% for col in source.columns %}
                {% if col.name in sumcol %}
                    SNOWFLAKE.CORTEX.SUMMARIZE({{ get_source_transform(col) }}) AS "{{ col.name }}"
                {% elif col.name in senticol %}
                    SNOWFLAKE.CORTEX.SENTIMENT({{ get_source_transform(col) }}) AS "{{ col.name }}"	
            	{% elif col.name in translatecol %}
                    {% set col_index = translatecol.index(col.name) %}
            		SNOWFLAKE.CORTEX.TRANSLATE({{ get_source_transform(col) }}, {{ langcol[col_index] }}) AS "{{ col.name }}"
            		
            	{% elif col.name in extractcol %}
                    {% set col_index1 = extractcol.index(col.name) %}
            		SNOWFLAKE.CORTEX.EXTRACT_ANSWER({{ get_source_transform(col) }}, '''{{quecol[col_index1]}}''') AS "{{ col.name }}"
            		
                {% else %} 
                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                {% endif %}
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}




            {{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Cortex Functions 1.0
    version: 1
  StepType-272:
    id: "272"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: CE
        short: TP
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true



          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
          

        - groupName: Contribution Explorer
          items:
          - displayName: CATEGORICAL DIMENSIONS
            attributeName: extractfunction
            type: toggleButton
            default: false
            isRequired: true
          - type: tabular
            displayName: 'Select Columns'
            attributeName: exby
            enableIf: '{%- if config.extractfunction %}true{%- else %}false{%- endif %}'
            columns:

              -  type: textBox
                 displayName: Pass Alias Name
                 attributeName: askque
                 isRequired: true
                 


              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: epartColName 
                 isRequired: true

                     

            isRequired: false

          - displayName: CONTINUOUS DIMENSIONS
            attributeName: continuous_dimensions
            type: toggleButton
            default: true
            isRequired: false
          - type: tabular
            displayName: 'Select Columns'
            attributeName: cexby
            enableIf: '{%- if config.continuous_dimensions %}true{%- else %}false{%- endif %}'
            columns:

              -  type: textBox
                 displayName: Pass Alias Name
                 attributeName: caskque
                 isRequired: true


              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: cepartColName 
                 isRequired: true       

            isRequired: false

          - type: columnDropdownSelector
            displayName: 'Metric Column'
            attributeName: 'metriccol'
            isRequired: true
            

          - type: columnDropdownSelector
            displayName: 'Label'
            attributeName: 'labelcol'
            isRequired: true
          
          - displayName: Order By
            attributeName: orderby
            type: toggleButton
            default: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"
          
          - type: tabular
            displayName: 'Sort column'
            attributeName: orderbycolumn
            columns:

              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: sortColName

              -  type: dropdownSelector
                 displayName: Sort Order
                 attributeName: sortOrder
                 default: desc
                 options:
                 - desc
                 - asc
               
            isRequired: true
            enableIf: "{% if config.orderby %} true {% else %} false {% endif %}"


        systemColumns:
        - displayName: "CONTRIBUTOR"
          attributeName: contributor
          transform: ""
          dataType: ARRAY
          placement: end
          description: 'Generated Contribution Explorer Model'
        - displayName: "METRIC_CONTROL"
          attributeName: metric_control
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated Contribution Explorer Model'
        - displayName: "METRIC_TEST"
          attributeName: metric_test
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated Contribution Explorer Model'
        - displayName: "SURPRISE"
          attributeName: surprise
          transform: ""
          dataType: BOOLEAN
          placement: end
          description: 'Generated Contribution Explorer Model'
        - displayName: "RELATIVE_CHANGE"
          attributeName: relative_change
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated Contribution Explorer Model'
        - displayName: "GROWTH_RATE"
          attributeName: growth_rate
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated Contribution Explorer Model'
        - displayName: "EXPECTED_METRIC_TEST"
          attributeName: expected_metric_test
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated Contribution Explorer Model'
        - displayName: "OVERALL_METRIC_CONTROL"
          attributeName: overall_metric_control
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated Contribution Explorer Model'  
        - displayName: "OVERALL_METRIC_TEST"
          attributeName: overall_metric_test
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated Contribution Explorer Model'
        - displayName: "OVERALL_GROWTH_RATE"
          attributeName: overall_growth_rate
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated Contribution Explorer Model'
        - displayName: "NEW_IN_TEST"
          attributeName: new_in_test
          transform: ""
          dataType: BOOLEAN
          placement: end
          description: 'Generated Contribution Explorer Model'
        - displayName: "MISSING_IN_TEST"
          attributeName: missing_in_test
          transform: ""
          dataType: BOOLEAN
          placement: end
          description: 'Generated Contribution Explorer Model'
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |
            {%- set sumcol = []  -%}
                {%- set senticol = []  -%}
                {%- set extractcol = []  -%}
            	{%- set cextractcol = []  -%}
                {%- set quecol = []  -%}
            	{%- set cquecol = []  -%}
                {%- set translatecol = []  -%}
                {%- set langcol = []  -%}
            {%- set SYSCOLUMNS = ['CONTRIBUTOR','METRIC_CONTROL','METRIC_TEST','SURPRISE','RELATIVE_CHANGE','GROWTH_RATE','EXPECTED_METRIC_TEST','OVERALL_METRIC_CONTROL',
                'OVERALL_METRIC_TEST','OVERALL_GROWTH_RATE','NEW_IN_TEST','MISSING_IN_TEST'] -%}
                
            {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	{{ stage('Select') }}
            		{% for source in sources %}
              {% if config.extractfunction %}
                {%- set extractcol = [] %}
                {%- set quecol = [] %}
                {%- for i in config.exby.get('items') %}
                    {% set _ = extractcol.append(i.epartColName.name) %}
                    {% set _ = quecol.append(i.askque) %}
                {%- endfor %}
              {% endif %}
              
              {% if config.continuous_dimensions %}
                {%- set cextractcol = [] %}
                {%- set cquecol = [] %}
                {%- for i in config.cexby.get('items') %}
                    {% set _ = cextractcol.append(i.cepartColName.name) %}
                    {% set _ = cquecol.append(i.caskque) %}
                {%- endfor %}
              {% endif %}
              
            WITH input AS (
             SELECT
            {% for col in source.columns %}
              {% if col.name not in extractcol and col.name not in cextractcol and col.name not in SYSCOLUMNS %}

                    {{ get_source_transform(col) }} AS "{{ col.name }}"{% if not loop.last %},{% endif %}
                {% endif %}
            {% endfor %}

            {% if  extractcol %}
                 {{ '{' }}
                {% for idx in range(0, extractcol|length) %}
                    '{{ quecol[idx] }}':{% for col in source.columns %}
                     {% if col.name == extractcol[idx] %}
                    {{get_source_transform(col) }}
                    {% endif %}
                    {% endfor %}{% if not loop.last %},{% endif %}
                {% endfor %}
                {{ '}' }} AS CATEGORICAL_DIMENSIONS
            {% endif %}

            {% if cextractcol %}
                , {{ '{' }}
                {% for cidx in range(0, cextractcol|length) %}
                    '{{ cquecol[cidx] }}': 
                    {% for col in source.columns %}
                        {% if col.name == cextractcol[cidx] %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                    {% endfor %}{% if not loop.last %},{% endif %}
                {% endfor %}
                {{ '}' }} AS CONTINUOUS_DIMENSIONS
            {% else %}
                { } AS CONTINUOUS_DIMENSIONS
            {% endif %}



            {{ source.join }}
            )
            SELECT res.* from input, TABLE(
              SNOWFLAKE.ML.TOP_INSIGHTS(
                input.CATEGORICAL_DIMENSIONS,
                input.CONTINUOUS_DIMENSIONS,
                CAST(input.{{config.metriccol.name}} AS FLOAT),
                input.{{config.labelcol.name}}
              )
              OVER (PARTITION BY 0)
            ) res
            {{ sortorder_by_colv() }}
            {% endfor %}


            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Contribution Explorer
    version: 1
  StepType-273:
    id: "273"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Copy of Stage
    version: 1
  StepType-275:
    id: "275"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Contribution Explorer
        short: CE
        plural: CE
        tagColor: '#c71585'

        config:

        - groupName: Contribution Explorer
          items:
          - displayName: CATEGORICAL DIMENSIONS
            attributeName: extractfunction
            type: toggleButton
            default: false
            isRequired: true
          - type: tabular
            displayName: 'Select Columns'
            attributeName: exby
            enableIf: '{%- if config.extractfunction %}true{%- else %}false{%- endif %}'
            columns:

              -  type: textBox
                 displayName: Categorical Column(Alias)
                 attributeName: askque
                 isRequired: true
                 


              -  type: columnDropdownSelector
                 displayName: Categorical Column
                 attributeName: epartColName 
                 isRequired: true

                     

            isRequired: false

          - displayName: CONTINUOUS DIMENSIONS
            attributeName: continuous_dimensions
            type: toggleButton
            default: false
            isRequired: false
          - type: tabular
            displayName: 'Select Columns'
            attributeName: cexby
            enableIf: '{%- if config.continuous_dimensions %}true{%- else %}false{%- endif %}'
            columns:

              -  type: textBox
                 displayName: Continuous column (Alias)
                 attributeName: caskque
                 isRequired: true


              -  type: columnDropdownSelector
                 displayName: Continuous Dimension column
                 attributeName: cepartColName 
                 isRequired: true       

            isRequired: false

          - type: columnDropdownSelector
            displayName: 'Metric Column'
            attributeName: 'metriccol'
            isRequired: true
            

          - type: columnDropdownSelector
            displayName: 'Label'
            attributeName: 'labelcol'
            isRequired: true

          - displayName: Filter Insights
            type: textBox
            attributeName: filterit
            default: "/*WHERE ABS(relative_change - 1) > 0.4*/"
            syntax: sql
            isRequired: false
          
          - displayName: Order By
            attributeName: orderby
            type: toggleButton
            default: false
          
          - type: tabular
            displayName: 'Sort column'
            attributeName: orderbycolumn
            columns:

              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: sortColName

              -  type: dropdownSelector
                 displayName: Sort Order
                 attributeName: sortOrder
                 default: desc
                 options:
                 - desc
                 - asc
               
            isRequired: true
            enableIf: "{% if config.orderby %} true {% else %} false {% endif %}"


        systemColumns:
        - displayName: "CONTRIBUTOR"
          attributeName: contributor
          transform: ""
          dataType: ARRAY
          placement: end
          description: 'Generated by Contribution Explorer Model'
        - displayName: "METRIC_CONTROL"
          attributeName: metric_control
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by Contribution Explorer Model'
        - displayName: "METRIC_TEST"
          attributeName: metric_test
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by Contribution Explorer Model'
        - displayName: "SURPRISE"
          attributeName: surprise
          transform: ""
          dataType: BOOLEAN
          placement: end
          description: 'Generated by Contribution Explorer Model'
        - displayName: "RELATIVE_CHANGE"
          attributeName: relative_change
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by Contribution Explorer Model'
        - displayName: "GROWTH_RATE"
          attributeName: growth_rate
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by Contribution Explorer Model'
        - displayName: "EXPECTED_METRIC_TEST"
          attributeName: expected_metric_test
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by Contribution Explorer Model'
        - displayName: "OVERALL_METRIC_CONTROL"
          attributeName: overall_metric_control
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by Contribution Explorer Model'  
        - displayName: "OVERALL_METRIC_TEST"
          attributeName: overall_metric_test
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by Contribution Explorer Model'
        - displayName: "OVERALL_GROWTH_RATE"
          attributeName: overall_growth_rate
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by Contribution Explorer Model'
        - displayName: "NEW_IN_TEST"
          attributeName: new_in_test
          transform: ""
          dataType: BOOLEAN
          placement: end
          description: 'Generated by Contribution Explorer Model'
        - displayName: "MISSING_IN_TEST"
          attributeName: missing_in_test
          transform: ""
          dataType: BOOLEAN
          placement: end
          description: 'Generated by Contribution Explorer Model'
      templates:
        create:
          templateString: |-
            {%- set sumcol = []  -%}
                {%- set senticol = []  -%}
                {%- set extractcol = []  -%}
            	{%- set cextractcol = []  -%}
                {%- set quecol = []  -%}
            	{%- set cquecol = []  -%}
                {%- set translatecol = []  -%}
                {%- set langcol = []  -%}
            {%- set SYSCOLUMNS = ['CONTRIBUTOR','METRIC_CONTROL','METRIC_TEST','SURPRISE','RELATIVE_CHANGE','GROWTH_RATE','EXPECTED_METRIC_TEST','OVERALL_METRIC_CONTROL',
                'OVERALL_METRIC_TEST','OVERALL_GROWTH_RATE','NEW_IN_TEST','MISSING_IN_TEST'] -%}
                
            	
            	
            {{- stage('Create View ') }}
            {% for source in sources %}
              {% if config.extractfunction %}
                {%- set extractcol = [] %}
                {%- set quecol = [] %}
                {%- for i in config.exby.get('items') %}
                    {% set _ = extractcol.append(i.epartColName.name) %}
                    {% set _ = quecol.append(i.askque) %}
                {%- endfor %}
              {% endif %}
              
              {% if config.continuous_dimensions %}
                {%- set cextractcol = [] %}
                {%- set cquecol = [] %}
                {%- for i in config.cexby.get('items') %}
                    {% set _ = cextractcol.append(i.cepartColName.name) %}
                    {% set _ = cquecol.append(i.caskque) %}
                {%- endfor %}
              {% endif %}
              
            CREATE OR REPLACE VIEW {{- ref_no_link(node.location.name, node.name) }} AS (
            WITH INPUT AS (
            SELECT
            {% for col in source.columns -%}
                {%- if col.name not in extractcol and col.name not in cextractcol and col.name not in SYSCOLUMNS -%}
                    {{- get_source_transform(col) -}} AS "{{ col.name }}"
                    {%- if not loop.last -%},
            {% endif -%}
                {%- endif -%}
            {% endfor -%}


            {%- if extractcol -%}
            {{ '{' -}}
            {% for idx in range(0, extractcol|length) -%}
                '{{ quecol[idx] }}':{%- for col in source.columns %}
                    {%- if col.name == extractcol[idx] -%}
                        {{- get_source_transform(col) }}
                    {%- endif -%}
                {%- endfor %}{%- if not loop.last %},{%- endif -%}
            {%- endfor -%}
            {{ '}' }} AS CATEGORICAL_DIMENSIONS,
            {% endif %}



            {%- if cextractcol -%}
                 {{ '{' -}}
                {% for cidx in range(0, cextractcol|length) -%}
                    '{{ cquecol[cidx] }}': {%- for col in source.columns %}
                        {%- if col.name == cextractcol[cidx] %}
                            {{- get_source_transform(col) -}}
                        {%- endif -%}
                        {%- endfor %}{%- if not loop.last %},{%- endif -%}
                {%- endfor -%}
                {{ '}' }} AS CONTINUOUS_DIMENSIONS
            {% else %}
                { } AS CONTINUOUS_DIMENSIONS
            {% endif %}

            {{- source.join }}
            )
            SELECT RESULT.* 
            FROM INPUT, TABLE(
              SNOWFLAKE.ML.TOP_INSIGHTS(
              INPUT.CATEGORICAL_DIMENSIONS,
              INPUT.CONTINUOUS_DIMENSIONS,
              CAST(INPUT.{{config.metriccol.name}} AS FLOAT),
              INPUT.{{config.labelcol.name}}
              )
              OVER (PARTITION BY 0)
            ) RESULT

            {% if config.filterit|length > 4 %}
               {{- config.filterit }}
               {{ sortorder_by_colv () -}})
            {% else %}

            {{ sortorder_by_colv () -}} )
            {% endif %}

            {% endfor %}
             
               
        run:
          templateString: ""
    name: Contribution Explorer 1.0000000
    version: 1
  StepType-277:
    id: "277"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: Copy of View2
    version: 1
  StepType-279:
    id: "279"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of Contribution Explorer
        short: CE
        plural: CE
        tagColor: '#c71585'

        config:
        - groupName: Contribution Explorer
          items:
          - type: materializationSelector
            options:
                - view
            default: view
            isRequired: true
            

          - displayName: CATEGORICAL DIMENSIONS
            attributeName: extractfunction
            type: toggleButton
            default: false
            isRequired: true
          - type: tabular
            displayName: 'Select Columns'
            attributeName: exby
            enableIf: '{%- if config.extractfunction %}true{%- else %}false{%- endif %}'
            columns:

              -  type: textBox
                 displayName: Categorical Column(Alias)
                 attributeName: askque
                 isRequired: true
                 


              -  type: columnDropdownSelector
                 displayName: Categorical Column
                 attributeName: epartColName 
                 isRequired: true

                     

            isRequired: false

          - displayName: CONTINUOUS DIMENSIONS
            attributeName: continuous_dimensions
            type: toggleButton
            default: false
            isRequired: false
          - type: tabular
            displayName: 'Select Columns'
            attributeName: cexby
            enableIf: '{%- if config.continuous_dimensions %}true{%- else %}false{%- endif %}'
            columns:

              -  type: textBox
                 displayName: Continuous column (Alias)
                 attributeName: caskque
                 isRequired: true


              -  type: columnDropdownSelector
                 displayName: Continuous Dimension column
                 attributeName: cepartColName 
                 isRequired: true       

            isRequired: false

          - type: columnDropdownSelector
            displayName: 'Metric Column'
            attributeName: 'metriccol'
            isRequired: true
            

          - type: columnDropdownSelector
            displayName: 'Label'
            attributeName: 'labelcol'
            isRequired: true

          - displayName: Filter Insights
            type: textBox
            attributeName: filterit
            default: "/*WHERE ABS(relative_change - 1) > 0.4*/"
            syntax: sql
            isRequired: false
          
          - displayName: Order By
            attributeName: orderby
            type: toggleButton
            default: false
          
          - type: tabular
            displayName: 'Sort column'
            attributeName: orderbycolumn
            columns:

              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: sortColName

              -  type: dropdownSelector
                 displayName: Sort Order
                 attributeName: sortOrder
                 default: desc
                 options:
                 - desc
                 - asc
               
            isRequired: true
            enableIf: "{% if config.orderby %} true {% else %} false {% endif %}"


        systemColumns:
        - displayName: "CONTRIBUTOR"
          attributeName: contributor
          transform: ""
          dataType: ARRAY
          placement: end
          description: 'Generated by Contribution Explorer Model'
        - displayName: "METRIC_CONTROL"
          attributeName: metric_control
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by Contribution Explorer Model'
        - displayName: "METRIC_TEST"
          attributeName: metric_test
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by Contribution Explorer Model'
        - displayName: "SURPRISE"
          attributeName: surprise
          transform: ""
          dataType: BOOLEAN
          placement: end
          description: 'Generated by Contribution Explorer Model'
        - displayName: "RELATIVE_CHANGE"
          attributeName: relative_change
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by Contribution Explorer Model'
        - displayName: "GROWTH_RATE"
          attributeName: growth_rate
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by Contribution Explorer Model'
        - displayName: "EXPECTED_METRIC_TEST"
          attributeName: expected_metric_test
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by Contribution Explorer Model'
        - displayName: "OVERALL_METRIC_CONTROL"
          attributeName: overall_metric_control
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by Contribution Explorer Model'  
        - displayName: "OVERALL_METRIC_TEST"
          attributeName: overall_metric_test
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by Contribution Explorer Model'
        - displayName: "OVERALL_GROWTH_RATE"
          attributeName: overall_growth_rate
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by Contribution Explorer Model'
        - displayName: "NEW_IN_TEST"
          attributeName: new_in_test
          transform: ""
          dataType: BOOLEAN
          placement: end
          description: 'Generated by Contribution Explorer Model'
        - displayName: "MISSING_IN_TEST"
          attributeName: missing_in_test
          transform: ""
          dataType: BOOLEAN
          placement: end
          description: 'Generated by Contribution Explorer Model'
      templates:
        create:
          templateString: |-
            {%- set sumcol = []  -%}
                {%- set senticol = []  -%}
                {%- set extractcol = []  -%}
            	{%- set cextractcol = []  -%}
                {%- set quecol = []  -%}
            	{%- set cquecol = []  -%}
                {%- set translatecol = []  -%}
                {%- set langcol = []  -%}
            {%- set SYSCOLUMNS = ['CONTRIBUTOR','METRIC_CONTROL','METRIC_TEST','SURPRISE','RELATIVE_CHANGE','GROWTH_RATE','EXPECTED_METRIC_TEST','OVERALL_METRIC_CONTROL',
                'OVERALL_METRIC_TEST','OVERALL_GROWTH_RATE','NEW_IN_TEST','MISSING_IN_TEST'] -%}
                
            	
            	
            {{- stage('Create View ') }}
            {% for source in sources %}
              {% if config.extractfunction %}
                {%- set extractcol = [] %}
                {%- set quecol = [] %}
                {%- for i in config.exby.get('items') %}
                    {% set _ = extractcol.append(i.epartColName.name) %}
                    {% set _ = quecol.append(i.askque) %}
                {%- endfor %}
              {% endif %}
              
              {% if config.continuous_dimensions %}
                {%- set cextractcol = [] %}
                {%- set cquecol = [] %}
                {%- for i in config.cexby.get('items') %}
                    {% set _ = cextractcol.append(i.cepartColName.name) %}
                    {% set _ = cquecol.append(i.caskque) %}
                {%- endfor %}
              {% endif %}
              
            CREATE OR REPLACE VIEW {{- ref_no_link(node.location.name, node.name) }} AS (
            WITH INPUT AS (
            SELECT
            {% for col in source.columns -%}
                {%- if col.name not in extractcol and col.name not in cextractcol and col.name not in SYSCOLUMNS %}
                    {{ get_source_transform(col) }} AS "{{ col.name }}",

                {%- endif -%}
            {% endfor -%}


            {%- if extractcol -%}
            {{ '{' -}}
            {% for idx in range(0, extractcol|length) -%}
                '{{ quecol[idx] }}':{%- for col in source.columns %}
                    {%- if col.name == extractcol[idx] -%}
                        {{- get_source_transform(col) }}
                    {%- endif -%}
                {%- endfor %}{%- if not loop.last %},{%- endif -%}
            {%- endfor -%}
            {{ '}' }} AS CATEGORICAL_DIMENSIONS,
            {% endif %}



            {%- if cextractcol -%}
                 {{ '{' -}}
                {% for cidx in range(0, cextractcol|length) -%}
                    '{{ cquecol[cidx] }}': {%- for col in source.columns %}
                        {%- if col.name == cextractcol[cidx] %}
                            {{- get_source_transform(col) -}}
                        {%- endif -%}
                        {%- endfor %}{%- if not loop.last %},{%- endif -%}
                {%- endfor -%}
                {{ '}' }} AS CONTINUOUS_DIMENSIONS
            {% else %}
                { } AS CONTINUOUS_DIMENSIONS
            {% endif %}

            {{- source.join }}
            )
            SELECT RESULT.* 
            FROM INPUT, TABLE(
              SNOWFLAKE.ML.TOP_INSIGHTS(
              INPUT.CATEGORICAL_DIMENSIONS,
              INPUT.CONTINUOUS_DIMENSIONS,
              CAST(INPUT.{{config.metriccol.name}} AS FLOAT),
              INPUT.{{config.labelcol.name}}
              )
              OVER (PARTITION BY 0)
            ) RESULT

            {% if config.filterit|length > 4 %}
               {{- config.filterit }}
               {{ sortorder_by_colv () -}})
            {% else %}

            {{ sortorder_by_colv () -}} )
            {% endif %}

            {% endfor %}
             
               
        run:
          templateString: ""
    name: Contribution Explorer 1.0
    version: 1
  StepType-280:
    id: "280"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: Copy of View
    version: 1
  StepType-282:
    id: "282"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Deferred Merge - Append Stream
        short: DM_VIEW
        tagColor: black
        plural: Deferred Merge

        deployStrategy: advanced


        config:
        - groupName: General Options
          items:
          - displayName: Development Mode
            attributeName: devMode
            type: toggleButton
            isRequired: true
            default: true

          - type: toggleButton
            attributeName: selectDistinct
            displayName: Distinct
            default: false
            enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"

          - type: toggleButton
            attributeName: groupByAll
            displayName: Group By All
            enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"
            default: false


        - groupName: Stream Options
          items:
          - displayName: Source Object
            attributeName: sourceType
            type: dropdownSelector
            default: Table
            options:
              - Table
              - External Table
              - View
            isRequired: false

          - displayName: Append Only Stream
            attributeName: appendOnly
            type: dropdownSelector
            default: "true"
            options:
              - "true"
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"

          - displayName: Show Initial Rows
            attributeName: initialRows
            type: toggleButton
            default: true
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"

          - displayName: Insert Only
            attributeName: insertOnly
            type: toggleButton
            default: false
            isRequired: true
            enableIf: "{% if config.sourceType == 'External Table' %} true {% else %} false {% endif %}"

        - groupName: Target Loading Options
          items:
          - type: tabular
            displayName: 'Table Key(s)'
            attributeName: partitionBy
            columns:
          
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: partColName
               isRequired: true
                
            isRequired: false

          - displayName: Record Versioning
            attributeName: recordVersioning
            type: dropdownSelector
            default: Datetime Column
            options:
              - Datetime Column
              - Date Column and Time Column
              - Numeric Column
            isRequired: true

          - type: tabular
            displayName: 'Timestamp or Sequence'
            attributeName: orderBy
            columns:
          
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: colName
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"
            
            -  type: dropdownSelector
               displayName: Sort Order
               attributeName: sortOrd
               default: desc
               options:
               - desc
               - asc
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"
            
            isRequired: false
            enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Date / Timestamp Columns'
            attributeName: orderByDateTime
            columns:
          
            -  type: columnDropdownSelector
               displayName: Date Column
               attributeName: colNameDate
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
            -  type: columnDropdownSelector
               displayName: Timestamp Column
               attributeName: colNameTimestamp
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
            -  type: dropdownSelector
               displayName: Sort Order
               attributeName: sortOrdDateTimestamp
               default: desc
               options:
               - desc
               - asc
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
            isRequired: false
            enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"

        - groupName: Target Row DML Operations
          items:
          - displayName: Column that Identifies DML Operations
            attributeName: dmlCol
            type: columnDropdownSelector
            isRequired: false

          - displayName: Include Value for Update
            attributeName: capUpdate
            type: toggleButton
            default: false
            isRequired: false
         
          - displayName: Insert Value
            attributeName: dmlInsert
            type: textBox
            default: I
            isRequired: true
         
          - displayName: Update Value
            attributeName: dmlUpdate
            type: textBox
            default: U
            isRequired: true
            enableIf: "{% if config.capUpdate == true %} true {% else %} false {% endif %}"
         
          - displayName: Delete Value
            attributeName: dmlDelete
            type: textBox
            default: D
            isRequired: true
         
        - groupName: Target Delete Options
          items:
          - displayName: Soft Delete
            attributeName: softDeleteFlag
            type: toggleButton
            default: false
            isRequired: false

          - displayName: Retain Last Non-Deleted Values
            attributeName: retainLastNonDeleteFlag
            type: toggleButton
            default: false
            isRequired: false
         
        - groupName: Target Clustering Options
          items:
          - displayName: Cluster Key
            attributeName: clsKey
            type: dropdownSelector
            default: None
            options:
              - None
              - Table Key
              - Primary Key from Source
              - Row Update Timestamp
              - Primary Key and Update Timestamp from Source
              - Update Timestamp and Primary Key from Source
              - Custom Cluster Columns
              - Custom Cluster Key
            isRequired: false

          - displayName: Custom Cluster Key (ex. col1, left(col2,3), coln)
            attributeName: clsKeyCus
            type: textBox
            isRequired: false
            enableIf: "{% if config.clsKey == 'Custom Cluster Key' %} true {% else %} false {% endif %}"
         
        - groupName: Scheduling Options
          items:
          - displayName: Scheduling Options
            attributeName: schedulingMode
            type: dropdownSelector
            default: Warehouse Task
            options:
              - Warehouse Task
              - Serverless Task
            isRequired: true

          - displayName: When Source Stream has Data Flag
            attributeName: flagSrcStream
            type: toggleButton
            isRequired: true

          - displayName: Select Warehouse on which to run task
            attributeName: whName
            type: textBox
            default: '<WAREHOUSE_NAME>'
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Warehouse Task' %} true {% else %} false {% endif %}"

          - displayName: Select initial serverless Warehouse size
            attributeName: serverlessSize
            type: dropdownSelector
            default: 'MEDIUM'
            options:
              - XSMALL
              - SMALL
              - MEDIUM
              - LARGE
              - XLARGE
              - XXLARGE
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Serverless Task' %} true {% else %} false {% endif %}"

          - displayName: Task Schedule
            attributeName: schedulePeriodOption
            type: dropdownSelector
            default: Minutes
            options:
              - Minutes
              - CRON
              - Predecessor
            isRequired: TRUE

          - displayName: Enter task schedule using minutes
            attributeName: schedulePeriod
            type: textBox
            default: '60'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Minutes' %} true {% else %} false {% endif %}"

          - displayName: Enter task schedule using CRON
            attributeName: scheduleCRON
            type: textBox
            default: '5 0-23 * * * America/Los_Angeles'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'CRON' %} true {% else %} false {% endif %}"

          - displayName: Enter predecessor task(s) seperated by a comma 
            attributeName: predTask
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

          - displayName: Enter root task name
            attributeName: rootTask
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

        - groupName: "Pre/Post SQL"
          items: 
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: 'DM_UPDATE_TIMESTAMP'
          transform: "current_timestamp::timestamp_ntz"
          dataType: timestamp
          placement: end
          attributeName: hmUpdTs
      templates:
        create:
          templateString: |
            {% if (currentState == undefined and desiredState != undefined) or (currentState != undefined and desiredState != undefined ) %}
            
                {# Set Namespace Variables #}
                {% set nsVariables = namespace(taskWhenRun="") %}
                {% set nsVariables = namespace(partition="") %}
                {% set nsVariables = namespace(orderBy="") %}
                {% set nsVariables = namespace(rowNumber="") %}
                {% set nsVariables = namespace(tableKey=[]) %}
                {% set nsVariables = namespace(sortKey=[]) %}
                {% set nsVariables = namespace(tableKeySort=[]) %}
                {% set nsVariables = namespace(hybridMergeSortFilter=[]) %}
            
                {# Source Object Location and Name #}
                {% set sourceStorageLocation = desiredState.sources[0].dependencies[0].node.location.name %}
                {% set sourceDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='database') | first %}
                {% set sourceSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='schema') | first %}
                {% set sourceTableName = desiredState.sources[0].dependencies[0].node.name %}
                {% set fullyQualifiedSourceTableName = '"' + sourceDatabaseName + '"."' + sourceSchemaName + '"."' + sourceTableName + '"' %}
            
                {# Target Stream Location and Name #}
                {% set streamTargetLocationName = desiredState.node.location.name %}
                {% set streamTargetDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = desiredState.node.name + '_STREAM' %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}
                {% set changesClauseAt = 'AT(stream => \'' + fullyQualifiedStreamName + '\')' %}
            
                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name).replace('DM_VIEW_','DM_TABLE_') %}
                {% set targetTableName = desiredState.node.name %}
            
                {% set targetTableColumnIds = desiredState.columns | map(attribute='id') | list %}
                {% set targetTableColumnNames = desiredState.columns | map(attribute='name') | list %}
                {% set targetTableMergeUpdateColumn = desiredState.columns | selectattr('hmUpdTs', 'defined') | map(attribute='name') | first %}
                {% set targetTableDmlIdentifierColumn = desiredState.config.dmlCol.name %}
                {% set targetTableDmlIdentifierColumnDatatype = desiredState.config.dmlCol.dataType %}
                {% set targetTableDmlIdentifierColumnQuotes = '"' + targetTableDmlIdentifierColumn + '"' %}
            
                {# Merge partition by and order by #}
                {% set targetTableColumnNamesUpdate = targetTableColumnNames | reject('in', desiredState.config.partitionBy.get('items') | map(attribute='partColName.name')) | list %}
            
                {% for i in desiredState.config.partitionBy.get('items') %}
                    {%- if loop.first -%}
                        {% set nsVariables.partition = '"' + i.partColName.name + '"' %}
                    {% else %}
                        {% set nsVariables.partition = nsVariables.partition + ', "' + i.partColName.name + '"' %}
                    {%- endif -%}
            
                    {% set targetTableColumnNamesUpdate = targetTableColumnNames | reject('in', i.partColName.name) | list %}
            
                {% endfor %}
            
                {% if desiredState.config.recordVersioning in ('Datetime Column','Numeric Column') %}
                    {% set datetimeNumericColSort = desiredState.config.orderBy.get('items') %}
                    {% set nsVariables.orderBy = '"' + datetimeNumericColSort  | map(attribute='colName.name') | first + '" ' + datetimeNumericColSort  | map(attribute='sortOrd') | first %}
                    {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
                    {% set nsVariables.hybridMergeSortFilter = 'alias."' + datetimeNumericColSort  | map(attribute='colName.name') | first + '"' %}
            
                    {%- set nsVariables.sortKey = desiredState.config.orderBy.get('items') %}
                    {% set nsVariables.sortKey = nsVariables.sortKey | map(attribute='colName.name') | list %}
                {% else %}
                    {% set dateTimeColSort = desiredState.config.orderByDateTime.get('items') %}
                    {% set dateCol = dateTimeColSort | map(attribute='colNameDate.name') | first %}
                    {% set timeCol = dateTimeColSort | map(attribute='colNameTimestamp.name') | first %}
                    {% set sortOrdDateTimestamp = dateTimeColSort | map(attribute='sortOrdDateTimestamp') | first %}
                    {% set nsVariables.orderBy = 'to_timestamp("' + dateCol + '" || ' + '\'T\'' + ' ||"' + timeCol + '") ' + sortOrdDateTimestamp %}
                    {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
                    {% set nsVariables.hybridMergeSortFilter = 'to_timestamp(alias."' + dateCol + '" || ' + '\'T\'' + ' || alias."' + timeCol + '")' %}
            
                    {%- set nsVariables.sortKey = desiredState.config.orderByDateTime.get('items') %}
                    {% set nsVariables.sortKey = nsVariables.sortKey | map(attribute='colNameDate.name') | list + nsVariables.sortKey | map(attribute='colNameTimestamp.name') | list %}
                {% endif %}
            
                {%- set nsVariables.tableKey = desiredState.config.partitionBy.get('items') %}
                {% set nsVariables.tableKey = nsVariables.tableKey | map(attribute='partColName.name') | list %}
            
                {%- set nsVariables.tableKeySort = nsVariables.tableKey + nsVariables.sortKey %}
            
                {# Stream Type #}
                {% if desiredState.config.sourceType == 'Table' %} 
                    {% set streamType = 'TABLE' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% elif desiredState.config.sourceType == 'External Table' %} 
                    {% set streamType = 'EXTERNAL TABLE' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% else %} 
                    {% set streamType = 'VIEW' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% endif %}
            
                {# DML Identifier Quoting #}
                {% if ((targetTableDmlIdentifierColumnDatatype in ('FLOAT','BOOLEAN')) or (targetTableDmlIdentifierColumnDatatype[:6] == 'NUMBER')) %}
                    {% set insertValue = desiredState.config.dmlInsert %}
                    {% set deleteValue = desiredState.config.dmlDelete %}
                    {% if desiredState.config.capUpdate == true %}
                        {% set updateValue = desiredState.config.dmlUpdate %}
                    {% endif %}
                {% else %}
                    {% set insertValue = "'" + desiredState.config.dmlInsert + "'" %}
                    {% set deleteValue = "'" + desiredState.config.dmlDelete + "'" %}
                    {% if desiredState.config.capUpdate == true %}
                        {% set updateValue = "'" + desiredState.config.dmlUpdate + "'" %}
                    {% endif %}
                {% endif %}
            
                {# Stream Append Behavior #}
                {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                        {% set streamAppendMode = 'APPEND_ONLY = TRUE' %}
                        {% set changesClauseMode = 'CHANGES(information => append_only)' %}
                {% else %}
                    {% set streamAppendMode = '' %}
                {% endif %}
            
                {# Stream Initial Row Behavior #}
                {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                    {% if desiredState.config.initialRows == true %} 
                        {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = TRUE' %}
                    {% else %} 
                        {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamInitialRowsMode = '' %}
                {% endif %}
            
                {# Stream Insert Only Behavior #}
                {% if streamType == 'EXTERNAL TABLE' %} 
                    {% if desiredState.config.insertOnly == true %} 
                        {% set streamInsertOnlyMode = 'INSERT_ONLY = TRUE' %}
                    {% else %} 
                        {% set streamInsertOnlyMode = 'INSERT_ONLY = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamInsertOnlyMode = '' %}
                {% endif %}
            
                {# Hybrid View Info #}
                {# View created in same schema as Target Table #}
                {% set targetHybridViewDatabase = targetTableDatabase %} 
                {% set targetHybridViewSchema = targetTableSchema %} 
                {% set targetHybridViewName = desiredState.node.name  %}
                {% set fullyQualifiedHybridViewName = targetHybridViewDatabase + '.' + targetHybridViewSchema + '."' + targetHybridViewName + '"' %}
            
                {# Task Info #}
                {% set taskName = desiredState.node.name + '_TASK'  %}
                {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 
            
                {# Task Type #}
                {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
                    {%- set taskType = 'WAREHOUSE = ' + desiredState.config.whName -%} 
                {%- else -%}
                    {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
                {%- endif -%}
            
                {# Schedule Type #}
                {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
                    {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
                {% elif desiredState.config.schedulePeriodOption == 'CRON' %}
                    {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON %}
                {%- else -%}
                    {%- set nsVariables.taskWhenRun = 'AFTER ' -%}
                    {%- set predecessorTasks = (desiredState.config.predTask).split(",") -%}
            
                    {%- for p in predecessorTasks -%}
                        {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + targetTableDatabase + '.' + targetTableSchema + '.' + p -%}
                        {%- if not loop.last -%} 
                            {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + ',' -%}
                        {%- endif %}
                    {% endfor %}    
                {%- endif -%}
            
                {# When Stream has data logic #}
                {%- if desiredState.config.flagSrcStream == true -%} 
                    {%- set streamPoll = "WHEN SYSTEM$STREAM_HAS_DATA('" + fullyQualifiedStreamName + "')" -%} 
                {%- endif -%}
            
                {{ stage('Create Stream') }}
                CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
                    ON {{ streamType }} {{ streamSourceObjectName }}
                    {{ streamAppendMode }}
                    {{ streamInitialRowsMode }}
                    {{ streamInsertOnlyMode }}
                    
                {{ stage('Create Target Table') }}
                CREATE OR REPLACE TABLE {{ fullyQualifiedTargetTableName }}
                    (
                    {%- for col in desiredState.columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    )
            
                {% if desiredState.config.initialRows == true %}
                    {{ stage('Target Table Initial Load') }}
                    INSERT INTO {{ fullyQualifiedTargetTableName }}
                    SELECT
                    {%- for col in desiredState.columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    FROM (SELECT {%- for col in desiredState.columns %}
                                    {% if col.name == targetTableMergeUpdateColumn %}
                                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                    {% else %}
                                        "{{ col.name }}" as "{{ col.name }}"
                                    {% endif %}
                                    {%- if not loop.last -%}, {% endif %}
                                {%- endfor %}
                                {% if desiredState.config.softDeleteFlag == false %}
                                    ,case when {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} then 0 else 1 end as load_flag
                                {% endif %}
                        FROM {{ fullyQualifiedStreamName }}
                        QUALIFY {{ nsVariables.rowNumber }} = 1)
                        {% if desiredState.config.softDeleteFlag == false %}
                            WHERE load_flag = 1
                        {% endif %}
                {% endif %}
            
                {{ stage('Create Hybrid View') }}
                CREATE OR REPLACE VIEW {{ fullyQualifiedHybridViewName }} (
                    {%- for col in desiredState.columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %} ) AS
            
                {% if desiredState.config.softDeleteFlag == true and desiredState.config.retainLastNonDeleteFlag == false %}
                    /* SOFT_DELETE = true RETAIN_LAST_NON_DELETE = false */
                    WITH delta AS 
                    (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1)
            
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    WHERE NOT EXISTS (SELECT 1
                                    FROM delta d
                                    WHERE {%- for col in (nsVariables.partition).split(",") %}
                                                a.{{ col }} = d.{{ col }}
                                                {% if not loop.last -%}AND {% endif %}
                                            {%- endfor %})
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM delta d
            
                {% elif desiredState.config.softDeleteFlag == false and desiredState.config.retainLastNonDeleteFlag == false %} 
                    /* SOFT_DELETE = false RETAIN_LAST_NON_DELETE = false */
                    WITH delta AS 
                    (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                ,
                        {%- endfor %}
                                CASE WHEN {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} THEN 0 ELSE 1 END AS LOAD_FLAG
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1)
            
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    WHERE NOT EXISTS (SELECT 1
                                    FROM delta d
                                    WHERE {%- for col in (nsVariables.partition).split(",") %}
                                                a.{{ col }} = d.{{ col }}
                                                {% if not loop.last -%}AND {% endif %}
                                            {%- endfor %})
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM delta d
                    WHERE LOAD_FLAG = 1
            
                {% elif desiredState.config.softDeleteFlag == true and desiredState.config.retainLastNonDeleteFlag == true %} 
                    /* SOFT_DELETE = true RETAIN_LAST_NON_DELETE = true */
                    WITH 
                    a AS (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} != {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),
            
                    d AS (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),
            
                    ods_d as (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  %} 
                                    d."{{ col.name }}" as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                    {{ deleteValue }} as "{{ col.name }}"
                                {% else %}
                                    a."{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    INNER JOIN (
                            SELECT {%- for col in nsVariables.tableKeySort %}
                                            "{{ col }}"
                                        {%- if not loop.last -%}, {% endif %}
                                    {%- endfor %}
                                FROM {{ fullyQualifiedSourceTableName }}
                                {{ changesClauseMode }}
                                {{ changesClauseAt }}
                                WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}) d
                    ON 
                    {% for col in nsVariables.tableKey %}
                        a."{{col}}" = d."{{col}}"
                        {%- if not loop.last -%} AND {% endif %}
                        {%- if loop.last -%} ) {% endif %}
                    {% endfor %}
            
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  %} 
                                    coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                    coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                {% else %}
                                    a."{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM a
                    LEFT OUTER JOIN d
                    ON 
                        {%- for col in nsVariables.tableKey %}
                                a."{{ col }}" = d."{{ col }}" AND
                        {%- endfor %}
                        {{ nsVariables.hybridMergeSortFilter | replace('alias','d') }} > {{ nsVariables.hybridMergeSortFilter | replace('alias','a') }}
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM ods_d
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                                {%- if not loop.last -%}, {% endif %}
                            {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} d
                    WHERE NOT EXISTS (
                        SELECT 1
                        FROM {{ fullyQualifiedSourceTableName }}
                        {{ changesClauseMode }}
                        {{ changesClauseAt }} a
                        WHERE 
                        {%- for col in nsVariables.tableKey %}
                                a."{{ col }}" = d."{{ col }}"
                            {%- if not loop.last -%} AND {% endif %}
                        {%- endfor %})
            
                {% elif desiredState.config.softDeleteFlag == false and desiredState.config.retainLastNonDeleteFlag == true %} 
                    /* SOFT_DELETE = false RETAIN_LAST_NON_DELETE = true */
                    WITH 
                    a AS (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                            {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} != {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),
            
                    d AS (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),
            
                    ods_d as (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  %} 
                                    d."{{ col.name }}" as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                    {{ deleteValue }} as "{{ col.name }}"
                                {% else %}
                                    a."{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    INNER JOIN (
                            SELECT {%- for col in nsVariables.tableKeySort %}
                                            "{{ col }}"
                                        {%- if not loop.last -%}, {% endif %}
                                    {%- endfor %}
                                FROM {{ fullyQualifiedSourceTableName }}
                                {{ changesClauseMode }}
                                {{ changesClauseAt }}
                                WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}) d
                    ON 
                    {% for col in nsVariables.tableKey %}
                        a."{{col}}" = d."{{col}}"
                        {%- if not loop.last -%} AND {% endif %}
                        {%- if loop.last -%} ) {% endif %}
                    {% endfor %}
            
                    SELECT 
                    {%- for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    FROM (
                        SELECT {%- for col in desiredState.columns %}
                                    {% if col.name == targetTableMergeUpdateColumn %}
                                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                    {% elif col.name in nsVariables.orderBy  %} 
                                        coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                    {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                        coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                    {% else %}
                                        a."{{ col.name }}" as "{{ col.name }}"
                                    {% endif %}
                                    ,
                            {%- endfor %}
                            case when coalesce(d.{{ targetTableDmlIdentifierColumnQuotes }}, a.{{ targetTableDmlIdentifierColumnQuotes }}) = {{ deleteValue }} then 0 else 1 end as load_flag
                        FROM a
                        LEFT OUTER JOIN d
                        ON 
                            {%- for col in nsVariables.tableKey %}
                                    a."{{ col }}" = d."{{ col }}" AND
                            {%- endfor %}
                            {{ nsVariables.hybridMergeSortFilter | replace('alias','d') }} > {{ nsVariables.hybridMergeSortFilter | replace('alias','a') }}
                        )
                        WHERE load_flag = 1
                        UNION ALL
                        SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                                {%- if not loop.last -%}, {% endif %}
                            {%- endfor %}
                        FROM ods_d
                        UNION ALL
                        SELECT {%- for col in desiredState.columns %}
                                    "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {%- endfor %}
                        FROM {{ fullyQualifiedTargetTableName }} d
                        WHERE NOT EXISTS (
                            SELECT 1
                            FROM {{ fullyQualifiedSourceTableName }}
                            {{ changesClauseMode }}
                            {{ changesClauseAt }} a
                            WHERE 
                            {%- for col in nsVariables.tableKey %}
                                    a."{{ col }}" = d."{{ col }}"
                                {%- if not loop.last -%} AND {% endif %}
                            {%- endfor %})
            
                {% endif %}
            
                {%- if desiredState.config.schedulePeriodOption == 'Predecessor' -%} 
                    {%- set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + desiredState.config.rootTask + '"' -%} 
                    {{ stage('Suspend Root Task', true, "sql") }}
                    ALTER TASK {{ fullyQualifiedRootTaskName }} SUSPEND
                {%- endif -%}
            
                {{ stage('Create Task') }}
                CREATE OR REPLACE TASK 
                    {{ fullyQualifiedTaskName }} 
                    {{ taskType}} 
                    {{ nsVariables.taskWhenRun }} 
                    {% if nsVariables.poll != 'WHEN ' %} {{ nsVariables.poll }} {% endif %}
                AS 
                MERGE INTO {{ fullyQualifiedTargetTableName }} a
                USING (SELECT
                {%- for col in desiredState.columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% else %}
                                "{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedStreamName }}
                {{ whereStreamFilter }}
                QUALIFY {{ nsVariables.rowNumber }} = 1) d
                ON 
                {% for col in nsVariables.tableKey %}
                    a."{{col}}" = d."{{col}}"
                    {%- if not loop.last -%} AND {% endif %}
                {% endfor %}
            
                WHEN NOT MATCHED and d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ insertValue }} THEN INSERT (
                    {% for col in desiredState.columns %}
                        a."{{ col.name }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                    )
                VALUES (
                    {% for col in desiredState.columns %}
                        d."{{ col.name }}"
                        {% if not loop.last %}, {%- endif -%}
                    {%- endfor -%}
                    )
                {% if desiredState.config.capUpdate == true %}
                    WHEN NOT MATCHED and d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ updateValue }} THEN INSERT (
                        {% for col in desiredState.columns %}
                            a."{{ col.name }}"
                            {% if not loop.last %}, {% endif -%}
                        {%- endfor -%}
                        )
                    VALUES (
                        {% for col in desiredState.columns %}
                            d."{{ col.name }}"
                            {% if not loop.last %}, {%- endif -%}
                        {%- endfor -%}
                        )
                {% endif %}
                WHEN NOT MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} AND /* softDeleteFlag True */ {{ desiredState.config.softDeleteFlag }} = True THEN INSERT (
                    {% for col in desiredState.columns %}
                        a."{{ col.name }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                    )
                VALUES (
                    {% for col in desiredState.columns %}
                        d."{{ col.name }}"
                        {% if not loop.last %}, {%- endif -%}
                    {%- endfor -%}
                    )
                {% if desiredState.config.capUpdate == true %}
                    /* Update DML value selected */
                    WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ updateValue }} THEN UPDATE SET
                        {% for col in targetTableColumnNamesUpdate %}
                            a."{{ col }}" = d."{{ col }}"
                            {% if not loop.last %}, {% endif -%}
                        {%- endfor -%}
                {% endif %}
                WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ insertValue }} THEN UPDATE SET
                    {% for col in targetTableColumnNamesUpdate %}
                        a."{{ col }}" = d."{{ col }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                {% if desiredState.config.softDeleteFlag == true %}
                    /* Soft Delete */
                    WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    THEN UPDATE SET
                        {% for col in (targetTableColumnNamesUpdate) %}
                            {% if (col in (targetTableMergeUpdateColumn, targetTableDmlIdentifierColumn)) or col in (nsVariables.sortKey) %}
                                a."{{ col }}" = d."{{ col }}"
                                {% if not loop.last %}, {% endif -%}
                            {% endif %}
                        {%- endfor -%}
                {% else %}
                    /* Hard Delete */
                    WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    THEN DELETE
                {% endif %}
            
                {%- if desiredState.config.schedulePeriodOption != 'Predecessor' -%} 
                    {{ stage('Resume Task', true, "sql") }}
                    ALTER TASK {{ fullyQualifiedTaskName }} RESUME;
                {%- endif -%}
            
            {% elif currentState != undefined and desiredState == undefined %}
            
                {# Target Stream Location and Name #}
                {% set streamTargetLocationName = currentState.node.location.name %}
                {% set streamTargetDatabaseName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = currentState.node.name + '_STREAM' %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}
            
                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(currentState.node.location.name, currentState.node.name).replace('DM_VIEW_','DM_TABLE_') %}
                {% set targetTableName = currentState.node.name %}
            
                {# Hybrid View Info #}
                {# View created in same schema as Target Table #}
                {% set targetHybridViewDatabase = targetTableDatabase %} 
                {% set targetHybridViewSchema = targetTableSchema %} 
                {% set targetHybridViewName = currentState.node.name  %}
                {% set fullyQualifiedHybridViewName = targetHybridViewDatabase + '.' + targetHybridViewSchema + '."' + targetHybridViewName + '"' %}
            
                {# Task Info #}
                {% set taskName = currentState.node.name + '_TASK'  %}
                {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 
            
                {{ stage('Drop Stream') }}
                DROP STREAM IF EXISTS {{ fullyQualifiedStreamName }}
            
                {{ stage('Drop Table') }}
                DROP TABLE IF EXISTS {{ fullyQualifiedTargetTableName }}
            
                {{ stage('Drop View') }}
                DROP VIEW IF EXISTS {{ fullyQualifiedHybridViewName }}
            
                {%- if currentState.config.schedulingPeriodOption == 'Predecessor' -%} 
                {{ stage('Suspend Root Task', true, "sql") }}
                    ALTER TASK IF EXISTS {{ fullyQualifiedRootTaskName }} SUSPEND
                {{ stage('Drop Current Task', true, "sql") }}
                    DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                {%- else -%}
                {{ stage('Drop Current Task', true, "sql") }}
                    DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                {%- endif -%}
            
            {%- else -%}
            
                {{ stage('Nothing to do.') }}
                select 1 = 0
            
            {% endif %}
        run:
          templateString: ""
    name: Deferred Merge - Append Stream
    version: 1
  StepType-286:
    id: "286"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Deferred Merge - Append Stream
        short: DM_VIEW
        tagColor: black
        plural: Deferred Merge

        deployStrategy: advanced


        config:
        - groupName: General Options
          items:
          - displayName: Development Mode
            attributeName: devMode
            type: toggleButton
            isRequired: true
            default: true


        - groupName: Stream Options
          items:
          - displayName: Source Object
            attributeName: sourceType
            type: dropdownSelector
            default: Table
            options:
              - Table
              - External Table
              - View
            isRequired: false



          - displayName: Show Initial Rows
            attributeName: initialRows
            type: toggleButton
            default: true
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"

          - displayName: Redeployment Behavior
            attributeName: redeploymentBehavior
            type: dropdownSelector
            default: Create At Existing Stream
            options:
               - Create or Replace
               - Create If Not Exists
               - Create At Existing Stream
            isRequired: true


          

          - displayName: Insert Only
            attributeName: insertOnly
            type: toggleButton
            default: false
            isRequired: true
            enableIf: "{% if config.sourceType == 'External Table' %} true {% else %} false {% endif %}"

        - groupName: Target Loading Options
          items:
          - type: tabular
            displayName: 'Table Key(s)'
            attributeName: partitionBy
            columns:
          
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: partColName
               isRequired: true
                
            isRequired: false

          - displayName: Record Versioning
            attributeName: recordVersioning
            type: dropdownSelector
            default: Datetime Column
            options:
              - Datetime Column
              - Date Column and Time Column
              - Numeric Column
            isRequired: true

          - type: tabular
            displayName: 'Timestamp or Sequence'
            attributeName: orderBy
            columns:
          
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: colName
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"
            
            -  type: dropdownSelector
               displayName: Sort Order
               attributeName: sortOrd
               default: desc
               options:
               - desc
               - asc
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"
            
            isRequired: false
            enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Date / Timestamp Columns'
            attributeName: orderByDateTime
            columns:
          
            -  type: columnDropdownSelector
               displayName: Date Column
               attributeName: colNameDate
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
            -  type: columnDropdownSelector
               displayName: Timestamp Column
               attributeName: colNameTimestamp
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
            -  type: dropdownSelector
               displayName: Sort Order
               attributeName: sortOrdDateTimestamp
               default: desc
               options:
               - desc
               - asc
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
            isRequired: false
            enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"

        - groupName: Target Row DML Operations
          items:
          - displayName: Column that Identifies DML Operations
            attributeName: dmlCol
            type: columnDropdownSelector
            isRequired: false

          - displayName: Include Value for Update
            attributeName: capUpdate
            type: toggleButton
            default: false
            isRequired: false
         
          - displayName: Insert Value
            attributeName: dmlInsert
            type: textBox
            default: I
            isRequired: true
         
          - displayName: Update Value
            attributeName: dmlUpdate
            type: textBox
            default: U
            isRequired: true
            enableIf: "{% if config.capUpdate == true %} true {% else %} false {% endif %}"
         
          - displayName: Delete Value
            attributeName: dmlDelete
            type: textBox
            default: D
            isRequired: true
         
        - groupName: Target Delete Options
          items:
          - displayName: Soft Delete
            attributeName: softDeleteFlag
            type: toggleButton
            default: false
            isRequired: false

          - displayName: Retain Last Non-Deleted Values
            attributeName: retainLastNonDeleteFlag
            type: toggleButton
            default: false
            isRequired: false
         
        - groupName: Target Clustering Options
          items:

            # Cluster Key-Determine if a node is to be clustered or not #
          
          - type: toggleButton
            attributeName: clusterKey
            displayName: Cluster Key
            default: false
            isRequired: false

          - type: toggleButton
            attributeName: clusterKeyExpressions
            displayName: Allow Expressions in Cluster Key
            default: false
            isRequired: true
            enableIf: "{% if config.clusterKey %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfig
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnName
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and not config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfigExpressions
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnNameExpressions
               isRequired: false
          
            -  type: textBox
               displayName: Expression
               attributeName: sqlExpression
               default: "ex. trunc(<column_name>, -5)"
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

         
        - groupName: Scheduling Options
          items:
          - displayName: Scheduling Options
            attributeName: schedulingMode
            type: dropdownSelector
            default: Warehouse Task
            options:
              - Warehouse Task
              - Serverless Task
            isRequired: true

          - displayName: When Source Stream has Data Flag
            attributeName: flagSrcStream
            type: toggleButton
            isRequired: true

          - displayName: Select Warehouse on which to run task
            attributeName: whName
            type: textBox
            default: '<WAREHOUSE_NAME>'
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Warehouse Task' %} true {% else %} false {% endif %}"

          - displayName: Select initial serverless Warehouse size
            attributeName: serverlessSize
            type: dropdownSelector
            default: 'MEDIUM'
            options:
              - XSMALL
              - SMALL
              - MEDIUM
              - LARGE
              - XLARGE
              - XXLARGE
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Serverless Task' %} true {% else %} false {% endif %}"

          - displayName: Task Schedule
            attributeName: schedulePeriodOption
            type: dropdownSelector
            default: Minutes
            options:
              - Minutes
              - CRON
              - Predecessor
            isRequired: TRUE

          - displayName: Enter task schedule using minutes
            attributeName: schedulePeriod
            type: textBox
            default: '60'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Minutes' %} true {% else %} false {% endif %}"

          - displayName: Enter task schedule using CRON
            attributeName: scheduleCRON
            type: textBox
            default: '5 0-23 * * * America/Los_Angeles'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'CRON' %} true {% else %} false {% endif %}"

          - displayName: Enter predecessor task(s) seperated by a comma 
            attributeName: predTask
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

          - displayName: Enter root task name
            attributeName: rootTask
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"


        systemColumns:
        - displayName: 'DM_UPDATE_TIMESTAMP'
          transform: "current_timestamp::timestamp_ntz"
          dataType: timestamp
          placement: end
          attributeName: hmUpdTs
      templates:
        create:
          templateString: |
            {% if (currentState == undefined and desiredState != undefined) or (currentState != undefined and desiredState != undefined ) %}
            
                {# Set Namespace Variables #}
                {% set nsVariables = namespace(taskWhenRun="") %}
                {% set nsVariables = namespace(partition="") %}
                {% set nsVariables = namespace(orderBy="") %}
                {% set nsVariables = namespace(rowNumber="") %}
                {% set nsVariables = namespace(tableKey=[]) %}
                {% set nsVariables = namespace(sortKey=[]) %}
                {% set nsVariables = namespace(tableKeySort=[]) %}
                {% set nsVariables = namespace(hybridMergeSortFilter=[]) %}
            
                
            
                {# Source Object Location and Name #}
                {% set sourceStorageLocation = desiredState.sources[0].dependencies[0].node.location.name %}
                {% set sourceDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='database') | first %}
                {% set sourceSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='schema') | first %}
                {% set sourceTableName = desiredState.sources[0].dependencies[0].node.name %}
                {% set fullyQualifiedSourceTableName = '"' + sourceDatabaseName + '"."' + sourceSchemaName + '"."' + sourceTableName + '"' %}
                {% set nsVariables = namespace(poll="WHEN ") %}
            
                 
            
                {# Target Stream Location and Name #}
                {% set streamTargetLocationName = desiredState.node.location.name %}
                {% set streamTargetDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = desiredState.node.name + '_STREAM' %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}
                {% set changesClauseAt = 'AT(stream => \'' + fullyQualifiedStreamName + '\')' %}
            
                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name).replace('DM_VIEW_','DM_TABLE_') %}
                {% set targetTableName = desiredState.node.name %}
            
                {% set targetTableColumnIds = desiredState.columns | map(attribute='id') | list %}
                {% set targetTableColumnNames = desiredState.columns | map(attribute='name') | list %}
                {% set targetTableMergeUpdateColumn = desiredState.columns | selectattr('hmUpdTs', 'defined') | map(attribute='name') | first %}
                {% set targetTableDmlIdentifierColumn = desiredState.config.dmlCol.name %}
                {% set targetTableDmlIdentifierColumnDatatype = desiredState.config.dmlCol.dataType %}
                {% set targetTableDmlIdentifierColumnQuotes = '"' + targetTableDmlIdentifierColumn + '"' %}
            
            
                {% if desiredState.config.clusterKey == true %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}
            
                            {%- set nsVariables = namespace(clusterValues=[]) %}
            
                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}
            
                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
            
                        {% else %}
            
                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}
            
                            {%- set nsVariables = namespace(clusterValues=[]) %}
            
                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}
            
                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
            
                        {% endif %}
                    {% endif %}
            
                {# Merge partition by and order by #}
                {% set targetTableColumnNamesUpdate = targetTableColumnNames | reject('in', desiredState.config.partitionBy.get('items') | map(attribute='partColName.name')) | list %}
            
                {% for i in desiredState.config.partitionBy.get('items') %}
                    {%- if loop.first -%}
                        {% set nsVariables.partition = '"' + i.partColName.name + '"' %}
                    {% else %}
                        {% set nsVariables.partition = nsVariables.partition + ', "' + i.partColName.name + '"' %}
                    {%- endif -%}
            
                    {% set targetTableColumnNamesUpdate = targetTableColumnNames | reject('in', i.partColName.name) | list %}
            
                {% endfor %}
            
                {% if desiredState.config.recordVersioning in ('Datetime Column','Numeric Column') %}
                    {% set datetimeNumericColSort = desiredState.config.orderBy.get('items') %}
                    {% set nsVariables.orderBy = '"' + datetimeNumericColSort  | map(attribute='colName.name') | first + '" ' + datetimeNumericColSort  | map(attribute='sortOrd') | first %}
                    {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
                    {% set nsVariables.hybridMergeSortFilter = 'alias."' + datetimeNumericColSort  | map(attribute='colName.name') | first + '"' %}
                    {%- set nsVariables.sortKey = desiredState.config.orderBy.get('items') %}
                    {% set nsVariables.sortKey = nsVariables.sortKey | map(attribute='colName.name') | list %}
                {% else %}
                    {% set dateTimeColSort = desiredState.config.orderByDateTime.get('items') %}
                    {% set dateCol = dateTimeColSort | map(attribute='colNameDate.name') | first %}
                    {% set timeCol = dateTimeColSort | map(attribute='colNameTimestamp.name') | first %}
                    {% set sortOrdDateTimestamp = dateTimeColSort | map(attribute='sortOrdDateTimestamp') | first %}
                    {% set nsVariables.orderBy = 'to_timestamp("' + dateCol + '" || ' + '\'T\'' + ' ||"' + timeCol + '") ' + sortOrdDateTimestamp %}
                    {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
                    {% set nsVariables.hybridMergeSortFilter = 'to_timestamp(alias."' + dateCol + '" || ' + '\'T\'' + ' || alias."' + timeCol + '")' %}
            
                    {%- set nsVariables.sortKey = desiredState.config.orderByDateTime.get('items') %}
                    {% set nsVariables.sortKey = nsVariables.sortKey | map(attribute='colNameDate.name') | list + nsVariables.sortKey | map(attribute='colNameTimestamp.name') | list %}
                {% endif %}
            
                {%- set nsVariables.tableKey = desiredState.config.partitionBy.get('items') %}
                {% set nsVariables.tableKey = nsVariables.tableKey | map(attribute='partColName.name') | list %}
            
                {%- set nsVariables.tableKeySort = nsVariables.tableKey + nsVariables.sortKey %}
            
                {# Stream Type #}
                {% if desiredState.config.sourceType == 'Table' %} 
                    {% set streamType = 'TABLE' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% elif desiredState.config.sourceType == 'External Table' %} 
                    {% set streamType = 'EXTERNAL TABLE' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% else %} 
                    {% set streamType = 'VIEW' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% endif %}
            
                {# DML Identifier Quoting #}
                {% if ((targetTableDmlIdentifierColumnDatatype in ('FLOAT','BOOLEAN')) or (targetTableDmlIdentifierColumnDatatype[:6] == 'NUMBER')) %}
                    {% set insertValue = desiredState.config.dmlInsert %}
                    {% set deleteValue = desiredState.config.dmlDelete %}
                    {% if desiredState.config.capUpdate == true %}
                        {% set updateValue = desiredState.config.dmlUpdate %}
                    {% endif %}
                {% else %}
                    {% set insertValue = "'" + desiredState.config.dmlInsert + "'" %}
                    {% set deleteValue = "'" + desiredState.config.dmlDelete + "'" %}
                    {% if desiredState.config.capUpdate == true %}
                        {% set updateValue = "'" + desiredState.config.dmlUpdate + "'" %}
                    {% endif %}
                {% endif %}
            
                {# Stream Append Behavior #}
                {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                        {% set streamAppendMode = 'APPEND_ONLY = TRUE' %}
                        {% set changesClauseMode = 'CHANGES(information => append_only)' %}
                {% else %}
                    {% set streamAppendMode = '' %}
                {% endif %}
            
                {# Stream Initial Row Behavior #}
                {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                    {% if desiredState.config.initialRows == true %} 
                        {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = TRUE' %}
                    {% else %} 
                        {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamInitialRowsMode = '' %}
                {% endif %}
            
                {# Stream Insert Only Behavior #}
                {% if streamType == 'EXTERNAL TABLE' %} 
                    {% if desiredState.config.insertOnly == true %} 
                        {% set streamInsertOnlyMode = 'INSERT_ONLY = TRUE' %}
                    {% else %} 
                        {% set streamInsertOnlyMode = 'INSERT_ONLY = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamInsertOnlyMode = '' %}
                {% endif %}
                {# Hybrid View Info #}
                {# View created in same schema as Target Table #}
                {% set targetHybridViewDatabase = targetTableDatabase %} 
                {% set targetHybridViewSchema = targetTableSchema %} 
                {% set targetHybridViewName = desiredState.node.name  %}
                {% set fullyQualifiedHybridViewName = targetHybridViewDatabase + '.' + targetHybridViewSchema + '."' + targetHybridViewName + '"' %}
            
                {# Task Info #}
                {% set taskName = desiredState.node.name + '_TASK'  %}
                {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 
            
                {# Task Type #}
                {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
                    {%- set taskType = 'WAREHOUSE = ' + desiredState.config.whName -%} 
                {%- else -%}
                    {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
                {%- endif -%}
            
                {# Schedule Type #}
                {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
                    {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
                {% elif desiredState.config.schedulePeriodOption == 'CRON' %}
                    {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON + "'" %}
                {%- else -%}
                    {%- set nsVariables.taskWhenRun = 'AFTER ' -%}
                    {%- set predecessorTasks = (desiredState.config.predTask).split(",") -%}
            
                    {%- for p in predecessorTasks -%}
                        {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + targetTableDatabase + '.' + targetTableSchema + '.' + p -%}
                        {%- if not loop.last -%} 
                            {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + ',' -%}
                        {%- endif %}
                    {% endfor %}    
                {%- endif -%}
            
               
            
            
                {% if currentState == undefined or desiredState.config.redeploymentBehavior == 'Create or Replace' %}
                    {{ stage('Create Stream', true, "sql", "alter") }}
                    CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
                        ON {{ streamType }} {{ streamSourceObjectName }}
                        {{ streamAppendMode }}
                        {{ streamInitialRowsMode }}
                        {{ streamInsertOnlyMode }}
            
                {% elif currentState != undefined and desiredState.config.redeploymentBehavior == 'Create If Not Exists'%}
                    {{ stage('Re-Create Stream at existing offset', true, "sql", "alter") }}
                    CREATE STREAM IF NOT EXISTS {{ fullyQualifiedStreamName }}
                        ON {{ streamType }} {{ streamSourceObjectName }}
                        {{ streamAppendMode }}
                        {{ streamInitialRowsMode }}
                        {{ streamInsertOnlyMode }}
            
                {% elif currentState != undefined and desiredState.config.redeploymentBehavior == 'Create At Existing Stream'%}
                    {{ stage('Re-Create Stream at existing offset', true, "sql", "alter") }}
                    CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
                        ON {{ streamType }} {{ streamSourceObjectName }}
                        AT(STREAM => '{{ fullyQualifiedStreamName }}');
            
                {% else %}
                    {{ stage('Unknown state.', true, "sql", "alter") }}
                    select 1 = 0
                {% endif %}
            
                   
               
                    
                {{ stage('Create Target Table') }}
                CREATE OR REPLACE TABLE {{ fullyQualifiedTargetTableName }}
                    (
                    {%- for col in desiredState.columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    )
                    {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}
                    {% if desiredState.config.clusterKey == true %}
                        {{ stage('Apply Table Clustering', true, "sql", "create") }}
                        ALTER TABLE {{fullyQualifiedTargetTableName }} {{ nsVariables.finalClusterKey }}
            
                        {{ stage('Resume Recluster Table', true, "sql", "create") }}
                        ALTER TABLE {{ fullyQualifiedTargetTableName }} RESUME RECLUSTER
                    {% endif %}
            
            
            
            
                {% if desiredState.config.initialRows == true %}
                    
                    {{ stage('Target Table Initial Load') }}
                    INSERT INTO {{ fullyQualifiedTargetTableName }}
                    SELECT
                    {%- for col in desiredState.columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    FROM (SELECT {%- for col in desiredState.columns %}
                                    {% if col.name == targetTableMergeUpdateColumn %}
                                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                    {% else %}
                                        "{{ col.name }}" as "{{ col.name }}"
                                    {% endif %}
                                    {%- if not loop.last -%}, {% endif %}
                                {%- endfor %}
                                {% if desiredState.config.softDeleteFlag == false %}
                                    ,case when {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} then 0 else 1 end as load_flag
                                {% endif %}
                        FROM {{ fullyQualifiedStreamName }}
                        QUALIFY {{ nsVariables.rowNumber }} = 1)
                        {% if desiredState.config.softDeleteFlag == false %}
                            WHERE load_flag = 1
                        {% endif %}
                {% endif %}
                {{ stage('Create Hybrid View') }}
                CREATE OR REPLACE VIEW {{ fullyQualifiedHybridViewName }} (
                    {%- for col in desiredState.columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %} ) AS
            
                {% if desiredState.config.softDeleteFlag == true and desiredState.config.retainLastNonDeleteFlag == false %}
                    /* SOFT_DELETE = true RETAIN_LAST_NON_DELETE = false */
                    WITH delta AS 
                    (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1)
            
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    WHERE NOT EXISTS (SELECT 1
                                    FROM delta d
                                    WHERE {%- for col in (nsVariables.partition).split(",") %}
                                                a.{{ col }} = d.{{ col }}
                                                {% if not loop.last -%}AND {% endif %}
                                            {%- endfor %})
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM delta d
            
                {% elif desiredState.config.softDeleteFlag == false and desiredState.config.retainLastNonDeleteFlag == false %} 
                    /* SOFT_DELETE = false RETAIN_LAST_NON_DELETE = false */
                    WITH delta AS 
                    (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                ,
                        {%- endfor %}
                                CASE WHEN {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} THEN 0 ELSE 1 END AS LOAD_FLAG
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1)
            
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    WHERE NOT EXISTS (SELECT 1
                                    FROM delta d
                                    WHERE {%- for col in (nsVariables.partition).split(",") %}
                                                a.{{ col }} = d.{{ col }}
                                                {% if not loop.last -%}AND {% endif %}
                                            {%- endfor %})
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM delta d
                    WHERE LOAD_FLAG = 1
            
                {% elif desiredState.config.softDeleteFlag == true and desiredState.config.retainLastNonDeleteFlag == true %} 
                    /* SOFT_DELETE = true RETAIN_LAST_NON_DELETE = true */
                    WITH 
                    a AS (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} != {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),
            
                    d AS (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),
            
                    ods_d as (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  %} 
                                    d."{{ col.name }}" as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                    {{ deleteValue }} as "{{ col.name }}"
                                {% else %}
                                    a."{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    INNER JOIN (
                            SELECT {%- for col in nsVariables.tableKeySort %}
                                            "{{ col }}"
                                        {%- if not loop.last -%}, {% endif %}
                                    {%- endfor %}
                                FROM {{ fullyQualifiedSourceTableName }}
                                {{ changesClauseMode }}
                                {{ changesClauseAt }}
                                WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}) d
                    ON 
                    {% for col in nsVariables.tableKey %}
                        a."{{col}}" = d."{{col}}"
                        {%- if not loop.last -%} AND {% endif %}
                        {%- if loop.last -%} ) {% endif %}
                    {% endfor %}
            
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  %} 
                                    coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                    coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                {% else %}
                                    a."{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM a
                    LEFT OUTER JOIN d
                    ON 
                        {%- for col in nsVariables.tableKey %}
                                a."{{ col }}" = d."{{ col }}" AND
                        {%- endfor %}
                        {{ nsVariables.hybridMergeSortFilter | replace('alias','d') }} > {{ nsVariables.hybridMergeSortFilter | replace('alias','a') }}
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM ods_d
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                                {%- if not loop.last -%}, {% endif %}
                            {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} d
                    WHERE NOT EXISTS (
                        SELECT 1
                        FROM {{ fullyQualifiedSourceTableName }}
                        {{ changesClauseMode }}
                        {{ changesClauseAt }} a
                        WHERE 
                        {%- for col in nsVariables.tableKey %}
                                a."{{ col }}" = d."{{ col }}"
                            {%- if not loop.last -%} AND {% endif %}
                        {%- endfor %})
            
                {% elif desiredState.config.softDeleteFlag == false and desiredState.config.retainLastNonDeleteFlag == true %} 
                    /* SOFT_DELETE = false RETAIN_LAST_NON_DELETE = true */
                    WITH 
                    a AS (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                            {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} != {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),
            
                    d AS (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),
            
                    ods_d as (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  %} 
                                    d."{{ col.name }}" as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                    {{ deleteValue }} as "{{ col.name }}"
                                {% else %}
                                    a."{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    INNER JOIN (
                            SELECT {%- for col in nsVariables.tableKeySort %}
                                            "{{ col }}"
                                        {%- if not loop.last -%}, {% endif %}
                                    {%- endfor %}
                                FROM {{ fullyQualifiedSourceTableName }}
                                {{ changesClauseMode }}
                                {{ changesClauseAt }}
                                WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}) d
                    ON 
                    {% for col in nsVariables.tableKey %}
                        a."{{col}}" = d."{{col}}"
                        {%- if not loop.last -%} AND {% endif %}
                        {%- if loop.last -%} ) {% endif %}
                    {% endfor %}
            
                    SELECT 
                    {%- for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    FROM (
                        SELECT {%- for col in desiredState.columns %}
                                    {% if col.name == targetTableMergeUpdateColumn %}
                                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                    {% elif col.name in nsVariables.orderBy  %} 
                                        coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                    {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                        coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                    {% else %}
                                        a."{{ col.name }}" as "{{ col.name }}"
                                    {% endif %}
                                    ,
                            {%- endfor %}
                            case when coalesce(d.{{ targetTableDmlIdentifierColumnQuotes }}, a.{{ targetTableDmlIdentifierColumnQuotes }}) = {{ deleteValue }} then 0 else 1 end as load_flag
                        FROM a
                        LEFT OUTER JOIN d
                        ON 
                            {%- for col in nsVariables.tableKey %}
                                    a."{{ col }}" = d."{{ col }}" AND
                            {%- endfor %}
                            {{ nsVariables.hybridMergeSortFilter | replace('alias','d') }} > {{ nsVariables.hybridMergeSortFilter | replace('alias','a') }}
                        )
                        WHERE load_flag = 1
                        UNION ALL
                        SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                                {%- if not loop.last -%}, {% endif %}
                            {%- endfor %}
                        FROM ods_d
                        UNION ALL
                        SELECT {%- for col in desiredState.columns %}
                                    "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {%- endfor %}
                        FROM {{ fullyQualifiedTargetTableName }} d
                        WHERE NOT EXISTS (
                            SELECT 1
                            FROM {{ fullyQualifiedSourceTableName }}
                            {{ changesClauseMode }}
                            {{ changesClauseAt }} a
                            WHERE 
                            {%- for col in nsVariables.tableKey %}
                                    a."{{ col }}" = d."{{ col }}"
                                {%- if not loop.last -%} AND {% endif %}
                            {%- endfor %})
            
                {% endif %}
            {% endif %}	
                
            {% if desiredState.config.devMode == false %}
            
                 
                
            
                {%- if desiredState.config.schedulePeriodOption == 'Predecessor' -%} 
                    {%- set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + desiredState.config.rootTask + '"' -%} 
                    {{ stage('Suspend Root Task', true, "sql") }}
                    ALTER TASK {{ fullyQualifiedRootTaskName }} SUSPEND
                {%- endif -%}
            
                {% if desiredState.config.flagSrcStream == true %}
                    {%- if nsVariables.poll == 'WHEN ' -%}
                        {% set nsVariables.poll = nsVariables.poll + 'SYSTEM$STREAM_HAS_DATA (\'' + fullyQualifiedStreamName + '\') '  %}
                        {%- endif -%}
                {% endif -%}  
                
                {{ stage('Create Task', true, "sql", "alter") }}
                CREATE OR REPLACE TASK 
                            {{ fullyQualifiedTaskName }} 
                            {{ taskType}}
                            {{ nsVariables.taskWhenRun }}
                            {% if nsVariables.poll != 'WHEN ' %} {{ nsVariables.poll }} {% endif %} 
                            
                AS 
                MERGE INTO {{ fullyQualifiedTargetTableName }} a
                USING (SELECT
                {%- for col in desiredState.columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% else %}
                                "{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedStreamName }}
                {{ whereStreamFilter }}
                QUALIFY {{ nsVariables.rowNumber }} = 1) d
                ON 
                {% for col in nsVariables.tableKey %}
                    a."{{col}}" = d."{{col}}"
                    {%- if not loop.last -%} AND {% endif %}
                {% endfor %}
            
                WHEN NOT MATCHED and d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ insertValue }} THEN INSERT (
                    {% for col in desiredState.columns %}
                        a."{{ col.name }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                    )
                VALUES (
                    {% for col in desiredState.columns %}
                        d."{{ col.name }}"
                        {% if not loop.last %}, {%- endif -%}
                    {%- endfor -%}
                    )
                {% if desiredState.config.capUpdate == true %}
                    WHEN NOT MATCHED and d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ updateValue }} THEN INSERT (
                        {% for col in desiredState.columns %}
                            a."{{ col.name }}"
                            {% if not loop.last %}, {% endif -%}
                        {%- endfor -%}
                        )
                    VALUES (
                        {% for col in desiredState.columns %}
                            d."{{ col.name }}"
                            {% if not loop.last %}, {%- endif -%}
                        {%- endfor -%}
                        )
                {% endif %}
                WHEN NOT MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} AND /* softDeleteFlag True */ {{ desiredState.config.softDeleteFlag }} = True THEN INSERT (
                    {% for col in desiredState.columns %}
                        a."{{ col.name }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                    )
                VALUES (
                    {% for col in desiredState.columns %}
                        d."{{ col.name }}"
                        {% if not loop.last %}, {%- endif -%}
                    {%- endfor -%}
                    )
                {% if desiredState.config.capUpdate == true %}
                    /* Update DML value selected */
                    WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ updateValue }} THEN UPDATE SET
                        {% for col in targetTableColumnNamesUpdate %}
                            a."{{ col }}" = d."{{ col }}"
                            {% if not loop.last %}, {% endif -%}
                        {%- endfor -%}
                {% endif %}
                WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ insertValue }} THEN UPDATE SET
                    {% for col in targetTableColumnNamesUpdate %}
                        a."{{ col }}" = d."{{ col }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                {% if desiredState.config.softDeleteFlag == true %}
                    /* Soft Delete */
                    WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    THEN UPDATE SET
                        {% for col in (targetTableColumnNamesUpdate) %}
                            {% if (col in (targetTableMergeUpdateColumn, targetTableDmlIdentifierColumn)) or col in (nsVariables.sortKey) %}
                                a."{{ col }}" = d."{{ col }}"
                                {% if not loop.last %}, {% endif -%}
                            {% endif %}
                        {%- endfor -%}
                {% else %}
                    /* Hard Delete */
                    WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    THEN DELETE
                {% endif %}
            
                {%- if desiredState.config.schedulePeriodOption != 'Predecessor' -%} 
                    {{ stage('Resume Task', true, "sql") }}
                    ALTER TASK {{ fullyQualifiedTaskName }} RESUME;
                {%- endif -%}
            
            {% elif currentState != undefined and desiredState == undefined %}
            
                {# Target Stream Location and Name #}
                {% set streamTargetLocationName = currentState.node.location.name %}
                {% set streamTargetDatabaseName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = currentState.node.name + '_STREAM' %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}
            
                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(currentState.node.location.name, currentState.node.name).replace('DM_VIEW_','DM_TABLE_') %}
                {% set targetTableName = currentState.node.name %}
            
                {# Hybrid View Info #}
                {# View created in same schema as Target Table #}
                {% set targetHybridViewDatabase = targetTableDatabase %} 
                {% set targetHybridViewSchema = targetTableSchema %} 
                {% set targetHybridViewName = currentState.node.name  %}
                {% set fullyQualifiedHybridViewName = targetHybridViewDatabase + '.' + targetHybridViewSchema + '."' + targetHybridViewName + '"' %}
            
                {# Task Info #}
                {% set taskName = currentState.node.name + '_TASK'  %}
                {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 
            
                {{ stage('Drop Stream') }}
                DROP STREAM IF EXISTS {{ fullyQualifiedStreamName }}
            
                {{ stage('Drop Table') }}
                DROP TABLE IF EXISTS {{ fullyQualifiedTargetTableName }}
            
                {{ stage('Drop View') }}
                DROP VIEW IF EXISTS {{ fullyQualifiedHybridViewName }}
            
                {%- if currentState.config.schedulingPeriodOption == 'Predecessor' -%} 
                {{ stage('Suspend Root Task', true, "sql") }}
                    ALTER TASK IF EXISTS {{ fullyQualifiedRootTaskName }} SUSPEND
                {{ stage('Drop Current Task', true, "sql") }}
                    DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                {%- else -%}
                {{ stage('Drop Current Task', true, "sql") }}
                    DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                {%- endif -%}
            
            {%- else -%}
            
                {{ stage('Task will be created once the Development Togggle is Disabled.') }}
                select 1 = 0
            
            {% endif %}
            
            
        run:
          templateString: |
            {% if (currentState == undefined and desiredState != undefined) or (currentState != undefined and desiredState != undefined ) %}
            
                {# Set Namespace Variables #}
                {% set nsVariables = namespace(taskWhenRun="") %}
                {% set nsVariables = namespace(partition="") %}
                {% set nsVariables = namespace(orderBy="") %}
                {% set nsVariables = namespace(rowNumber="") %}
                {% set nsVariables = namespace(tableKey=[]) %}
                {% set nsVariables = namespace(sortKey=[]) %}
                {% set nsVariables = namespace(tableKeySort=[]) %}
                {% set nsVariables = namespace(hybridMergeSortFilter=[]) %}
            
                {# Source Object Location and Name #}
                {% set sourceStorageLocation = desiredState.sources[0].dependencies[0].node.location.name %}
                {% set sourceDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='database') | first %}
                {% set sourceSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='schema') | first %}
                {% set sourceTableName = desiredState.sources[0].dependencies[0].node.name %}
                {% set fullyQualifiedSourceTableName = '"' + sourceDatabaseName + '"."' + sourceSchemaName + '"."' + sourceTableName + '"' %}
            
                {# Target Stream Location and Name #}
                {% set streamTargetLocationName = desiredState.node.location.name %}
                {% set streamTargetDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = desiredState.node.name + '_STREAM' %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}
                {% set changesClauseAt = 'AT(stream => \'' + fullyQualifiedStreamName + '\')' %}
            
                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name).replace('DM_VIEW_','DM_TABLE_') %}
                {% set targetTableName = desiredState.node.name %}
            
                {% set targetTableColumnIds = desiredState.columns | map(attribute='id') | list %}
                {% set targetTableColumnNames = desiredState.columns | map(attribute='name') | list %}
                {% set targetTableMergeUpdateColumn = desiredState.columns | selectattr('hmUpdTs', 'defined') | map(attribute='name') | first %}
                {% set targetTableDmlIdentifierColumn = desiredState.config.dmlCol.name %}
                {% set targetTableDmlIdentifierColumnDatatype = desiredState.config.dmlCol.dataType %}
                {% set targetTableDmlIdentifierColumnQuotes = '"' + targetTableDmlIdentifierColumn + '"' %}
            
                {# Merge partition by and order by #}
                {% set targetTableColumnNamesUpdate = targetTableColumnNames | reject('in', desiredState.config.partitionBy.get('items') | map(attribute='partColName.name')) | list %}
            
                {% for i in desiredState.config.partitionBy.get('items') %}
                    {%- if loop.first -%}
                        {% set nsVariables.partition = '"' + i.partColName.name + '"' %}
                    {% else %}
                        {% set nsVariables.partition = nsVariables.partition + ', "' + i.partColName.name + '"' %}
                    {%- endif -%}
            
                    {% set targetTableColumnNamesUpdate = targetTableColumnNames | reject('in', i.partColName.name) | list %}
            
                {% endfor %}
            
                {% if desiredState.config.recordVersioning in ('Datetime Column','Numeric Column') %}
                    {% set datetimeNumericColSort = desiredState.config.orderBy.get('items') %}
                    {% set nsVariables.orderBy = '"' + datetimeNumericColSort  | map(attribute='colName.name') | first + '" ' + datetimeNumericColSort  | map(attribute='sortOrd') | first %}
                    {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
                    {% set nsVariables.hybridMergeSortFilter = 'alias."' + datetimeNumericColSort  | map(attribute='colName.name') | first + '"' %}
            
                    {%- set nsVariables.sortKey = desiredState.config.orderBy.get('items') %}
                    {% set nsVariables.sortKey = nsVariables.sortKey | map(attribute='colName.name') | list %}
                {% else %}
                    {% set dateTimeColSort = desiredState.config.orderByDateTime.get('items') %}
                    {% set dateCol = dateTimeColSort | map(attribute='colNameDate.name') | first %}
                    {% set timeCol = dateTimeColSort | map(attribute='colNameTimestamp.name') | first %}
                    {% set sortOrdDateTimestamp = dateTimeColSort | map(attribute='sortOrdDateTimestamp') | first %}
                    {% set nsVariables.orderBy = 'to_timestamp("' + dateCol + '" || ' + '\'T\'' + ' ||"' + timeCol + '") ' + sortOrdDateTimestamp %}
                    {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
                    {% set nsVariables.hybridMergeSortFilter = 'to_timestamp(alias."' + dateCol + '" || ' + '\'T\'' + ' || alias."' + timeCol + '")' %}
            
                    {%- set nsVariables.sortKey = desiredState.config.orderByDateTime.get('items') %}
                    {% set nsVariables.sortKey = nsVariables.sortKey | map(attribute='colNameDate.name') | list + nsVariables.sortKey | map(attribute='colNameTimestamp.name') | list %}
                {% endif %}
            
                {%- set nsVariables.tableKey = desiredState.config.partitionBy.get('items') %}
                {% set nsVariables.tableKey = nsVariables.tableKey | map(attribute='partColName.name') | list %}
            
                {%- set nsVariables.tableKeySort = nsVariables.tableKey + nsVariables.sortKey %}
            
                {# Stream Type #}
                {% if desiredState.config.sourceType == 'Table' %} 
                    {% set streamType = 'TABLE' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% elif desiredState.config.sourceType == 'External Table' %} 
                    {% set streamType = 'EXTERNAL TABLE' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% else %} 
                    {% set streamType = 'VIEW' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% endif %}
            
                {# DML Identifier Quoting #}
                {% if ((targetTableDmlIdentifierColumnDatatype in ('FLOAT','BOOLEAN')) or (targetTableDmlIdentifierColumnDatatype[:6] == 'NUMBER')) %}
                    {% set insertValue = desiredState.config.dmlInsert %}
                    {% set deleteValue = desiredState.config.dmlDelete %}
                    {% if desiredState.config.capUpdate == true %}
                        {% set updateValue = desiredState.config.dmlUpdate %}
                    {% endif %}
                {% else %}
                    {% set insertValue = "'" + desiredState.config.dmlInsert + "'" %}
                    {% set deleteValue = "'" + desiredState.config.dmlDelete + "'" %}
                    {% if desiredState.config.capUpdate == true %}
                        {% set updateValue = "'" + desiredState.config.dmlUpdate + "'" %}
                    {% endif %}
                {% endif %}
            
                {# Stream Append Behavior #}
                {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                        {% set streamAppendMode = 'APPEND_ONLY = TRUE' %}
                        {% set changesClauseMode = 'CHANGES(information => append_only)' %}
                {% else %}
                    {% set streamAppendMode = '' %}
                {% endif %}
            
                {# Stream Initial Row Behavior #}
                {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                    {% if desiredState.config.initialRows == true %} 
                        {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = TRUE' %}
                    {% else %} 
                        {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamInitialRowsMode = '' %}
                {% endif %}
            
                {# Stream Insert Only Behavior #}
                {% if streamType == 'EXTERNAL TABLE' %} 
                    {% if desiredState.config.insertOnly == true %} 
                        {% set streamInsertOnlyMode = 'INSERT_ONLY = TRUE' %}
                    {% else %} 
                        {% set streamInsertOnlyMode = 'INSERT_ONLY = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamInsertOnlyMode = '' %}
                {% endif %}
            
                {# Hybrid View Info #}
                {# View created in same schema as Target Table #}
                {% set targetHybridViewDatabase = targetTableDatabase %} 
                {% set targetHybridViewSchema = targetTableSchema %} 
                {% set targetHybridViewName = desiredState.node.name  %}
                {% set fullyQualifiedHybridViewName = targetHybridViewDatabase + '.' + targetHybridViewSchema + '."' + targetHybridViewName + '"' %}
            
                {# Task Info #}
                {% set taskName = desiredState.node.name + '_TASK'  %}
                {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 
            
                {# Task Type #}
                {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
                    {%- set taskType = 'WAREHOUSE = ' + desiredState.config.whName -%} 
                {%- else -%}
                    {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
                {%- endif -%}
            
                {# Schedule Type #}
                {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
                    {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
                {% elif desiredState.config.schedulePeriodOption == 'CRON' %}
                    {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON %}
                {%- else -%}
                    {%- set nsVariables.taskWhenRun = 'AFTER ' -%}
                    {%- set predecessorTasks = (desiredState.config.predTask).split(",") -%}
            
                    {%- for p in predecessorTasks -%}
                        {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + targetTableDatabase + '.' + targetTableSchema + '.' + p -%}
                        {%- if not loop.last -%} 
                            {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + ',' -%}
                        {%- endif %}
                    {% endfor %}    
                {%- endif -%}
            
                {# When Stream has data logic #}
                {%- if desiredState.config.flagSrcStream == true -%} 
                    {%- set streamPoll = "WHEN SYSTEM$STREAM_HAS_DATA('" + fullyQualifiedStreamName + "')" -%} 
                {%- endif -%}
            
                {{ stage('Create Stream') }}
                CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
                    ON {{ streamType }} {{ streamSourceObjectName }}
                    {{ streamAppendMode }}
                    {{ streamInitialRowsMode }}
                    {{ streamInsertOnlyMode }}
                    
                {{ stage('Create Target Table') }}
                CREATE OR REPLACE TABLE {{ fullyQualifiedTargetTableName }}
                    (
                    {%- for col in desiredState.columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    )
            
                {% if desiredState.config.initialRows == true %}
                    {{ stage('Target Table Initial Load') }}
                    INSERT INTO {{ fullyQualifiedTargetTableName }}
                    SELECT
                    {%- for col in desiredState.columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    FROM (SELECT {%- for col in desiredState.columns %}
                                    {% if col.name == targetTableMergeUpdateColumn %}
                                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                    {%- else -%}
                                        "{{ col.name }}" as "{{ col.name }}"
                                    {% endif %}
                                    {%- if not loop.last -%}, {% endif %}
                                {%- endfor %}
                                {% if desiredState.config.softDeleteFlag == false %}
                                    ,case when {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} then 0 else 1 end as load_flag
                                {% endif %}
                        FROM {{ fullyQualifiedStreamName }}
                        QUALIFY {{ nsVariables.rowNumber }} = 1)
                        {% if desiredState.config.softDeleteFlag == false %}
                            WHERE load_flag = 1
                        {% endif %}
                {% endif %}
            
                {{ stage('Create Hybrid View') }}
                CREATE OR REPLACE VIEW {{ fullyQualifiedHybridViewName }} (
                    {%- for col in desiredState.columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %} ) AS
            
                {% if desiredState.config.softDeleteFlag == true and desiredState.config.retainLastNonDeleteFlag == false %}
                    /* SOFT_DELETE = true RETAIN_LAST_NON_DELETE = false */
                    WITH delta AS 
                    (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1)
            
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    WHERE NOT EXISTS (SELECT 1
                                    FROM delta d
                                    WHERE {%- for col in (nsVariables.partition).split(",") %}
                                                a.{{ col }} = d.{{ col }}
                                                {% if not loop.last -%}AND {% endif %}
                                            {%- endfor %})
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM delta d
            
                {% elif desiredState.config.softDeleteFlag == false and desiredState.config.retainLastNonDeleteFlag == false %} 
                    /* SOFT_DELETE = false RETAIN_LAST_NON_DELETE = false */
                    WITH delta AS 
                    (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                ,
                        {%- endfor %}
                                CASE WHEN {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} THEN 0 ELSE 1 END AS LOAD_FLAG
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1)
            
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    WHERE NOT EXISTS (SELECT 1
                                    FROM delta d
                                    WHERE {%- for col in (nsVariables.partition).split(",") %}
                                                a.{{ col }} = d.{{ col }}
                                                {% if not loop.last -%}AND {% endif %}
                                            {%- endfor %})
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM delta d
                    WHERE LOAD_FLAG = 1
            
                {% elif desiredState.config.softDeleteFlag == true and desiredState.config.retainLastNonDeleteFlag == true %} 
                    /* SOFT_DELETE = true RETAIN_LAST_NON_DELETE = true */
                    WITH 
                    a AS (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} != {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),
            
                    d AS (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),
            
                    ods_d as (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  %} 
                                    d."{{ col.name }}" as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                    {{ deleteValue }} as "{{ col.name }}"
                                {% else %}
                                    a."{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    INNER JOIN (
                            SELECT {%- for col in nsVariables.tableKeySort %}
                                            "{{ col }}"
                                        {%- if not loop.last -%}, {% endif %}
                                    {%- endfor %}
                                FROM {{ fullyQualifiedSourceTableName }}
                                {{ changesClauseMode }}
                                {{ changesClauseAt }}
                                WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}) d
                    ON 
                    {% for col in nsVariables.tableKey %}
                        a."{{col}}" = d."{{col}}"
                        {%- if not loop.last -%} AND {% endif %}
                        {%- if loop.last -%} ) {% endif %}
                    {% endfor %}
            
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  %} 
                                    coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                    coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                {% else %}
                                    a."{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM a
                    LEFT OUTER JOIN d
                    ON 
                        {%- for col in nsVariables.tableKey %}
                                a."{{ col }}" = d."{{ col }}" AND
                        {%- endfor %}
                        {{ nsVariables.hybridMergeSortFilter | replace('alias','d') }} > {{ nsVariables.hybridMergeSortFilter | replace('alias','a') }}
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM ods_d
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                                {%- if not loop.last -%}, {% endif %}
                            {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} d
                    WHERE NOT EXISTS (
                        SELECT 1
                        FROM {{ fullyQualifiedSourceTableName }}
                        {{ changesClauseMode }}
                        {{ changesClauseAt }} a
                        WHERE 
                        {%- for col in nsVariables.tableKey %}
                                a."{{ col }}" = d."{{ col }}"
                            {%- if not loop.last -%} AND {% endif %}
                        {%- endfor %})
            
                {% elif desiredState.config.softDeleteFlag == false and desiredState.config.retainLastNonDeleteFlag == true %} 
                    /* SOFT_DELETE = false RETAIN_LAST_NON_DELETE = true */
                    WITH 
                    a AS (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                            {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} != {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),
            
                    d AS (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),
            
                    ods_d as (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  %} 
                                    d."{{ col.name }}" as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                    {{ deleteValue }} as "{{ col.name }}"
                                {% else %}
                                    a."{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    INNER JOIN (
                            SELECT {%- for col in nsVariables.tableKeySort %}
                                            "{{ col }}"
                                        {%- if not loop.last -%}, {% endif %}
                                    {%- endfor %}
                                FROM {{ fullyQualifiedSourceTableName }}
                                {{ changesClauseMode }}
                                {{ changesClauseAt }}
                                WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}) d
                    ON 
                    {% for col in nsVariables.tableKey %}
                        a."{{col}}" = d."{{col}}"
                        {%- if not loop.last -%} AND {% endif %}
                        {%- if loop.last -%} ) {% endif %}
                    {% endfor %}
            
                    SELECT 
                    {%- for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    FROM (
                        SELECT {%- for col in desiredState.columns %}
                                    {% if col.name == targetTableMergeUpdateColumn %}
                                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                    {% elif col.name in nsVariables.orderBy  %} 
                                        coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                    {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                        coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                    {% else %}
                                        a."{{ col.name }}" as "{{ col.name }}"
                                    {% endif %}
                                    ,
                            {%- endfor %}
                            case when coalesce(d.{{ targetTableDmlIdentifierColumnQuotes }}, a.{{ targetTableDmlIdentifierColumnQuotes }}) = {{ deleteValue }} then 0 else 1 end as load_flag
                        FROM a
                        LEFT OUTER JOIN d
                        ON 
                            {%- for col in nsVariables.tableKey %}
                                    a."{{ col }}" = d."{{ col }}" AND
                            {%- endfor %}
                            {{ nsVariables.hybridMergeSortFilter | replace('alias','d') }} > {{ nsVariables.hybridMergeSortFilter | replace('alias','a') }}
                        )
                        WHERE load_flag = 1
                        UNION ALL
                        SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                                {%- if not loop.last -%}, {% endif %}
                            {%- endfor %}
                        FROM ods_d
                        UNION ALL
                        SELECT {%- for col in desiredState.columns %}
                                    "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {%- endfor %}
                        FROM {{ fullyQualifiedTargetTableName }} d
                        WHERE NOT EXISTS (
                            SELECT 1
                            FROM {{ fullyQualifiedSourceTableName }}
                            {{ changesClauseMode }}
                            {{ changesClauseAt }} a
                            WHERE 
                            {%- for col in nsVariables.tableKey %}
                                    a."{{ col }}" = d."{{ col }}"
                                {%- if not loop.last -%} AND {% endif %}
                            {%- endfor %})
            
                {% endif %}
            
                {%- if desiredState.config.schedulePeriodOption == 'Predecessor' -%} 
                    {%- set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + desiredState.config.rootTask + '"' -%} 
                    {{ stage('Suspend Root Task', true, "sql") }}
                    ALTER TASK {{ fullyQualifiedRootTaskName }} SUSPEND
                {%- endif -%}
            
                {{ stage('Create Task') }}
                CREATE OR REPLACE TASK 
                    {{ fullyQualifiedTaskName }} 
                    {{ taskType}} 
                    {{ nsVariables.taskWhenRun }} 
                    {% if nsVariables.poll != 'WHEN ' %} {{ nsVariables.poll }} {% endif %}
                AS 
                MERGE INTO {{ fullyQualifiedTargetTableName }} a
                USING (SELECT
                {%- for col in desiredState.columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% else %}
                                "{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedStreamName }}
                {{ whereStreamFilter }}
                QUALIFY {{ nsVariables.rowNumber }} = 1) d
                ON 
                {% for col in nsVariables.tableKey %}
                    a."{{col}}" = d."{{col}}"
                    {%- if not loop.last -%} AND {% endif %}
                {% endfor %}
            
                WHEN NOT MATCHED and d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ insertValue }} THEN INSERT (
                    {% for col in desiredState.columns %}
                        a."{{ col.name }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                    )
                VALUES (
                    {% for col in desiredState.columns %}
                        d."{{ col.name }}"
                        {% if not loop.last %}, {%- endif -%}
                    {%- endfor -%}
                    )
                {% if desiredState.config.capUpdate == true %}
                    WHEN NOT MATCHED and d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ updateValue }} THEN INSERT (
                        {% for col in desiredState.columns %}
                            a."{{ col.name }}"
                            {% if not loop.last %}, {% endif -%}
                        {%- endfor -%}
                        )
                    VALUES (
                        {% for col in desiredState.columns %}
                            d."{{ col.name }}"
                            {% if not loop.last %}, {%- endif -%}
                        {%- endfor -%}
                        )
                {% endif %}
                WHEN NOT MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} AND /* softDeleteFlag True */ {{ desiredState.config.softDeleteFlag }} = True THEN INSERT (
                    {% for col in desiredState.columns %}
                        a."{{ col.name }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                    )
                VALUES (
                    {% for col in desiredState.columns %}
                        d."{{ col.name }}"
                        {% if not loop.last %}, {%- endif -%}
                    {%- endfor -%}
                    )
                {% if desiredState.config.capUpdate == true %}
                    /* Update DML value selected */
                    WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ updateValue }} THEN UPDATE SET
                        {% for col in targetTableColumnNamesUpdate %}
                            a."{{ col }}" = d."{{ col }}"
                            {% if not loop.last %}, {% endif -%}
                        {%- endfor -%}
                {% endif %}
                WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ insertValue }} THEN UPDATE SET
                    {% for col in targetTableColumnNamesUpdate %}
                        a."{{ col }}" = d."{{ col }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                {% if desiredState.config.softDeleteFlag == true %}
                    /* Soft Delete */
                    WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    THEN UPDATE SET
                        {% for col in (targetTableColumnNamesUpdate) %}
                            {% if (col in (targetTableMergeUpdateColumn, targetTableDmlIdentifierColumn)) or col in (nsVariables.sortKey) %}
                                a."{{ col }}" = d."{{ col }}"
                                {% if not loop.last %}, {% endif -%}
                            {% endif %}
                        {%- endfor -%}
                {% else %}
                    /* Hard Delete */
                    WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    THEN DELETE
                {% endif %}
            
                {%- if desiredState.config.schedulePeriodOption != 'Predecessor' -%} 
                    {{ stage('Resume Task', true, "sql") }}
                    ALTER TASK {{ fullyQualifiedTaskName }} RESUME;
                {%- endif -%}
            
            {% elif currentState != undefined and desiredState == undefined %}
            
                {# Target Stream Location and Name #}
                {% set streamTargetLocationName = currentState.node.location.name %}
                {% set streamTargetDatabaseName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = currentState.node.name + '_STREAM' %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}
            
                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(currentState.node.location.name, currentState.node.name).replace('DM_VIEW_','DM_TABLE_') %}
                {% set targetTableName = currentState.node.name %}
            
                {# Hybrid View Info #}
                {# View created in same schema as Target Table #}
                {% set targetHybridViewDatabase = targetTableDatabase %} 
                {% set targetHybridViewSchema = targetTableSchema %} 
                {% set targetHybridViewName = currentState.node.name  %}
                {% set fullyQualifiedHybridViewName = targetHybridViewDatabase + '.' + targetHybridViewSchema + '."' + targetHybridViewName + '"' %}
            
                {# Task Info #}
                {% set taskName = currentState.node.name + '_TASK'  %}
                {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 
            
                {{ stage('Drop Stream') }}
                DROP STREAM IF EXISTS {{ fullyQualifiedStreamName }}
            
                {{ stage('Drop Table') }}
                DROP TABLE IF EXISTS {{ fullyQualifiedTargetTableName }}
            
                {{ stage('Drop View') }}
                DROP VIEW IF EXISTS {{ fullyQualifiedHybridViewName }}
            
                {%- if currentState.config.schedulingPeriodOption == 'Predecessor' -%} 
                {{ stage('Suspend Root Task', true, "sql") }}
                    ALTER TASK IF EXISTS {{ fullyQualifiedRootTaskName }} SUSPEND
                {{ stage('Drop Current Task', true, "sql") }}
                    DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                {%- else -%}
                {{ stage('Drop Current Task', true, "sql") }}
                    DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                {%- endif -%}
            
            {%- else -%}
            
                {{ stage('Nothing to do.') }}
                select 1 = 0
            
            {% endif %}
    name: WorkingCopy of Deferred Merge - Append Stream
    version: 1
  StepType-291:
    id: "291"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Copy of Deferred Merge - Append Stream
        short: DM_VIEW
        tagColor: black
        plural: Deferred Merge

        deployStrategy: advanced


        config:
        - groupName: General Options
          items:
          - displayName: Development Mode
            attributeName: devMode
            type: toggleButton
            isRequired: true
            default: true


        - groupName: Stream Options
          items:
          - displayName: Source Object
            attributeName: sourceType
            type: dropdownSelector
            default: Table
            options:
              - Table
              - External Table
              - View
            isRequired: false



          - displayName: Show Initial Rows
            attributeName: initialRows
            type: toggleButton
            default: true
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"

          - displayName: Redeployment Behavior
            attributeName: redeploymentBehavior
            type: dropdownSelector
            default: Create At Existing Stream
            options:
               - Create or Replace
               - Create If Not Exists
               - Create At Existing Stream
            isRequired: true


          

          - displayName: Insert Only
            attributeName: insertOnly
            type: toggleButton
            default: false
            isRequired: true
            enableIf: "{% if config.sourceType == 'External Table' %} true {% else %} false {% endif %}"

        - groupName: Target Loading Options
          items:
          - type: tabular
            displayName: 'Table Key(s)'
            attributeName: partitionBy
            columns:
          
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: partColName
               isRequired: true
                
            isRequired: false

          - displayName: Record Versioning
            attributeName: recordVersioning
            type: dropdownSelector
            default: Datetime Column
            options:
              - Datetime Column
              - Date Column and Time Column
              - Numeric Column
            isRequired: true

          - type: tabular
            displayName: 'Timestamp or Sequence'
            attributeName: orderBy
            columns:
          
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: colName
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"
            
            -  type: dropdownSelector
               displayName: Sort Order
               attributeName: sortOrd
               default: desc
               options:
               - desc
               - asc
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"
            
            isRequired: false
            enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Date / Timestamp Columns'
            attributeName: orderByDateTime
            columns:
          
            -  type: columnDropdownSelector
               displayName: Date Column
               attributeName: colNameDate
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
            -  type: columnDropdownSelector
               displayName: Timestamp Column
               attributeName: colNameTimestamp
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
            -  type: dropdownSelector
               displayName: Sort Order
               attributeName: sortOrdDateTimestamp
               default: desc
               options:
               - desc
               - asc
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
            isRequired: false
            enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"

        - groupName: Target Row DML Operations
          items:
          - displayName: Column that Identifies DML Operations
            attributeName: dmlCol
            type: columnDropdownSelector
            isRequired: false

          - displayName: Include Value for Update
            attributeName: capUpdate
            type: toggleButton
            default: false
            isRequired: false
         
          - displayName: Insert Value
            attributeName: dmlInsert
            type: textBox
            default: I
            isRequired: true
         
          - displayName: Update Value
            attributeName: dmlUpdate
            type: textBox
            default: U
            isRequired: true
            enableIf: "{% if config.capUpdate == true %} true {% else %} false {% endif %}"
         
          - displayName: Delete Value
            attributeName: dmlDelete
            type: textBox
            default: D
            isRequired: true
         
        - groupName: Target Delete Options
          items:
          - displayName: Soft Delete
            attributeName: softDeleteFlag
            type: toggleButton
            default: false
            isRequired: false

          - displayName: Retain Last Non-Deleted Values
            attributeName: retainLastNonDeleteFlag
            type: toggleButton
            default: false
            isRequired: false
         
        - groupName: Target Clustering Options
          items:

            # Cluster Key-Determine if a node is to be clustered or not #
          
          - type: toggleButton
            attributeName: clusterKey
            displayName: Cluster Key
            default: false
            isRequired: false

          - type: toggleButton
            attributeName: clusterKeyExpressions
            displayName: Allow Expressions in Cluster Key
            default: false
            isRequired: true
            enableIf: "{% if config.clusterKey %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfig
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnName
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and not config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfigExpressions
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnNameExpressions
               isRequired: false
          
            -  type: textBox
               displayName: Expression
               attributeName: sqlExpression
               default: "ex. trunc(<column_name>, -5)"
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

         
        - groupName: Scheduling Options
          items:
          - displayName: Scheduling Options
            attributeName: schedulingMode
            type: dropdownSelector
            default: Warehouse Task
            options:
              - Warehouse Task
              - Serverless Task
            isRequired: true

          - displayName: When Source Stream has Data Flag
            attributeName: flagSrcStream
            type: toggleButton
            isRequired: true

          - displayName: Select Warehouse on which to run task
            attributeName: whName
            type: textBox
            default: '<WAREHOUSE_NAME>'
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Warehouse Task' %} true {% else %} false {% endif %}"

          - displayName: Select initial serverless Warehouse size
            attributeName: serverlessSize
            type: dropdownSelector
            default: 'MEDIUM'
            options:
              - XSMALL
              - SMALL
              - MEDIUM
              - LARGE
              - XLARGE
              - XXLARGE
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Serverless Task' %} true {% else %} false {% endif %}"

          - displayName: Task Schedule
            attributeName: schedulePeriodOption
            type: dropdownSelector
            default: Minutes
            options:
              - Minutes
              - CRON
              - Predecessor
            isRequired: TRUE

          - displayName: Enter task schedule using minutes
            attributeName: schedulePeriod
            type: textBox
            default: '60'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Minutes' %} true {% else %} false {% endif %}"

          - displayName: Enter task schedule using CRON
            attributeName: scheduleCRON
            type: textBox
            default: '5 0-23 * * * America/Los_Angeles'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'CRON' %} true {% else %} false {% endif %}"

          - displayName: Enter predecessor task(s) seperated by a comma 
            attributeName: predTask
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

          - displayName: Enter root task name
            attributeName: rootTask
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"


        systemColumns:
        - displayName: 'DM_UPDATE_TIMESTAMP'
          transform: "current_timestamp::timestamp_ntz"
          dataType: timestamp
          placement: end
          attributeName: hmUpdTs
      templates:
        create:
          templateString: |
            {% if (currentState == undefined and desiredState != undefined) or (currentState != undefined and desiredState != undefined ) %}
            
                {# Set Namespace Variables #}
                {% set nsVariables = namespace(taskWhenRun="") %}
                {% set nsVariables = namespace(partition="") %}
                {% set nsVariables = namespace(orderBy="") %}
                {% set nsVariables = namespace(rowNumber="") %}
                {% set nsVariables = namespace(tableKey=[]) %}
                {% set nsVariables = namespace(sortKey=[]) %}
                {% set nsVariables = namespace(tableKeySort=[]) %}
                {% set nsVariables = namespace(hybridMergeSortFilter=[]) %}
            
                
            
                {# Source Object Location and Name #}
                {% set sourceStorageLocation = desiredState.sources[0].dependencies[0].node.location.name %}
                {% set sourceDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='database') | first %}
                {% set sourceSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='schema') | first %}
                {% set sourceTableName = desiredState.sources[0].dependencies[0].node.name %}
                {% set fullyQualifiedSourceTableName = '"' + sourceDatabaseName + '"."' + sourceSchemaName + '"."' + sourceTableName + '"' %}
                {% set nsVariables = namespace(poll="WHEN ") %}
            
                 
            
                {# Target Stream Location and Name #}
                {% set streamTargetLocationName = desiredState.node.location.name %}
                {% set streamTargetDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = desiredState.node.name + '_STREAM' %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}
                {% set changesClauseAt = 'AT(stream => \'' + fullyQualifiedStreamName + '\')' %}
            
                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name).replace('DM_VIEW_','DM_TABLE_') %}
                {% set targetTableName = desiredState.node.name %}
            
                {% set targetTableColumnIds = desiredState.columns | map(attribute='id') | list %}
                {% set targetTableColumnNames = desiredState.columns | map(attribute='name') | list %}
                {% set targetTableMergeUpdateColumn = desiredState.columns | selectattr('hmUpdTs', 'defined') | map(attribute='name') | first %}
                {% set targetTableDmlIdentifierColumn = desiredState.config.dmlCol.name %}
                {% set targetTableDmlIdentifierColumnDatatype = desiredState.config.dmlCol.dataType %}
                {% set targetTableDmlIdentifierColumnQuotes = '"' + targetTableDmlIdentifierColumn + '"' %}
            
            
                {% if desiredState.config.clusterKey == true %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}
            
                            {%- set nsVariables = namespace(clusterValues=[]) %}
            
                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}
            
                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
            
                        {% else %}
            
                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}
            
                            {%- set nsVariables = namespace(clusterValues=[]) %}
            
                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}
            
                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
            
                        {% endif %}
                    {% endif %}
            
                {# Merge partition by and order by #}
                {% set targetTableColumnNamesUpdate = targetTableColumnNames | reject('in', desiredState.config.partitionBy.get('items') | map(attribute='partColName.name')) | list %}
            
                {% for i in desiredState.config.partitionBy.get('items') %}
                    {%- if loop.first -%}
                        {% set nsVariables.partition = '"' + i.partColName.name + '"' %}
                    {% else %}
                        {% set nsVariables.partition = nsVariables.partition + ', "' + i.partColName.name + '"' %}
                    {%- endif -%}
            
                    {% set targetTableColumnNamesUpdate = targetTableColumnNames | reject('in', i.partColName.name) | list %}
            
                {% endfor %}
            
                {% if desiredState.config.recordVersioning in ('Datetime Column','Numeric Column') %}
                    {% set datetimeNumericColSort = desiredState.config.orderBy.get('items') %}
                    {% set nsVariables.orderBy = '"' + datetimeNumericColSort  | map(attribute='colName.name') | first + '" ' + datetimeNumericColSort  | map(attribute='sortOrd') | first %}
                    {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
                    {% set nsVariables.hybridMergeSortFilter = 'alias."' + datetimeNumericColSort  | map(attribute='colName.name') | first + '"' %}
                    {%- set nsVariables.sortKey = desiredState.config.orderBy.get('items') %}
                    {% set nsVariables.sortKey = nsVariables.sortKey | map(attribute='colName.name') | list %}
                {% else %}
                    {% set dateTimeColSort = desiredState.config.orderByDateTime.get('items') %}
                    {% set dateCol = dateTimeColSort | map(attribute='colNameDate.name') | first %}
                    {% set timeCol = dateTimeColSort | map(attribute='colNameTimestamp.name') | first %}
                    {% set sortOrdDateTimestamp = dateTimeColSort | map(attribute='sortOrdDateTimestamp') | first %}
                    {% set nsVariables.orderBy = 'to_timestamp("' + dateCol + '" || ' + '\'T\'' + ' ||"' + timeCol + '") ' + sortOrdDateTimestamp %}
                    {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
                    {% set nsVariables.hybridMergeSortFilter = 'to_timestamp(alias."' + dateCol + '" || ' + '\'T\'' + ' || alias."' + timeCol + '")' %}
            
                    {%- set nsVariables.sortKey = desiredState.config.orderByDateTime.get('items') %}
                    {% set nsVariables.sortKey = nsVariables.sortKey | map(attribute='colNameDate.name') | list + nsVariables.sortKey | map(attribute='colNameTimestamp.name') | list %}
                {% endif %}
            
                {%- set nsVariables.tableKey = desiredState.config.partitionBy.get('items') %}
                {% set nsVariables.tableKey = nsVariables.tableKey | map(attribute='partColName.name') | list %}
            
                {%- set nsVariables.tableKeySort = nsVariables.tableKey + nsVariables.sortKey %}
            
                {# Stream Type #}
                {% if desiredState.config.sourceType == 'Table' %} 
                    {% set streamType = 'TABLE' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% elif desiredState.config.sourceType == 'External Table' %} 
                    {% set streamType = 'EXTERNAL TABLE' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% else %} 
                    {% set streamType = 'VIEW' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% endif %}
            
                {# DML Identifier Quoting #}
                {% if ((targetTableDmlIdentifierColumnDatatype in ('FLOAT','BOOLEAN')) or (targetTableDmlIdentifierColumnDatatype[:6] == 'NUMBER')) %}
                    {% set insertValue = desiredState.config.dmlInsert %}
                    {% set deleteValue = desiredState.config.dmlDelete %}
                    {% if desiredState.config.capUpdate == true %}
                        {% set updateValue = desiredState.config.dmlUpdate %}
                    {% endif %}
                {% else %}
                    {% set insertValue = "'" + desiredState.config.dmlInsert + "'" %}
                    {% set deleteValue = "'" + desiredState.config.dmlDelete + "'" %}
                    {% if desiredState.config.capUpdate == true %}
                        {% set updateValue = "'" + desiredState.config.dmlUpdate + "'" %}
                    {% endif %}
                {% endif %}
            
                {# Stream Append Behavior #}
                {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                        {% set streamAppendMode = 'APPEND_ONLY = TRUE' %}
                        {% set changesClauseMode = 'CHANGES(information => append_only)' %}
                {% else %}
                    {% set streamAppendMode = '' %}
                {% endif %}
            
                {# Stream Initial Row Behavior #}
                {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                    {% if desiredState.config.initialRows == true %} 
                        {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = TRUE' %}
                    {% else %} 
                        {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamInitialRowsMode = '' %}
                {% endif %}
            
                {# Stream Insert Only Behavior #}
                {% if streamType == 'EXTERNAL TABLE' %} 
                    {% if desiredState.config.insertOnly == true %} 
                        {% set streamInsertOnlyMode = 'INSERT_ONLY = TRUE' %}
                    {% else %} 
                        {% set streamInsertOnlyMode = 'INSERT_ONLY = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamInsertOnlyMode = '' %}
                {% endif %}
                {# Hybrid View Info #}
                {# View created in same schema as Target Table #}
                {% set targetHybridViewDatabase = targetTableDatabase %} 
                {% set targetHybridViewSchema = targetTableSchema %} 
                {% set targetHybridViewName = desiredState.node.name  %}
                {% set fullyQualifiedHybridViewName = targetHybridViewDatabase + '.' + targetHybridViewSchema + '."' + targetHybridViewName + '"' %}
            
                {# Task Info #}
                {% set taskName = desiredState.node.name + '_TASK'  %}
                {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 
            
                {# Task Type #}
                {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
                    {%- set taskType = 'WAREHOUSE = ' + desiredState.config.whName -%} 
                {%- else -%}
                    {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
                {%- endif -%}
            
                {# Schedule Type #}
                {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
                    {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
                {% elif desiredState.config.schedulePeriodOption == 'CRON' %}
                    {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON + "'" %}
                {%- else -%}
                    {%- set nsVariables.taskWhenRun = 'AFTER ' -%}
                    {%- set predecessorTasks = (desiredState.config.predTask).split(",") -%}
            
                    {%- for p in predecessorTasks -%}
                        {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + targetTableDatabase + '.' + targetTableSchema + '.' + p -%}
                        {%- if not loop.last -%} 
                            {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + ',' -%}
                        {%- endif %}
                    {% endfor %}    
                {%- endif -%}
            
               
            
            
                {% if currentState == undefined or desiredState.config.redeploymentBehavior == 'Create or Replace' %}
                    {{ stage('Create Stream', true, "sql", "alter") }}
                    CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
                        ON {{ streamType }} {{ streamSourceObjectName }}
                        {{ streamAppendMode }}
                        {{ streamInitialRowsMode }}
                        {{ streamInsertOnlyMode }}
            
                {% elif currentState != undefined and desiredState.config.redeploymentBehavior == 'Create If Not Exists'%}
                    {{ stage('Re-Create Stream at existing offset', true, "sql", "alter") }}
                    CREATE STREAM IF NOT EXISTS {{ fullyQualifiedStreamName }}
                        ON {{ streamType }} {{ streamSourceObjectName }}
                        {{ streamAppendMode }}
                        {{ streamInitialRowsMode }}
                        {{ streamInsertOnlyMode }}
            
                {% elif currentState != undefined and desiredState.config.redeploymentBehavior == 'Create At Existing Stream'%}
                    {{ stage('Re-Create Stream at existing offset', true, "sql", "alter") }}
                    CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
                        ON {{ streamType }} {{ streamSourceObjectName }}
                        AT(STREAM => '{{ fullyQualifiedStreamName }}');
            
                {% else %}
                    {{ stage('Unknown state.', true, "sql", "alter") }}
                    select 1 = 0
                {% endif %}
            
                   
               
                    
                {{ stage('Create Target Table') }}
                CREATE OR REPLACE TABLE {{ fullyQualifiedTargetTableName }}
                    (
                    {%- for col in desiredState.columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    )
                    {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}
                    {% if desiredState.config.clusterKey == true %}
                        {{ stage('Apply Table Clustering', true, "sql", "create") }}
                        ALTER TABLE {{fullyQualifiedTargetTableName }} {{ nsVariables.finalClusterKey }}
            
                        {{ stage('Resume Recluster Table', true, "sql", "create") }}
                        ALTER TABLE {{ fullyQualifiedTargetTableName }} RESUME RECLUSTER
                    {% endif %}
            
            
            
            
                {% if desiredState.config.initialRows == true %}
                    
                    {{ stage('Target Table Initial Load') }}
                    INSERT INTO {{ fullyQualifiedTargetTableName }}
                    SELECT
                    {%- for col in desiredState.columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    FROM (SELECT {%- for col in desiredState.columns %}
                                    {% if col.name == targetTableMergeUpdateColumn %}
                                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                    {% else %}
                                        "{{ col.name }}" as "{{ col.name }}"
                                    {% endif %}
                                    {%- if not loop.last -%}, {% endif %}
                                {%- endfor %}
                                {% if desiredState.config.softDeleteFlag == false %}
                                    ,case when {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} then 0 else 1 end as load_flag
                                {% endif %}
                        FROM {{ fullyQualifiedStreamName }}
                        QUALIFY {{ nsVariables.rowNumber }} = 1)
                        {% if desiredState.config.softDeleteFlag == false %}
                            WHERE load_flag = 1
                        {% endif %}
                {% endif %}
                {{ stage('Create Hybrid View') }}
                CREATE OR REPLACE VIEW {{ fullyQualifiedHybridViewName }} (
                    {%- for col in desiredState.columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %} ) AS
            
                {% if desiredState.config.softDeleteFlag == true and desiredState.config.retainLastNonDeleteFlag == false %}
                /* SOFT_DELETE = true RETAIN_LAST_NON_DELETE = false */
                WITH delta AS 
                (
                SELECT {%- for col in desiredState.columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} AS "{{ col.name }}"
                            {% else %}
                                "{{ col.name }}" AS "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedSourceTableName }}
                {{ changesClauseMode }}
                {{ changesClauseAt }}
                QUALIFY {{ nsVariables.rowNumber }} = 1)
            
                SELECT {%- for col in desiredState.columns %}
                            "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedTargetTableName }} target
                WHERE NOT EXISTS (SELECT 1
                                FROM delta delta_table
                                WHERE {%- for col in (nsVariables.partition).split(",") %}
                                            target.{{ col }} = delta_table.{{ col }}
                                            {% if not loop.last -%}AND {% endif %}
                                        {%- endfor %})
                UNION ALL
                SELECT {%- for col in desiredState.columns %}
                            "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM delta delta_table
            
            {% elif desiredState.config.softDeleteFlag == false and desiredState.config.retainLastNonDeleteFlag == false %} 
                /* SOFT_DELETE = false RETAIN_LAST_NON_DELETE = false */
                WITH delta AS 
                (
                SELECT {%- for col in desiredState.columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} AS "{{ col.name }}"
                            {% else %}
                                "{{ col.name }}" AS "{{ col.name }}"
                            {% endif %}
                            ,
                    {%- endfor %}
                            CASE WHEN {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} THEN 0 ELSE 1 END AS LOAD_FLAG
                FROM {{ fullyQualifiedSourceTableName }}
                {{ changesClauseMode }}
                {{ changesClauseAt }}
                QUALIFY {{ nsVariables.rowNumber }} = 1)
            
                SELECT {%- for col in desiredState.columns %}
                            "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedTargetTableName }} target
                WHERE NOT EXISTS (SELECT 1
                                FROM delta delta_table
                                WHERE {%- for col in (nsVariables.partition).split(",") %}
                                            target.{{ col }} = delta_table.{{ col }}
                                            {% if not loop.last -%}AND {% endif %}
                                        {%- endfor %})
                UNION ALL
                SELECT {%- for col in desiredState.columns %}
                            "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM delta delta_table
                WHERE LOAD_FLAG = 1
            
            
                {% elif desiredState.config.softDeleteFlag == true and desiredState.config.retainLastNonDeleteFlag == true %} 
                    /* SOFT_DELETE = true RETAIN_LAST_NON_DELETE = true */
                    WITH 
                    initial_data AS (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} != {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),
            
                    soft_deleted_data AS (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),
            
                    ods_data as (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  %} 
                                    soft_deleted_data."{{ col.name }}" as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                    {{ deleteValue }} as "{{ col.name }}"
                                {% else %}
                                    initial_data."{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} initial_data
                    INNER JOIN (
                            SELECT {%- for col in nsVariables.tableKeySort %}
                                            "{{ col }}"
                                        {%- if not loop.last -%}, {% endif %}
                                    {%- endfor %}
                                FROM {{ fullyQualifiedSourceTableName }}
                                {{ changesClauseMode }}
                                {{ changesClauseAt }}
                                WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}) soft_deleted_data
                    ON 
                    {% for col in nsVariables.tableKey %}
                        initial_data."{{col}}" = soft_deleted_data."{{col}}"
                        {%- if not loop.last -%} AND {% endif %}
                        {%- if loop.last -%} ) {% endif %}
                    {% endfor %}
            
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  %} 
                                    coalesce(soft_deleted_data."{{ col.name }}", initial_data."{{ col.name }}") as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                    coalesce(soft_deleted_data."{{ col.name }}", initial_data."{{ col.name }}") as "{{ col.name }}"
                                {% else %}
                                    initial_data."{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM initial_data
                    LEFT OUTER JOIN soft_deleted_data
                    ON 
                        {%- for col in nsVariables.tableKey %}
                                initial_data."{{ col }}" = soft_deleted_data."{{ col }}" AND
                        {%- endfor %}
                        {{ nsVariables.hybridMergeSortFilter | replace('alias','soft_deleted_data') }} > {{ nsVariables.hybridMergeSortFilter | replace('alias','initial_data') }}
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM ods_data
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                                {%- if not loop.last -%}, {% endif %}
                            {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} soft_deleted_data
                    WHERE NOT EXISTS (
                        SELECT 1
                        FROM {{ fullyQualifiedSourceTableName }}
                        {{ changesClauseMode }}
                        {{ changesClauseAt }} initial_data
                        WHERE 
                        {%- for col in nsVariables.tableKey %}
                                initial_data."{{ col }}" = soft_deleted_data."{{ col }}"
                            {%- if not loop.last -%} AND {% endif %}
                        {%- endfor %})
            
                {% elif desiredState.config.softDeleteFlag == false and desiredState.config.retainLastNonDeleteFlag == true %} 
                    /* SOFT_DELETE = false RETAIN_LAST_NON_DELETE = true */
                    WITH
              active_records AS (
                SELECT {%- for col in desiredState.columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% else %}
                                "{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                FROM {{ fullyQualifiedSourceTableName }}
                {{ changesClauseMode }}
                {{ changesClauseAt }}
                WHERE {{ targetTableDmlIdentifierColumnQuotes }} != {{ deleteValue }}
                QUALIFY {{ nsVariables.rowNumber }} = 1),
            
              drecords AS (
                SELECT {%- for col in desiredState.columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% else %}
                                "{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedSourceTableName }}
                {{ changesClauseMode }}
                {{ changesClauseAt }}
                WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                QUALIFY {{ nsVariables.rowNumber }} = 1),
            
              ODS_DATA AS (
                SELECT {%- for col in desiredState.columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% elif col.name in nsVariables.orderBy  %} 
                                drecords."{{ col.name }}" as "{{ col.name }}"
                            {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                {{ deleteValue }} as "{{ col.name }}"
                            {% else %}
                                active_records."{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedTargetTableName }} active_records
                INNER JOIN (
                        SELECT {%- for col in nsVariables.tableKeySort %}
                                        "{{ col }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {%- endfor %}
                            FROM {{ fullyQualifiedSourceTableName }}
                            {{ changesClauseMode }}
                            {{ changesClauseAt }}
                            WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}) drecords
                ON 
                {% for col in nsVariables.tableKey %}
                    active_records."{{col}}" = drecords."{{col}}"
                    {%- if not loop.last -%} AND {% endif %}
                    {%- if loop.last -%} ) {% endif %}
                {% endfor %}
            
                SELECT 
                {%- for col in desiredState.columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
                FROM (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  %} 
                                    coalesce(drecords."{{ col.name }}", active_records."{{ col.name }}") as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                    coalesce(drecords."{{ col.name }}", active_records."{{ col.name }}") as "{{ col.name }}"
                                {% else %}
                                    active_records."{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                ,
                        {%- endfor %}
                        case when coalesce(drecords.{{ targetTableDmlIdentifierColumnQuotes }}, active_records.{{ targetTableDmlIdentifierColumnQuotes }}) = {{ deleteValue }} then 0 else 1 end as load_flag
                    FROM active_records
                    LEFT OUTER JOIN drecords
                    ON 
                        {%- for col in nsVariables.tableKey %}
                                active_records."{{ col }}" = drecords."{{ col }}" AND
                        {%- endfor %}
                        {{ nsVariables.hybridMergeSortFilter | replace('alias','drecords') }} > {{ nsVariables.hybridMergeSortFilter | replace('alias','active_records') }}
                    )
                    WHERE load_flag = 1
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM ODS_DATA
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                                {%- if not loop.last -%}, {% endif %}
                            {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} drecords
                    WHERE NOT EXISTS (
                        SELECT 1
                        FROM {{ fullyQualifiedSourceTableName }} active_records
                        WHERE 
                        {%- for col in nsVariables.tableKey %}
                                active_records."{{ col }}" = drecords."{{ col }}"
                            {%- if not loop.last -%} AND {% endif %}
                        {%- endfor %})
            
            
                {% endif %}
            {% endif %}	
                
            {% if desiredState.config.devMode == false %}
            
                 
                
            
                {%- if desiredState.config.schedulePeriodOption == 'Predecessor' -%} 
                    {%- set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + desiredState.config.rootTask + '"' -%} 
                    {{ stage('Suspend Root Task', true, "sql") }}
                    ALTER TASK {{ fullyQualifiedRootTaskName }} SUSPEND
                {%- endif -%}
            
                {% if desiredState.config.flagSrcStream == true %}
                    {%- if nsVariables.poll == 'WHEN ' -%}
                        {% set nsVariables.poll = nsVariables.poll + 'SYSTEM$STREAM_HAS_DATA (\'' + fullyQualifiedStreamName + '\') '  %}
                        {%- endif -%}
                {% endif -%}  
                
                {{ stage('Create Task', true, "sql", "alter") }}
                CREATE OR REPLACE TASK 
                            {{ fullyQualifiedTaskName }} 
                            {{ taskType}}
                            {{ nsVariables.taskWhenRun }}
                            {% if nsVariables.poll != 'WHEN ' %} {{ nsVariables.poll }} {% endif %} 
                            
                AS 
                MERGE INTO {{ fullyQualifiedTargetTableName }} target_table
                USING (SELECT
                {%- for col in desiredState.columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% else %}
                                "{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedStreamName }}
                {{ whereStreamFilter }}
                QUALIFY {{ nsVariables.rowNumber }} = 1) source_table
                ON 
                {% for col in nsVariables.tableKey %}
                    target_table."{{col}}" = source_table."{{col}}"
                    {%- if not loop.last -%} AND {% endif %}
                {% endfor %}
            
                WHEN NOT MATCHED and source_table.{{ targetTableDmlIdentifierColumnQuotes }} = {{ insertValue }} THEN INSERT (
                    {% for col in desiredState.columns %}
                        target_table."{{ col.name }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                    )
                VALUES (
                    {% for col in desiredState.columns %}
                        source_table."{{ col.name }}"
                        {% if not loop.last %}, {%- endif -%}
                    {%- endfor -%}
                    )
                {% if desiredState.config.capUpdate == true %}
                    WHEN NOT MATCHED and source_table.{{ targetTableDmlIdentifierColumnQuotes }} = {{ updateValue }} THEN INSERT (
                        {% for col in desiredState.columns %}
                            target_table."{{ col.name }}"
                            {% if not loop.last %}, {% endif -%}
                        {%- endfor -%}
                        )
                    VALUES (
                        {% for col in desiredState.columns %}
                            source_table."{{ col.name }}"
                            {% if not loop.last %}, {%- endif -%}
                        {%- endfor -%}
                        )
                {% endif %}
                WHEN NOT MATCHED AND source_table.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} AND /* softDeleteFlag True */ {{ desiredState.config.softDeleteFlag }} = True THEN INSERT (
                    {% for col in desiredState.columns %}
                        target_table."{{ col.name }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                    )
                VALUES (
                    {% for col in desiredState.columns %}
                        source_table."{{ col.name }}"
                        {% if not loop.last %}, {%- endif -%}
                    {%- endfor -%}
                    )
                {% if desiredState.config.capUpdate == true %}
                    /* Update DML value selected */
                    WHEN MATCHED AND source_table.{{ targetTableDmlIdentifierColumnQuotes }} = {{ updateValue }} THEN UPDATE SET
                        {% for col in targetTableColumnNamesUpdate %}
                            target_table."{{ col }}" = source_table."{{ col }}"
                            {% if not loop.last %}, {% endif -%}
                        {%- endfor -%}
                {% endif %}
                WHEN MATCHED AND source_table.{{ targetTableDmlIdentifierColumnQuotes }} = {{ insertValue }} THEN UPDATE SET
                    {% for col in targetTableColumnNamesUpdate %}
                        target_table."{{ col }}" = source_table."{{ col }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                {% if desiredState.config.softDeleteFlag == true %}
                    /* Soft Delete */
                    WHEN MATCHED AND source_table.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    THEN UPDATE SET
                        {% for col in (targetTableColumnNamesUpdate) %}
                            {% if (col in (targetTableMergeUpdateColumn, targetTableDmlIdentifierColumn)) or col in (nsVariables.sortKey) %}
                                target_table."{{ col }}" = source_table."{{ col }}"
                                {% if not loop.last %}, {% endif -%}
                            {% endif %}
                        {%- endfor -%}
                {% else %}
                    /* Hard Delete */
                    WHEN MATCHED AND source_table.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    THEN DELETE
                {% endif %}
            
                {%- if desiredState.config.schedulePeriodOption != 'Predecessor' -%} 
                    {{ stage('Resume Task', true, "sql") }}
                    ALTER TASK {{ fullyQualifiedTaskName }} RESUME;
                {%- endif -%}
            
            {% elif currentState != undefined and desiredState == undefined %}
            
                {# Target Stream Location and Name #}
                {% set streamTargetLocationName = currentState.node.location.name %}
                {% set streamTargetDatabaseName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = currentState.node.name + '_STREAM' %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}
            
                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(currentState.node.location.name, currentState.node.name).replace('DM_VIEW_','DM_TABLE_') %}
                {% set targetTableName = currentState.node.name %}
            
                {# Hybrid View Info #}
                {# View created in same schema as Target Table #}
                {% set targetHybridViewDatabase = targetTableDatabase %} 
                {% set targetHybridViewSchema = targetTableSchema %} 
                {% set targetHybridViewName = currentState.node.name  %}
                {% set fullyQualifiedHybridViewName = targetHybridViewDatabase + '.' + targetHybridViewSchema + '."' + targetHybridViewName + '"' %}
            
                {# Task Info #}
                {% set taskName = currentState.node.name + '_TASK'  %}
                {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 
            
                {{ stage('Drop Stream') }}
                DROP STREAM IF EXISTS {{ fullyQualifiedStreamName }}
            
                {{ stage('Drop Table') }}
                DROP TABLE IF EXISTS {{ fullyQualifiedTargetTableName }}
            
                {{ stage('Drop View') }}
                DROP VIEW IF EXISTS {{ fullyQualifiedHybridViewName }}
            
                {%- if currentState.config.schedulingPeriodOption == 'Predecessor' -%} 
                {{ stage('Suspend Root Task', true, "sql") }}
                    ALTER TASK IF EXISTS {{ fullyQualifiedRootTaskName }} SUSPEND
                {{ stage('Drop Current Task', true, "sql") }}
                    DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                {%- else -%}
                {{ stage('Drop Current Task', true, "sql") }}
                    DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                {%- endif -%}
            
            {%- else -%}
            
                {{ stage('Task will be created once the Development Togggle is Disabled.') }}
                select 1 = 0
            
            {% endif %}
            
            
        run:
          templateString: |
            {% if (currentState == undefined and desiredState != undefined) or (currentState != undefined and desiredState != undefined ) %}
            
                {# Set Namespace Variables #}
                {% set nsVariables = namespace(taskWhenRun="") %}
                {% set nsVariables = namespace(partition="") %}
                {% set nsVariables = namespace(orderBy="") %}
                {% set nsVariables = namespace(rowNumber="") %}
                {% set nsVariables = namespace(tableKey=[]) %}
                {% set nsVariables = namespace(sortKey=[]) %}
                {% set nsVariables = namespace(tableKeySort=[]) %}
                {% set nsVariables = namespace(hybridMergeSortFilter=[]) %}
            
                {# Source Object Location and Name #}
                {% set sourceStorageLocation = desiredState.sources[0].dependencies[0].node.location.name %}
                {% set sourceDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='database') | first %}
                {% set sourceSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='schema') | first %}
                {% set sourceTableName = desiredState.sources[0].dependencies[0].node.name %}
                {% set fullyQualifiedSourceTableName = '"' + sourceDatabaseName + '"."' + sourceSchemaName + '"."' + sourceTableName + '"' %}
            
                {# Target Stream Location and Name #}
                {% set streamTargetLocationName = desiredState.node.location.name %}
                {% set streamTargetDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = desiredState.node.name + '_STREAM' %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}
                {% set changesClauseAt = 'AT(stream => \'' + fullyQualifiedStreamName + '\')' %}
            
                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name).replace('DM_VIEW_','DM_TABLE_') %}
                {% set targetTableName = desiredState.node.name %}
            
                {% set targetTableColumnIds = desiredState.columns | map(attribute='id') | list %}
                {% set targetTableColumnNames = desiredState.columns | map(attribute='name') | list %}
                {% set targetTableMergeUpdateColumn = desiredState.columns | selectattr('hmUpdTs', 'defined') | map(attribute='name') | first %}
                {% set targetTableDmlIdentifierColumn = desiredState.config.dmlCol.name %}
                {% set targetTableDmlIdentifierColumnDatatype = desiredState.config.dmlCol.dataType %}
                {% set targetTableDmlIdentifierColumnQuotes = '"' + targetTableDmlIdentifierColumn + '"' %}
            
                {# Merge partition by and order by #}
                {% set targetTableColumnNamesUpdate = targetTableColumnNames | reject('in', desiredState.config.partitionBy.get('items') | map(attribute='partColName.name')) | list %}
            
                {% for i in desiredState.config.partitionBy.get('items') %}
                    {%- if loop.first -%}
                        {% set nsVariables.partition = '"' + i.partColName.name + '"' %}
                    {% else %}
                        {% set nsVariables.partition = nsVariables.partition + ', "' + i.partColName.name + '"' %}
                    {%- endif -%}
            
                    {% set targetTableColumnNamesUpdate = targetTableColumnNames | reject('in', i.partColName.name) | list %}
            
                {% endfor %}
            
                {% if desiredState.config.recordVersioning in ('Datetime Column','Numeric Column') %}
                    {% set datetimeNumericColSort = desiredState.config.orderBy.get('items') %}
                    {% set nsVariables.orderBy = '"' + datetimeNumericColSort  | map(attribute='colName.name') | first + '" ' + datetimeNumericColSort  | map(attribute='sortOrd') | first %}
                    {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
                    {% set nsVariables.hybridMergeSortFilter = 'alias."' + datetimeNumericColSort  | map(attribute='colName.name') | first + '"' %}
            
                    {%- set nsVariables.sortKey = desiredState.config.orderBy.get('items') %}
                    {% set nsVariables.sortKey = nsVariables.sortKey | map(attribute='colName.name') | list %}
                {% else %}
                    {% set dateTimeColSort = desiredState.config.orderByDateTime.get('items') %}
                    {% set dateCol = dateTimeColSort | map(attribute='colNameDate.name') | first %}
                    {% set timeCol = dateTimeColSort | map(attribute='colNameTimestamp.name') | first %}
                    {% set sortOrdDateTimestamp = dateTimeColSort | map(attribute='sortOrdDateTimestamp') | first %}
                    {% set nsVariables.orderBy = 'to_timestamp("' + dateCol + '" || ' + '\'T\'' + ' ||"' + timeCol + '") ' + sortOrdDateTimestamp %}
                    {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
                    {% set nsVariables.hybridMergeSortFilter = 'to_timestamp(alias."' + dateCol + '" || ' + '\'T\'' + ' || alias."' + timeCol + '")' %}
            
                    {%- set nsVariables.sortKey = desiredState.config.orderByDateTime.get('items') %}
                    {% set nsVariables.sortKey = nsVariables.sortKey | map(attribute='colNameDate.name') | list + nsVariables.sortKey | map(attribute='colNameTimestamp.name') | list %}
                {% endif %}
            
                {%- set nsVariables.tableKey = desiredState.config.partitionBy.get('items') %}
                {% set nsVariables.tableKey = nsVariables.tableKey | map(attribute='partColName.name') | list %}
            
                {%- set nsVariables.tableKeySort = nsVariables.tableKey + nsVariables.sortKey %}
            
                {# Stream Type #}
                {% if desiredState.config.sourceType == 'Table' %} 
                    {% set streamType = 'TABLE' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% elif desiredState.config.sourceType == 'External Table' %} 
                    {% set streamType = 'EXTERNAL TABLE' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% else %} 
                    {% set streamType = 'VIEW' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% endif %}
            
                {# DML Identifier Quoting #}
                {% if ((targetTableDmlIdentifierColumnDatatype in ('FLOAT','BOOLEAN')) or (targetTableDmlIdentifierColumnDatatype[:6] == 'NUMBER')) %}
                    {% set insertValue = desiredState.config.dmlInsert %}
                    {% set deleteValue = desiredState.config.dmlDelete %}
                    {% if desiredState.config.capUpdate == true %}
                        {% set updateValue = desiredState.config.dmlUpdate %}
                    {% endif %}
                {% else %}
                    {% set insertValue = "'" + desiredState.config.dmlInsert + "'" %}
                    {% set deleteValue = "'" + desiredState.config.dmlDelete + "'" %}
                    {% if desiredState.config.capUpdate == true %}
                        {% set updateValue = "'" + desiredState.config.dmlUpdate + "'" %}
                    {% endif %}
                {% endif %}
            
                {# Stream Append Behavior #}
                {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                        {% set streamAppendMode = 'APPEND_ONLY = TRUE' %}
                        {% set changesClauseMode = 'CHANGES(information => append_only)' %}
                {% else %}
                    {% set streamAppendMode = '' %}
                {% endif %}
            
                {# Stream Initial Row Behavior #}
                {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                    {% if desiredState.config.initialRows == true %} 
                        {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = TRUE' %}
                    {% else %} 
                        {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamInitialRowsMode = '' %}
                {% endif %}
            
                {# Stream Insert Only Behavior #}
                {% if streamType == 'EXTERNAL TABLE' %} 
                    {% if desiredState.config.insertOnly == true %} 
                        {% set streamInsertOnlyMode = 'INSERT_ONLY = TRUE' %}
                    {% else %} 
                        {% set streamInsertOnlyMode = 'INSERT_ONLY = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamInsertOnlyMode = '' %}
                {% endif %}
            
                {# Hybrid View Info #}
                {# View created in same schema as Target Table #}
                {% set targetHybridViewDatabase = targetTableDatabase %} 
                {% set targetHybridViewSchema = targetTableSchema %} 
                {% set targetHybridViewName = desiredState.node.name  %}
                {% set fullyQualifiedHybridViewName = targetHybridViewDatabase + '.' + targetHybridViewSchema + '."' + targetHybridViewName + '"' %}
            
                {# Task Info #}
                {% set taskName = desiredState.node.name + '_TASK'  %}
                {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 
            
                {# Task Type #}
                {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
                    {%- set taskType = 'WAREHOUSE = ' + desiredState.config.whName -%} 
                {%- else -%}
                    {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
                {%- endif -%}
            
                {# Schedule Type #}
                {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
                    {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
                {% elif desiredState.config.schedulePeriodOption == 'CRON' %}
                    {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON %}
                {%- else -%}
                    {%- set nsVariables.taskWhenRun = 'AFTER ' -%}
                    {%- set predecessorTasks = (desiredState.config.predTask).split(",") -%}
            
                    {%- for p in predecessorTasks -%}
                        {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + targetTableDatabase + '.' + targetTableSchema + '.' + p -%}
                        {%- if not loop.last -%} 
                            {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + ',' -%}
                        {%- endif %}
                    {% endfor %}    
                {%- endif -%}
            
                {# When Stream has data logic #}
                {%- if desiredState.config.flagSrcStream == true -%} 
                    {%- set streamPoll = "WHEN SYSTEM$STREAM_HAS_DATA('" + fullyQualifiedStreamName + "')" -%} 
                {%- endif -%}
            
                {{ stage('Create Stream') }}
                CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
                    ON {{ streamType }} {{ streamSourceObjectName }}
                    {{ streamAppendMode }}
                    {{ streamInitialRowsMode }}
                    {{ streamInsertOnlyMode }}
                    
                {{ stage('Create Target Table') }}
                CREATE OR REPLACE TABLE {{ fullyQualifiedTargetTableName }}
                    (
                    {%- for col in desiredState.columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    )
            
                {% if desiredState.config.initialRows == true %}
                    {{ stage('Target Table Initial Load') }}
                    INSERT INTO {{ fullyQualifiedTargetTableName }}
                    SELECT
                    {%- for col in desiredState.columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    FROM (SELECT {%- for col in desiredState.columns %}
                                    {% if col.name == targetTableMergeUpdateColumn %}
                                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                    {%- else -%}
                                        "{{ col.name }}" as "{{ col.name }}"
                                    {% endif %}
                                    {%- if not loop.last -%}, {% endif %}
                                {%- endfor %}
                                {% if desiredState.config.softDeleteFlag == false %}
                                    ,case when {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} then 0 else 1 end as load_flag
                                {% endif %}
                        FROM {{ fullyQualifiedStreamName }}
                        QUALIFY {{ nsVariables.rowNumber }} = 1)
                        {% if desiredState.config.softDeleteFlag == false %}
                            WHERE load_flag = 1
                        {% endif %}
                {% endif %}
            
                {{ stage('Create Hybrid View') }}
                CREATE OR REPLACE VIEW {{ fullyQualifiedHybridViewName }} (
                    {%- for col in desiredState.columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %} ) AS
            
                {% if desiredState.config.softDeleteFlag == true and desiredState.config.retainLastNonDeleteFlag == false %}
                    /* SOFT_DELETE = true RETAIN_LAST_NON_DELETE = false */
                    WITH delta AS 
                    (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1)
            
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    WHERE NOT EXISTS (SELECT 1
                                    FROM delta d
                                    WHERE {%- for col in (nsVariables.partition).split(",") %}
                                                a.{{ col }} = d.{{ col }}
                                                {% if not loop.last -%}AND {% endif %}
                                            {%- endfor %})
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM delta d
            
                {% elif desiredState.config.softDeleteFlag == false and desiredState.config.retainLastNonDeleteFlag == false %} 
                    /* SOFT_DELETE = false RETAIN_LAST_NON_DELETE = false */
                    WITH delta AS 
                    (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                ,
                        {%- endfor %}
                                CASE WHEN {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} THEN 0 ELSE 1 END AS LOAD_FLAG
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1)
            
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    WHERE NOT EXISTS (SELECT 1
                                    FROM delta d
                                    WHERE {%- for col in (nsVariables.partition).split(",") %}
                                                a.{{ col }} = d.{{ col }}
                                                {% if not loop.last -%}AND {% endif %}
                                            {%- endfor %})
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM delta d
                    WHERE LOAD_FLAG = 1
            
                {% elif desiredState.config.softDeleteFlag == true and desiredState.config.retainLastNonDeleteFlag == true %} 
                    /* SOFT_DELETE = true RETAIN_LAST_NON_DELETE = true */
                    WITH 
                    a AS (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} != {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),
            
                    d AS (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),
            
                    ods_d as (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  %} 
                                    d."{{ col.name }}" as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                    {{ deleteValue }} as "{{ col.name }}"
                                {% else %}
                                    a."{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    INNER JOIN (
                            SELECT {%- for col in nsVariables.tableKeySort %}
                                            "{{ col }}"
                                        {%- if not loop.last -%}, {% endif %}
                                    {%- endfor %}
                                FROM {{ fullyQualifiedSourceTableName }}
                                {{ changesClauseMode }}
                                {{ changesClauseAt }}
                                WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}) d
                    ON 
                    {% for col in nsVariables.tableKey %}
                        a."{{col}}" = d."{{col}}"
                        {%- if not loop.last -%} AND {% endif %}
                        {%- if loop.last -%} ) {% endif %}
                    {% endfor %}
            
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  %} 
                                    coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                    coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                {% else %}
                                    a."{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM a
                    LEFT OUTER JOIN d
                    ON 
                        {%- for col in nsVariables.tableKey %}
                                a."{{ col }}" = d."{{ col }}" AND
                        {%- endfor %}
                        {{ nsVariables.hybridMergeSortFilter | replace('alias','d') }} > {{ nsVariables.hybridMergeSortFilter | replace('alias','a') }}
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM ods_d
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                                {%- if not loop.last -%}, {% endif %}
                            {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} d
                    WHERE NOT EXISTS (
                        SELECT 1
                        FROM {{ fullyQualifiedSourceTableName }}
                        {{ changesClauseMode }}
                        {{ changesClauseAt }} a
                        WHERE 
                        {%- for col in nsVariables.tableKey %}
                                a."{{ col }}" = d."{{ col }}"
                            {%- if not loop.last -%} AND {% endif %}
                        {%- endfor %})
            
                {% elif desiredState.config.softDeleteFlag == false and desiredState.config.retainLastNonDeleteFlag == true %} 
                    /* SOFT_DELETE = false RETAIN_LAST_NON_DELETE = true */
                    WITH 
                    a AS (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                            {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} != {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),
            
                    d AS (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),
            
                    ods_d as (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  %} 
                                    d."{{ col.name }}" as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                    {{ deleteValue }} as "{{ col.name }}"
                                {% else %}
                                    a."{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    INNER JOIN (
                            SELECT {%- for col in nsVariables.tableKeySort %}
                                            "{{ col }}"
                                        {%- if not loop.last -%}, {% endif %}
                                    {%- endfor %}
                                FROM {{ fullyQualifiedSourceTableName }}
                                {{ changesClauseMode }}
                                {{ changesClauseAt }}
                                WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}) d
                    ON 
                    {% for col in nsVariables.tableKey %}
                        a."{{col}}" = d."{{col}}"
                        {%- if not loop.last -%} AND {% endif %}
                        {%- if loop.last -%} ) {% endif %}
                    {% endfor %}
            
                    SELECT 
                    {%- for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    FROM (
                        SELECT {%- for col in desiredState.columns %}
                                    {% if col.name == targetTableMergeUpdateColumn %}
                                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                    {% elif col.name in nsVariables.orderBy  %} 
                                        coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                    {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                        coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                    {% else %}
                                        a."{{ col.name }}" as "{{ col.name }}"
                                    {% endif %}
                                    ,
                            {%- endfor %}
                            case when coalesce(d.{{ targetTableDmlIdentifierColumnQuotes }}, a.{{ targetTableDmlIdentifierColumnQuotes }}) = {{ deleteValue }} then 0 else 1 end as load_flag
                        FROM a
                        LEFT OUTER JOIN d
                        ON 
                            {%- for col in nsVariables.tableKey %}
                                    a."{{ col }}" = d."{{ col }}" AND
                            {%- endfor %}
                            {{ nsVariables.hybridMergeSortFilter | replace('alias','d') }} > {{ nsVariables.hybridMergeSortFilter | replace('alias','a') }}
                        )
                        WHERE load_flag = 1
                        UNION ALL
                        SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                                {%- if not loop.last -%}, {% endif %}
                            {%- endfor %}
                        FROM ods_d
                        UNION ALL
                        SELECT {%- for col in desiredState.columns %}
                                    "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {%- endfor %}
                        FROM {{ fullyQualifiedTargetTableName }} d
                        WHERE NOT EXISTS (
                            SELECT 1
                            FROM {{ fullyQualifiedSourceTableName }}
                            {{ changesClauseMode }}
                            {{ changesClauseAt }} a
                            WHERE 
                            {%- for col in nsVariables.tableKey %}
                                    a."{{ col }}" = d."{{ col }}"
                                {%- if not loop.last -%} AND {% endif %}
                            {%- endfor %})
            
                {% endif %}
            
                {%- if desiredState.config.schedulePeriodOption == 'Predecessor' -%} 
                    {%- set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + desiredState.config.rootTask + '"' -%} 
                    {{ stage('Suspend Root Task', true, "sql") }}
                    ALTER TASK {{ fullyQualifiedRootTaskName }} SUSPEND
                {%- endif -%}
            
                {{ stage('Create Task') }}
                CREATE OR REPLACE TASK 
                    {{ fullyQualifiedTaskName }} 
                    {{ taskType}} 
                    {{ nsVariables.taskWhenRun }} 
                    {% if nsVariables.poll != 'WHEN ' %} {{ nsVariables.poll }} {% endif %}
                AS 
                MERGE INTO {{ fullyQualifiedTargetTableName }} a
                USING (SELECT
                {%- for col in desiredState.columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% else %}
                                "{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedStreamName }}
                {{ whereStreamFilter }}
                QUALIFY {{ nsVariables.rowNumber }} = 1) d
                ON 
                {% for col in nsVariables.tableKey %}
                    a."{{col}}" = d."{{col}}"
                    {%- if not loop.last -%} AND {% endif %}
                {% endfor %}
            
                WHEN NOT MATCHED and d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ insertValue }} THEN INSERT (
                    {% for col in desiredState.columns %}
                        a."{{ col.name }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                    )
                VALUES (
                    {% for col in desiredState.columns %}
                        d."{{ col.name }}"
                        {% if not loop.last %}, {%- endif -%}
                    {%- endfor -%}
                    )
                {% if desiredState.config.capUpdate == true %}
                    WHEN NOT MATCHED and d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ updateValue }} THEN INSERT (
                        {% for col in desiredState.columns %}
                            a."{{ col.name }}"
                            {% if not loop.last %}, {% endif -%}
                        {%- endfor -%}
                        )
                    VALUES (
                        {% for col in desiredState.columns %}
                            d."{{ col.name }}"
                            {% if not loop.last %}, {%- endif -%}
                        {%- endfor -%}
                        )
                {% endif %}
                WHEN NOT MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} AND /* softDeleteFlag True */ {{ desiredState.config.softDeleteFlag }} = True THEN INSERT (
                    {% for col in desiredState.columns %}
                        a."{{ col.name }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                    )
                VALUES (
                    {% for col in desiredState.columns %}
                        d."{{ col.name }}"
                        {% if not loop.last %}, {%- endif -%}
                    {%- endfor -%}
                    )
                {% if desiredState.config.capUpdate == true %}
                    /* Update DML value selected */
                    WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ updateValue }} THEN UPDATE SET
                        {% for col in targetTableColumnNamesUpdate %}
                            a."{{ col }}" = d."{{ col }}"
                            {% if not loop.last %}, {% endif -%}
                        {%- endfor -%}
                {% endif %}
                WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ insertValue }} THEN UPDATE SET
                    {% for col in targetTableColumnNamesUpdate %}
                        a."{{ col }}" = d."{{ col }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                {% if desiredState.config.softDeleteFlag == true %}
                    /* Soft Delete */
                    WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    THEN UPDATE SET
                        {% for col in (targetTableColumnNamesUpdate) %}
                            {% if (col in (targetTableMergeUpdateColumn, targetTableDmlIdentifierColumn)) or col in (nsVariables.sortKey) %}
                                a."{{ col }}" = d."{{ col }}"
                                {% if not loop.last %}, {% endif -%}
                            {% endif %}
                        {%- endfor -%}
                {% else %}
                    /* Hard Delete */
                    WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    THEN DELETE
                {% endif %}
            
                {%- if desiredState.config.schedulePeriodOption != 'Predecessor' -%} 
                    {{ stage('Resume Task', true, "sql") }}
                    ALTER TASK {{ fullyQualifiedTaskName }} RESUME;
                {%- endif -%}
            
            {% elif currentState != undefined and desiredState == undefined %}
            
                {# Target Stream Location and Name #}
                {% set streamTargetLocationName = currentState.node.location.name %}
                {% set streamTargetDatabaseName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = currentState.node.name + '_STREAM' %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}
            
                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(currentState.node.location.name, currentState.node.name).replace('DM_VIEW_','DM_TABLE_') %}
                {% set targetTableName = currentState.node.name %}
            
                {# Hybrid View Info #}
                {# View created in same schema as Target Table #}
                {% set targetHybridViewDatabase = targetTableDatabase %} 
                {% set targetHybridViewSchema = targetTableSchema %} 
                {% set targetHybridViewName = currentState.node.name  %}
                {% set fullyQualifiedHybridViewName = targetHybridViewDatabase + '.' + targetHybridViewSchema + '."' + targetHybridViewName + '"' %}
            
                {# Task Info #}
                {% set taskName = currentState.node.name + '_TASK'  %}
                {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 
            
                {{ stage('Drop Stream') }}
                DROP STREAM IF EXISTS {{ fullyQualifiedStreamName }}
            
                {{ stage('Drop Table') }}
                DROP TABLE IF EXISTS {{ fullyQualifiedTargetTableName }}
            
                {{ stage('Drop View') }}
                DROP VIEW IF EXISTS {{ fullyQualifiedHybridViewName }}
            
                {%- if currentState.config.schedulingPeriodOption == 'Predecessor' -%} 
                {{ stage('Suspend Root Task', true, "sql") }}
                    ALTER TASK IF EXISTS {{ fullyQualifiedRootTaskName }} SUSPEND
                {{ stage('Drop Current Task', true, "sql") }}
                    DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                {%- else -%}
                {{ stage('Drop Current Task', true, "sql") }}
                    DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                {%- endif -%}
            
            {%- else -%}
            
                {{ stage('Nothing to do.') }}
                select 1 = 0
            
            {% endif %}
    name: Alias Deferred Merge - Append Stream
    version: 1
  StepType-Dimension:
    id: Dimension
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                          SELECT
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  "DIM"."{{ col.name }}"
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                  {{ get_source_transform(col) }}
                              {% endif %}
                              AS "{{ col.name }}",
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                          {{ source.join }}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %}
                          WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %} )
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        {% endif %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension
    version: 1
  StepType-Fact:
    id: Fact
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Fact
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |2-

                {% if node.materializationType == 'table' %}
                    {{ stage('Create Fact Table') }}
                
                    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                
                
                {% elif node.materializationType == 'view' %}
                    {{ stage('Create Fact View') }}
                
                    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                    AS
                    {% for source in sources %}
                
                        {% if loop.first %}SELECT {% endif %}
                
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                
                        {% if not loop.last %} UNION ALL {% endif %}
                    {% endfor %}
                
                {% endif %}
                
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                    
                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
                    
                    {% for source in sources %}
                    
                        {% if has_business_key %}
                    
                            {{ stage('MERGE ' + source.name | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }})
                                AS "SRC"
                            ON
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in source.columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}
                    
                            {{ stage('Insert ' + source.name | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                        {% endif %}
                    {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
                
                
    name: Fact
    version: 1
  StepType-Source:
    id: Source
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Source
        short: null
        tagColor: '#D26000'
        plural: Sources
      templates:
        create:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
        run:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
    name: Source
    version: 1
  StepType-Stage:
    id: Stage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage
    version: 1
  StepType-View:
    id: View
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-persistentStage:
    id: persistentStage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage
    version: 1
subgraphs:
  Subgraph-56:
    id: "56"
    name: Supervised Data
    steps:
      - 9e99ca9b-9c93-4454-85c0-c9592f7a9f99
      - 0b61ea6a-258f-4107-9271-825c33ae0501
      - fd555d58-9016-4e85-b8a4-1d57f8123931
      - 2fa38cf7-5ea6-454f-ac3f-7fa4cd69f094
      - c99a06ea-b1f9-41a6-b746-e7f435adc643
  Subgraph-57:
    id: "57"
    name: CP - UNSP
    steps:
      - 9e99ca9b-9c93-4454-85c0-c9592f7a9f99
      - 0b61ea6a-258f-4107-9271-825c33ae0501
      - a804f266-0572-425a-8eff-f2cd91205885
      - daa0a4c4-4dc0-45fb-92f4-d499fb774e1c
      - 058aceb8-4911-4964-83f5-9ca54e75af12
  Subgraph-58:
    id: "58"
    name: SP Multiseries
    steps:
      - 89a0a39f-daca-4271-a1e7-41abc27f72ae
      - c3498c55-5a7b-4d15-b220-46166d532e4f
      - 8915b6ee-9b22-4726-a936-1cf70caa4a71
      - f1a58ce0-a9e1-4a41-aeee-44f813aee468
      - 29f0e6bd-7f52-4454-bd41-bd3e5a14e094
  Subgraph-59:
    id: "59"
    name: CP - UNSPM
    steps:
      - 89a0a39f-daca-4271-a1e7-41abc27f72ae
      - c3498c55-5a7b-4d15-b220-46166d532e4f
      - c63d25b3-834d-4fe1-ab69-8b15cf377a95
      - 9aa8db0e-c16b-4da6-b6d6-b7f9011a335a
      - 4f26afbe-2a17-49dd-86a9-b2df7b548e98
  Subgraph-61:
    id: "61"
    name: Cortex Function - LLMs
    steps:
      - 1bc4529b-457c-427d-9d1b-469bb4c4b14c
      - ee65d84b-ab5b-422c-908d-97bef046a0ac
  Subgraph-62:
    id: "62"
    name: Contribution Explorer
    steps:
      - b88f0522-903c-4f43-a12a-ce19220f2b00
      - 75ef06c9-1160-41f6-a312-26b62f2f7354
      - 80440213-82b2-4fd7-b28a-41b6f04cb3c2
  Subgraph-63:
    id: "63"
    name: New Subgraph
    steps: []
version: 2
