defaultStorageMapping: SOURCE
installedPackages: {}
jobs: {}
locations:
  SOURCE:
    mappingDefinitions:
      "51":
        database: ADVENTURE_WORKS
        schema: SOURCE
  STAGE:
    mappingDefinitions:
      "51":
        database: ADVENTURE_WORKS
        schema: QA_WORK_STAGE
  TARGET:
    mappingDefinitions:
      "51":
        database: ADVENTURE_WORKS
        schema: QA_WORK_TARGET
macros:
  Macro-1:
    id: "1"
    macroString: |+
      {%- macro even_odd(column) -%}
          CASE WHEN MOD({{ column }}, 2) = 0 THEN 'EVEN' ELSE 'ODD' END
      {%- endmacro %}



      {%- macro unit_measure(column) -%}
          CASE WHEN {{ column }} = 'EA' THEN 'SAP UNIT' ELSE 'NOT AWARE' END
      {%- endmacro %}

      {%- macro PRD_ID(column) -%}
          CASE WHEN {{ column }} = 707 THEN '1' ELSE '0' END
      {%- endmacro %}

      {#-- This macro will drop a table / view / dynamic table if it already exists as a different or the same object type #}
      {#-- Errors can occur when creating a same named object of a different type #}

      {%- macro get_value_by_column_attribute_adv(column_attribute, value="name") -%}
          {%- set filtered_columns_by_attribute = desiredState.columns | selectattr(column_attribute) | list -%}
          {%- if filtered_columns_by_attribute | length > 0 -%}
              {{- (filtered_columns_by_attribute | first)[value] -}}
          {%- else -%}
              ## ERR: COLUMN_NOT_FOUND_WITH_ATTRIBUTE_{{ column_attribute }} ##
          {%- endif -%}
      {%- endmacro -%}

      {% macro dropTblView() %}
        {%- set db = ref_no_link(node.location.name, node.name).split('.')[0]  %} 
        {%- set sch = ref_no_link(node.location.name, node.name).split('.')[1]  %} 
        {%- set obj = "{{ node.name }}"  %} 

          begin
              let db varchar := '{{db}}';
              let sch varchar := '{{sch}}';
              let obj varchar := '{{obj}}';

              begin
                  execute immediate 'drop table if exists ' || db || '.' || sch || '.' || obj;    
              exception
                  when statement_error then
                      null;
              end;

              begin
                  execute immediate 'drop view if exists ' || db || '.' || sch || '.' || obj;    
              exception
                  when statement_error then
                      null;
              end;

              begin
                  execute immediate 'drop dynamic table if exists ' || db || '.' || sch || '.' || obj;    
              exception
                  when statement_error then
                      null;
              end;

              begin
                  execute immediate 'drop task if exists ' || db || '.' || sch || '.' || obj;    
              exception
                  when statement_error then
                      null;
              end;
          end;
      {% endmacro %}

      {% macro resumeRootTask() %}
      {% set tgtDb = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
      {% set tgtSch = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
      {%- set fqRootTaskName = '' + tgtDb + '.' + tgtSch + '.' + desiredState.config.rootTask + ''-%} 

      begin
          let sqlDml := 'select system$task_dependents_enable(''''{{fqRootTaskName}}'''')';
          execute immediate sqlDml;
              exception
                  when statement_error then
                  return 'Task already running';
          return 'Task resumed';
      end;
      {% endmacro %}

      {% macro dup_rename() %}
          {{ sources[0].columns | selectattr('id','equalto',column.id) | map(attribute='sourceColumns') | first | map(attribute='node') | map(attribute='name') | first + "_" + sources[0].columns | selectattr('id','equalto',column.id) | map(attribute='sourceColumns') | first | map(attribute='column') | map(attribute='name') | first }}
      {%- endmacro %}

      {%- macro partition_by() -%}
          {%- set nsVariables = namespace(partition="") -%}
          {%- set sourceTableName = desiredState.node.name -%}

          {%- for i in desiredState.config.partitionBy.get('items') -%}
              {%- set colName = i.partColName.name -%}
              {%- if loop.first -%}
                  {%- set nsVariables.partition = getSourceNameFromColumnName(colName) + '."' + colName + '"' -%}
              {%- else -%}
                  {%- set nsVariables.partition = nsVariables.partition + ',' + getSourceNameFromColumnName(colName) + '."' + colName + '"' -%}
              {%- endif -%}

          {%- endfor -%}

          {{- nsVariables.partition -}}

      {%- endmacro -%}

      {%- macro partition_by_adv() -%}
          {%- set nsVariables = namespace(partition="") -%}
          {%- set sourceTableName = desiredState.node.name -%}

          {%- for i in desiredState.config.partitionBy.get('items') -%}
              {%- set colName = i.partColName.name -%}
              {%- if loop.first -%}
                  {%- set nsVariables.partition = getSourceNameFromColumnName_adv(colName) + '."' + colName + '"' -%}
              {%- else -%}
                  {%- set nsVariables.partition = nsVariables.partition + ',' + getSourceNameFromColumnName_adv(colName) + '."' + colName + '"' -%}
              {%- endif -%}

          {%- endfor -%}

          {{- nsVariables.partition -}}

      {%- endmacro -%}

      {% macro order_by_col_adv(return) %}
          {% set nsVariables = namespace(orderBy="") -%}

          {% if desiredState.config.recordVersioning in ('Datetime Column') -%}
              {% set datetimeNumericColSort = desiredState.config.orderBy.get('items') -%}
              {% set dateTimeCol = datetimeNumericColSort  | map(attribute='colName.name') | first -%}        
              {% set nsVariables.orderBy = getSourceNameFromColumnName_adv(dateTimeCol) + '."' + dateTimeCol + '"' -%}       
          {% else -%}
              {% set dateTimeColSort = desiredState.config.orderByDateTime.get('items') -%}
              {% set dateCol = dateTimeColSort | map(attribute='colNameDate.name') | first -%}
              {% set timeCol = dateTimeColSort | map(attribute='colNameTimestamp.name') | first -%}
              {% set nsVariables.orderBy = 'to_timestamp(' + getSourceNameFromColumnName_adv(dateCol) + '."' + dateCol + '" || ' + '\'T\'' + ' ||' + getSourceNameFromColumnName_adv(timeCol) + '."' + timeCol + '")' -%}
          {% endif -%}

          {{ nsVariables.orderBy }}

      {% endmacro %}

      {% macro order_by_col(return) %}
          {% set nsVariables = namespace(orderBy="") -%}

          {% if config.recordVersioning in ('Datetime Column','Numeric Column') -%}
              {% set datetimeNumericColSort = config.orderBy.get('items') -%}
              {% set dateTimeCol = datetimeNumericColSort  | map(attribute='colName.name') | first -%}        
              {% set nsVariables.orderBy = getSourceNameFromColumnName(dateTimeCol) + '."' + dateTimeCol + '"' -%}
          {% else -%}
              {% set dateTimeColSort = config.orderByDateTime.get('items') -%}
              {% set dateCol = dateTimeColSort | map(attribute='colNameDate.name') | first -%}
              {% set timeCol = dateTimeColSort | map(attribute='colNameTimestamp.name') | first -%}
              {% set nsVariables.orderBy = 'to_timestamp(' + getSourceNameFromColumnName(dateCol) + '."' + dateCol + '" || ' + '\'T\'' + ' ||' + getSourceNameFromColumnName(timeCol) + '."' + timeCol + '")' -%}
          {% endif -%}

          {{ nsVariables.orderBy }}

      {% endmacro %}

      {% macro dimensionHistoryPk_adv() %}
          {%- set nsVariables = namespace(dimensionHistoryColumns="") -%}

          {%- set partitionBy = partition_by_adv().split(",") -%}
          {%- set orderBy = order_by_col_adv() -%}

          {%- for col in partitionBy -%}
              {%- if loop.first -%}
                  {%- set nsVariables.dimensionHistoryColumns = col -%}
              {%- else -%}
                  {%- set nsVariables.dimensionHistoryColumns = nsVariables.dimensionHistoryColumns + ' || ' + '\'-\'' + ' ||' + col -%}
              {%- endif -%}
          {%- endfor -%}

          {%- set nsVariables.dimensionHistoryColumns = nsVariables.dimensionHistoryColumns + ' || ' + '\'-\'' + ' || date_part(epoch_milliseconds, ' + orderBy + ')' -%}

          {{- nsVariables.dimensionHistoryColumns -}}

      {% endmacro %}

      {% macro dimensionHistoryPk() %}
          {%- set nsVariables = namespace(dimensionHistoryColumns="") -%}

          {%- set partitionBy = partition_by().split(",") -%}
          {%- set orderBy = order_by_col() -%}

          {%- for col in partitionBy -%}
              {%- if loop.first -%}
                  {%- set nsVariables.dimensionHistoryColumns = col -%}
              {%- else -%}
                  {%- set nsVariables.dimensionHistoryColumns = nsVariables.dimensionHistoryColumns + ' || ' + '\'-\'' + ' ||' + col -%}
              {%- endif -%}
          {%- endfor -%}

          {%- set nsVariables.dimensionHistoryColumns = nsVariables.dimensionHistoryColumns + ' || ' + '\'-\'' + ' || date_part(epoch_milliseconds, ' + orderBy + ')' -%}

          {{- nsVariables.dimensionHistoryColumns -}}

      {% endmacro %}

      {% macro sourceTable() %}
          {%- set nsVariables = namespace(partition="") -%}
          {% set sourceTableName = desiredState.node.name %}

          {%- for i in desiredState.config.partitionBy.get('items') -%}

          {%- if loop.first -%}
              {%- set nsVariables.partition = '"' + sourceTableName + '"."' + i.partColName.name + '"' -%}
          {%- else -%}
              {%- set nsVariables.partition = nsVariables.partition + ',"' + sourceTableName + '"."' + i.partColName.name + '"' -%}
          {%- endif -%}

          {%- endfor %}

          {{- nsVariables.partition -}}

      {% endmacro %}

      {%- macro getColumnId( colName ) -%}

          {%- set columnId = columns | selectattr('name','equalto',colName) | map(attribute='id') | first -%}

          {{- columnId -}}

      {%- endmacro -%}

      {% macro getSourceNameFromColumnName( colName ) %}

          {%- set sourceObject = sources[0].columns | selectattr('id','eq',getColumnId( colName )) | map(attribute='sourceColumns')  | first | map(attribute='node.name') | first -%}

          "{{- sourceObject -}}"

      {% endmacro %}

      {% macro getSourceNameFromColumnId( colId ) %}

          {%- set sourceObject = sources[0].columns | selectattr('id','eq',colId) | map(attribute='sourceColumns')  | first | map(attribute='node.name') | first -%}

          "{{- sourceObject -}}"

      {% endmacro %}

      {%- macro getColumnId_adv( colName ) -%}

          {%- set columnId = desiredState.columns | selectattr('name','equalto',colName) | map(attribute='id') | first -%}

          {{- columnId -}}

      {%- endmacro -%}

      {% macro getSourceNameFromColumnName_adv( colName ) %}

          {%- set sourceObject = desiredState.sources[0].columns | selectattr('id','eq',getColumnId_adv( colName )) | map(attribute='sourceColumns')  | first | map(attribute='node.name') | first -%}

          "{{- sourceObject -}}"

      {% endmacro %}

      {% macro getSourceNameFromColumnId_adv( colId ) %}

          {%- set sourceObject = desiredState.sources[0].columns | selectattr('id','eq',colId) | map(attribute='sourceColumns')  | first | map(attribute='node.name') | first -%}

          "{{- sourceObject -}}"

      {% endmacro %}

      {%- macro ref_raw(location_name, node_name) -%}
          {%- raw -%}{{ ref('{% endraw %}{{- location_name }}{% raw %}', '{% endraw %}{{ node_name }}{% raw %}') }}{% endraw %}
      {%- endmacro -%}

      {%- macro ref_no_link_raw(location_name, node_name) -%}
          {% raw %}{{ ref_no_link('{% endraw %}{{ location_name }}{% raw %}', '{% endraw %}{{ node_name }}{% raw %}') }}{% endraw %}
      {%- endmacro -%}

      {%- macro ref_link_raw(location_name, node_name) -%}
          {% raw %}{{ ref_link('{% endraw %}{{ location_name }}{% raw %}', '{% endraw %}{{ node_name }}{% raw %}') }}{% endraw %}
      {%- endmacro -%}


      {%- macro join_columns() -%}
          {%- set nsVariables = namespace(partition="") -%}
          {%- set sourceTableName = node.name -%}

          {%- for i in config.partitionBy.get('items') -%}
              {%- set colName = i.partColName.name -%}
              {%- if loop.first -%}
                  {%- set nsVariables.partition = colName -%}
              {%- else -%}
                  {%- set nsVariables.partition = nsVariables.partition + ',' + colName -%}
              {%- endif -%}

          {%- endfor -%}

          {{- nsVariables.partition -}}

      {%- endmacro -%}

packages: {}
projects: {}
stepTypes:
  StepType-143:
    id: "143"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension Group All Distinct
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Distinct
            attributeName: selectDistinct
            type: toggleButton
            enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"
            default: false
            

          - displayName: Group By All
            attributeName: groupByAll
            type: toggleButton
            default: false
            enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"    

          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% if config.selectDistinct %}
                        DISTINCT
                        {% endif %}
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        {% if config.groupByAll %}
                        GROUP BY ALL
                        {% endif %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% if config.selectDistinct %}
                        DISTINCT
                        {% endif %}
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {% if config.groupByAll %}
                        GROUP BY ALL
                        {% endif %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {% if config.selectDistinct %}
                        DISTINCT
                        {% endif %}
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {% if config.groupByAll %}
                        GROUP BY ALL
                        {% endif %}
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                          SELECT
                          {% if config.selectDistinct %}
                          DISTINCT
                          {% endif %}
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  "DIM"."{{ col.name }}"
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                  {{ get_source_transform(col) }}
                              {% endif %}
                              AS "{{ col.name }}",
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                          {{ source.join }}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %}
                          WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %} )
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        {% endif %}
                    {% if config.groupByAll %}
                    GROUP BY ALL
                    {% endif %}    
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% if config.selectDistinct %}
                            DISTINCT
                            {% endif %}
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }}
                             {% if config.groupByAll %}
                             GROUP BY ALL
                             {% endif %}
                             )               
                            AS "SRC"               
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension Group All Distinct
    version: 1
  StepType-146:
    id: "146"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Work Group All Distinct
        short: WRK
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Distinct
            attributeName: selectDistinct
            type: toggleButton
            default: false
            enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"

          - displayName: Group By All
            attributeName: groupByAll
            type: toggleButton
            enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"
            default: false

            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Work Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Work View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% if config.selectDistinct %}
                    DISTINCT
                    {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
                {% if config.groupByAll %}
            		Group By All
            		{% endif %}

            {% endif %}
        run:
          templateString: |
            {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	    {% if node.isMultisource %}
                        {% set insertStrategy = config.insertStrategy  %}
            		{% else %}
            		    {% set insertStrategy = 'INSERT' %}
            		{% endif %}
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage(insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
             			SELECT
            			{% if config.selectDistinct %}
            			DISTINCT
            			{% endif %}
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            			{% if config.groupByAll %}
            			Group By All
            			{% endif %}	
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}

            		
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}
             

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Work Group All Distinct
    version: 1
  StepType-147:
    id: "147"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Fact Group All Distinct
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Distinct
            attributeName: selectDistinct
            type: toggleButton
            default: false
            enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"

          - displayName: Group By All
            attributeName: groupByAll
            type: toggleButton
            default: false
            enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"   

          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |2-

                {% if node.materializationType == 'table' %}
                    {{ stage('Create Fact Table') }}
                
                    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                
                
                {% elif node.materializationType == 'view' %}
                    {{ stage('Create Fact View') }}
                
                    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                    AS
                    {% for source in sources %}
                
                        {% if loop.first %}SELECT {% endif %}
                
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                
                        {% if not loop.last %} UNION ALL {% endif %}
                    {% endfor %}
                
                {% endif %}
                
        run:
          templateString: |
            {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                    
                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
                    
                    {% for source in sources %}
                    
                        {% if has_business_key %}
                    
                            {{ stage('MERGE ' + source.name | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                                SELECT
                                {% if config.selectDistinct %}
                                DISTINCT
                                {% endif %}
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                                {% if config.groupByAll %}
                                GROUP BY ALL
                                {% endif %}
                                )
                                AS "SRC"
                            ON
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in source.columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}
                    
                            {{ stage('Insert ' + source.name | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                                SELECT
                                {% if config.selectDistinct %}
                                DISTINCT
                                {% endif %}
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                             {% if config.groupByAll %}
                             GROUP BY ALL
                             {% endif %}
                        {% endif %}
                    {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
    name: Fact Group All Distinct
    version: 1
  StepType-156:
    id: "156"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dyanmic Table Work
        short: DT_WRK
        tagColor: "#F6FF3C"
        isDisabled: true
        plural: Dynamic Tables

        deployStrategy: advanced

        config:
          - groupName: Dynamic Table Options
            items: 
            - displayName: Warehouse on which to execute Dynamic Table
              attributeName: warehouseName
              type: textBox
              default: dev_wh_xs
              isRequired: true

            - type: toggleButton
              attributeName: downstreamOption
              displayName: Downstream
              default: false
              isRequired: true

            - type: tabular
              displayName: 'Lag Specification'
              attributeName: lagSpecification
              columns:
          
              -  type: textBox
                 displayName: Time Value
                 attributeName: lagValue
                 default: 60
                 isRequired: false
                 enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"
            
              -  type: dropdownSelector
                 displayName: Time Period
                 attributeName: lagPeriod
                 default: "Minutes"
                 options:
                 - Seconds
                 - Minutes
                 - Hours
                 - Days
                 isRequired: false
                 enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"
            
              isRequired: false
              enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"

            - type: dropdownSelector
              displayName: Refresh Mode
              attributeName: refresh_mode
              default: "AUTO"
              options:
              - AUTO
              - INCREMENTAL
              - FULL
              isRequired: true

            - type: dropdownSelector   
              displayName: Initialize
              attributeName: initialize
              default: "ON_CREATE"
              options:
              - ON_CREATE
              - ON_SCHEDULE 
              isRequired: true

          - groupName: General Options
            items: 
            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct
              default: false
              enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"

            - type: toggleButton
              attributeName: groupByAll
              displayName: Group By All
              default: false
              enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"

            - type: multisourceToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION ALL
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - groupName: Hidden Config
            enableIf: "false"
            items:
            - displayName: Type
              type: materializationSelector
              default: Dynamic Table
              options:
              - Dynamic Table
              isRequired: false
      templates:
        create:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Dynamic Table Stage  == #}
            {# == Node Type Description    : This node creates and runs dynamic table stage  == #}


            {% if desiredState == currentState %}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% elif desiredState %}
                ## Identify all config changes that would cause a CREATE instead of ALTER
                {% if currentState != undefined %} 
                    ## General metadata
                    {% set columnsTest = currentState.columns == desiredState.columns %}
                    {% set sourcesTest = currentState.sources | count == desiredState.sources | count %}
                    {% set joinTest = currentState.join == desiredState.join %}

                    {# Test to see if the transform in a column has changed #}
                    {# Desired Namespace Variables Transform #}
                    {% set desiredTransformArray = desiredState.sources | map(attribute='columns') | first | map(attribute='transform') | list -%}

                    {# Test to see if the transform in a column has changed #}
                    {# Current Namespace Variables Transform #}
                    {% set currentTransformArray = currentState.sources | map(attribute='columns') | first | map(attribute='transform') | list -%}

                    {% set columnsTransformTest = currentTransformArray == desiredTransformArray %}

                    ## Storage Location Tests
                    ## Only need to account for updated Storage Location mappings 
                    ## sourceTest handles changed Storage Location Names
                    ## Current Namespace Variables
                    {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                    ## Current State Storage Location Info
                    {% for source in currentState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                    {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                    {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                    {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                    ## Desired Namespace Variables
                    {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                    {% set nsVariables = namespace(storageLocationTest="") %}

                    ## Desired State Storage Location Info
                    {% for source in desiredState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                    {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                    {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                    {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                    ## Storage Location Tests
                    ## Only need to account for updated Storage Location mappings
                    ## sourceTest handles changed Storage Location Names
                    {% set nsVariables.storageLocationTest = true %}
                    {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                        ## Current mappings
                        {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                        
                        ## Desired mappings
                        {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                        {% if currentDatabaseSchema != desiredDatabaseSchema %}
                            {% set nsVariables.storageLocationTest = false %}
                        {% endif %}
                    {% endfor %}

                    ## Config
                    {% set insertStrategyTest = currentState.config.insertStrategy == desiredState.config.insertStrategy %}
                    {% set groupByAllTest = currentState.config.groupByAll == desiredState.config.groupByAll %}
                    {% set selectDistinctTest = currentState.config.selectDistinct == desiredState.config.selectDistinct %}

                    ## Node
                    {% set nodeNameTest = currentState.node.name == desiredState.node.name %}
                    {% set nodeMaterializationType = currentState.node.materializationType == desiredState.node.materializationType %}
                    {% set nodeIsMultisource = currentState.node.isMultisource == desiredState.node.isMultisource %}

                    ## Refresh_mode test
                    {% set refreshTest = currentState.config.refresh_mode == desiredState.config.refresh_mode %}

                    ## Initialize test
                    {% set initializeTest = currentState.config.initialize == desiredState.config.initialize %}


                    ## If any of the above are false then a CREATE must be run
                    {% if 
                        columnsTest == false or
                        sourcesTest == false or
                        joinTest == false or
                        columnsTransformTest == false or
                        nsVariables.storageLocationTest == false or
                        insertStrategyTest == false or 
                        groupByAllTest == false or 
                        selectDistinctTest == false or 
                        nodeNameTest == false or 
                        nodeMaterializationType == false or 
                        nodeIsMultisource == false or 
                        initializeTest == false or
                        refreshTest == false %}    

                        {% set createTest = true %}
                    {% else %}
                        {% set createTest = false %}
                    {% endif %}
                {% endif %}
                
                ## Identify config changes that would only result in ALTER
                {% if createTest == false %}
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set warehouseTest = currentState.config.warehouseName == desiredState.config.warehouseName %}
                    {% else %}
                        {% set warehouseTest = currentState.parameters.targetDynamicTableWarehouse == desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}
                    {% set lagSpecificationTest = currentState.config.lagSpecification == desiredState.config.lagSpecification %}
                    {% set downstreamOptionTest = currentState.config.downstreamOption == desiredState.config.downstreamOption %}
                    {% set nodeCommentTest = currentState.node.description == desiredState.node.description %}

                    {% if 
                        warehouseTest == false or
                        lagSpecificationTest == false or
                        downstreamOptionTest == false or
                        nodeCommentTest == false %}    

                        {% set alterOnlyTest = true %}
                    {% else %}
                        {% set alterOnlyTest = false %}
                    {% endif %}
                {% endif %}


                ## CREATE or ALTER
                {% if (currentState == undefined) or (createTest == true) %}

                    ## Dynamic Table Name
                    {% set targetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set targetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set fullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                    ## Warehouse
                    ## Can be updated during deployment via a parameter to account for different warehouse names in different deployments
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set dynamicTableWarehouse = desiredState.config.warehouseName %}
                    {% else %}
                        {% set dynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}

                    ## Downstream Option or Lag Specification
                    {% if desiredState.config.downstreamOption == true %}
                        {% set dynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set dynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set dynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set dynamicTableLagSpecification = dynamicTableLagValue ~ ' ' ~ dynamicTableLagValuePeriod %}
                    {% endif %}

                    ## Refresh-type option
                    {% set dynamicTablerefresh = desiredState.config.refresh_mode %}

                    ##Initialize option
                    {% set dynamicTableinitialize = desiredState.config.initialize %}

                    ## Node description
                    {%- if desiredState.node.description | length > 0 %} 
                        {% set dynamicTableComment = "COMMENT = " + "'" + desiredState.node.description + "'" %}
                    {% endif %}

                    {{ stage('Create Dynamic Work Table', true, "sql", "create") }}
                    CREATE OR REPLACE DYNAMIC TABLE {{ fullyQualifiedTargetDynamicTableName }}
                        TARGET_LAG = '{{ dynamicTableLagSpecification }}'
                        WAREHOUSE = {{dynamicTableWarehouse}}
                        REFRESH_MODE   = {{dynamicTablerefresh}}
                        INITIALIZE = {{dynamicTableinitialize}}
                        {{ dynamicTableComment }}
                    (
                        {% for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    AS
                    {% for source in desiredState.sources %}
                        SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}

                        {{ source.join }}

                        {% if not loop.last %}
                            {% if desiredState.config.insertStrategy in ['UNION', 'UNION ALL'] %}
                                {{ desiredState.config.insertStrategy }}
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                    {% if desiredState.config.groupByAll %} GROUP BY ALL {% endif %}



                {% elif (currentState != undefined) and (alterOnlyTest == true) %}

                    ## Desired Dynamic Table Name
                    {% set desiredTargetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set desiredTargetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set desiredFullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                    ## Desired Warehouse
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set desiredDynamicTableWarehouse = desiredState.config.warehouseName %}
                    {% else %}
                        {% set desiredDynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}


                    ## Desired Downstream Option or Lag Specification
                    {% if desiredState.config.downstreamOption == true %}
                        {% set desiredDynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set desiredDynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set desiredDynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set desiredDynamicTableLagSpecification = desiredDynamicTableLagValue ~ ' ' ~ desiredDynamicTableLagValuePeriod %}
                    {% endif %}



                    ## Current Warehouse
                    {% set currentDynamicTableWarehouse = currentState.config.warehouseName %}

                    ## Current Downstream Option or Lag Specification
                    {% if currentState.config.downstreamOption == true %}
                        {% set currentDynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set currentDynamicTableLagValue = currentState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set currentDynamicTableLagValuePeriod = currentState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set currentDynamicTableLagSpecification = currentDynamicTableLagValue ~ ' ' ~ currentDynamicTableLagValuePeriod %}
                    {% endif %}
                    



                    ## ALTER for Warehouse if necessary
                    {% set dynamicTableWarehouse = '' %}
                    {% if desiredDynamicTableWarehouse != currentDynamicTableWarehouse %}
                        {% set dynamicTableWarehouse = 'WAREHOUSE = ' + desiredDynamicTableWarehouse %}
                    {% endif %}

                    ## Alter for Target lag if necessary
                    {% set dynamicTableLagSpecification = '' %}
                    {% if desiredDynamicTableLagSpecification != currentDynamicTableLagSpecification %}
                        {% if desiredDynamicTableLagSpecification == 'DOWNSTREAM' %}
                            {% set dynamicTableLagSpecification = 'TARGET_LAG = DOWNSTREAM' %}
                        {% else %}
                            {% set dynamicTableLagSpecification = 'TARGET_LAG = ' + '\'' + desiredDynamicTableLagSpecification + '\'' %}
                        {% endif %}
                    {% endif %}



                    {%- if desiredState.node.description | length > 0 %} 
                        {% set dynamicTableComment = "COMMENT = " + "'" + desiredState.node.description + "'" %}
                    {% endif %}

                    {{ stage('Alter Dynamic Table', true, "sql", "create") }}
                    ALTER DYNAMIC TABLE {{ desiredFullyQualifiedTargetDynamicTableName }} SET
                        {{ dynamicTableWarehouse }}
                        {{ dynamicTableLagSpecification }}
                        {{ dynamicTableComment }}
                    
                    {{ stage('Refresh Dynamic Table', true, "sql", "create") }}
                    ALTER DYNAMIC TABLE {{ desiredFullyQualifiedTargetDynamicTableName }} REFRESH

                {% else %}
                    {{ stage('Nothing to do.') }}
                    select 1 = 0
                
                {% endif %}
                    
            {% elif currentState != undefined and desiredState == undefined %}

                ## Dynamic Table Name
                {% set targetDynamicTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetDynamicTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetDynamicTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {{ stage('Drop Dynamic Table', true, "sql", "drop") }}
                DROP DYNAMIC TABLE IF EXISTS {{ fullyQualifiedTargetDynamicTableName }}


            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: ""
    name: Dynamic Table Work
    version: 1
  StepType-157:
    id: "157"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Dyanmic Table Dimension
        short: DT_DIM
        tagColor: "#F6FF3C"
        isDisabled: true
        plural: Dynamic Tables

        deployStrategy: advanced

        config:
          - groupName: Dynamic Table Options
            items: 
            - displayName: Warehouse on which to execute Dynamic Table
              attributeName: warehouseName
              type: textBox
              default: dev_wh_xs
              isRequired: true

            - type: toggleButton
              attributeName: downstreamOption
              displayName: Downstream
              default: false
              isRequired: true

            - type: tabular
              displayName: 'Lag Specification'
              attributeName: lagSpecification
              columns:
          
              -  type: textBox
                 displayName: Time Value
                 attributeName: lagValue
                 default: 60
                 isRequired: false
                 enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"
            
              -  type: dropdownSelector
                 displayName: Time Period
                 attributeName: lagPeriod
                 default: "Minutes"
                 options:
                 - Seconds
                 - Minutes
                 - Hours
                 - Days
                 isRequired: false
                 enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"
            
              isRequired: false
              enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"

            - type: dropdownSelector
              displayName: Refresh Mode
              attributeName: refresh_mode
              default: "AUTO"
              options:
              - AUTO
              - INCREMENTAL
              - FULL
              isRequired: true

            - type: dropdownSelector   
              displayName: Initialize
              attributeName: initialize
              default: "ON_CREATE"
              options:
              - ON_CREATE
              - ON_SCHEDULE 
              isRequired: true

          - groupName: Dimension Options
            items:
            - type: tabular
              displayName: 'Table Key(s)'
              attributeName: partitionBy
              columns:
          
              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: partColName
                 isRequired: true
                
              isRequired: true

            - displayName: Record Versioning
              attributeName: recordVersioning
              type: dropdownSelector
              default: Datetime Column
              options:
                - Datetime Column
                - Date Column and Time Column
              isRequired: true

            - type: tabular
              displayName: 'Timestamp or Sequence'
              attributeName: orderBy
              columns:
          
              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: colName
                 isRequired: true
                 enableIf: "{% if config.recordVersioning in ('Datetime Column') %} true {% else %} false {% endif %}"
            
              isRequired: false
              enableIf: "{% if config.recordVersioning in ('Datetime Column') %} true {% else %} false {% endif %}"

            - type: tabular
              displayName: 'Date / Timestamp Columns'
              attributeName: orderByDateTime
              columns:
          
              -  type: columnDropdownSelector
                 displayName: Date Column
                 attributeName: colNameDate
                 isRequired: true
                 enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
              -  type: columnDropdownSelector
                 displayName: Timestamp Column
                 attributeName: colNameTimestamp
                 isRequired: true
                 enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
              -  type: dropdownSelector
                 displayName: Sort Order
                 attributeName: sortOrdDateTimestamp
                 default: desc
                 options:
                 - desc
                 - asc
                 isRequired: true
                 enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
              isRequired: false
              enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"


          - groupName: Hidden Config
            enableIf: "false"
            items:
            - displayName: Type
              type: materializationSelector
              default: Dynamic Table
              options:
              - Dynamic Table
              isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: '{{ dimensionHistoryPk_adv() }}'
          dataType: STRING
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: RECORD_START_TIME
          transform: '{{ order_by_col_adv() }}'
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: RECORD_END_TIME
          transform: 'LEAD({{ order_by_col_adv()}}) OVER (PARTITION BY {{ partition_by_adv() }} ORDER BY {{ order_by_col_adv() }} asc)'
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: RECORD_CURRENT_FLAG
          transform: 'CASE WHEN (LEAD({{ order_by_col_adv()}}) OVER (PARTITION BY {{ partition_by_adv() }} ORDER BY {{ order_by_col_adv() }} asc)) IS NULL THEN 1 ELSE 0 END'
          dataType: NUMERIC
          placement: end
          attributeName: isRecordCurrent

        - displayName: RECORD_CREATED_DATE
          transform: 'FIRST_VALUE({{ order_by_col_adv()}}) OVER (PARTITION BY {{ partition_by_adv() }} ORDER BY {{ order_by_col_adv() }} asc)'
          dataType: TIMESTAMP
          placement: end
          attributeName: recordCreated
      templates:
        create:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalesce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Dynamic Table Dimension  == #}
            {# == Node Type Description    : This node creates and runs dynamic table dimension  == #}


            {% if desiredState == currentState %}

            {{ stage('Nothing to do.') }}
            select 1 = 0
            {% elif desiredState %}
                ## Identify all config changes that would cause a CREATE instead of ALTER
                {% if currentState != undefined %} 
                    ## General metadata
                    {% set columnsTest = currentState.columns == desiredState.columns %}
                    {% set sourcesTest = currentState.sources == desiredState.sources %}

                    ## Storage Location Tests
                    ## Only need to account for updated Storage Location mappings 
                    ## sourceTest handles changed Storage Location Names
                    ## Current Namespace Varialbes
                    {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                    ## Current State Storage Location Info
                    {% for source in currentState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                    {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                    {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                    {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                    ## Desired Namespace Variables
                    {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                    {% set nsVariables = namespace(storageLocationTest="") %}

                    ## Desired State Storage Location Info
                    {% for source in desiredState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                    {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                    {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                    {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                    ## Test 
                    {% set nsVariables.storageLocationTest = true %}
                    {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                        ## Current mappings
                        {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                        
                        ## Desired mappings
                        {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                        {% if currentDatabaseSchema != desiredDatabaseSchema %}
                            {% set nsVariables.storageLocationTest = false %}
                        {% endif %}
                    {% endfor %}

                    ## Config
                    {% set insertStrategyTest = currentState.config.insertStrategy == desiredState.config.insertStrategy %}


                    ## Node
                    {% set nodeNameTest = currentState.node.name == desiredState.node.name %}
                    {% set nodeMaterializationType = currentState.node.materializationType == desiredState.node.materializationType %}
                    {% set nodeIsMultisource = currentState.node.isMultisource == desiredState.node.isMultisource %}


                    ## Refresh_mode test
                    {% set refreshTest = currentState.config.refresh_mode == desiredState.config.refresh_mode %}

                    ## Initialize test
                    {% set initializeTest = currentState.config.initialize == desiredState.config.initialize %}

                    ## If any of the above are false then a CREATE must be run
                    {% if 
                        columnsTest == false or
                        sourcesTest == false or
                        nsVariables.storageLocationTest == false or
                        insertStrategyTest == false or 
                        nodeNameTest == false or 
                        nodeMaterializationType == false or 
                        nodeIsMultisource == false or 
                        initializeTest == false or 
                        refreshTest == false %}    

                        {% set createTest = true %}
                    {% else %}
                        {% set createTest = false %}
                    {% endif %}
                {% endif %}
                
                ## Identify config changes that would only result in ALTER
                {% if createTest == false %}
                    {% set warehouseTest = currentState.config.warehouseName == desiredState.config.warehouseName %}
                    {% set lagSpecificationTest = currentState.config.lagSpecification == desiredState.config.lagSpecification %}
                    {% set downstreamOptionTest = currentState.config.downstreamOption == desiredState.config.downstreamOption %}
                    {% set nodeCommentTest = currentState.node.description == desiredState.node.description %}

                    {% if 
                        warehouseTest == false or
                        lagSpecificationTest == false or
                        downstreamOptionTest == false or
                        nodeCommentTest == false %}    

                        {% set alterOnlyTest = true %}
                    {% else %}
                        {% set alterOnlyTest = false %}
                    {% endif %}
                {% endif %}


                ## CREATE or ALTER
                {% if (currentState == undefined) or (createTest == true) %}

                    ## Dynamic Table Name
                    {% set targetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set targetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set fullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                    ## Warehouse
                    ## Can be updated during deployment via a parameter to account for different warehouse names in different deployments
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set dynamicTableWarehouse = desiredState.config.warehouseName %}
                    {% else %}
                        {% set dynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}

                    ## Downstream Option or Lag Specification
                    {% if desiredState.config.downstreamOption == true %}
                        {% set dynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set dynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set dynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set dynamicTableLagSpecification = dynamicTableLagValue ~ ' ' ~ dynamicTableLagValuePeriod %}
                    {% endif %}

                    ## Refresh-type option
                    {% set dynamicTablerefresh = desiredState.config.refresh_mode %}

                    ##Initialize option
                    {% set dynamicTableinitialize = desiredState.config.initialize %}

                    {{ stage('Create Dynamic Dimension Table', true, "sql", "create") }}
                    CREATE OR REPLACE DYNAMIC TABLE {{ fullyQualifiedTargetDynamicTableName }}
                        TARGET_LAG = '{{ dynamicTableLagSpecification }}'
                        WAREHOUSE = {{dynamicTableWarehouse}}
                        REFRESH_MODE   = {{dynamicTablerefresh}}
                        INITIALIZE = {{dynamicTableinitialize}}
                        {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description }}'{% endif %}
                    (
                        {% for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    AS
                    {% for source in desiredState.sources %}
                        SELECT 
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}

                        {{ source.join }}

                        {% if not loop.last %}
                            {% if desiredState.config.insertStrategy in ['UNION', 'UNION ALL'] %}
                                {{ desiredState.config.insertStrategy }}
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                    

                {% elif (currentState != undefined) and (alterOnlyTest == true) %}

                    ## Desired Dynamic Table Name
                    {% set desiredTargetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set desiredTargetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set desiredFullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                    ## Desired Warehouse
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set desiredDynamicTableWarehouse = desiredState.config.warehouseName %}
                    {% else %}
                        {% set desiredDynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}


                    ## Desired Downstream Option or Lag Specification
                    {% if desiredState.config.downstreamOption == true %}
                        {% set desiredDynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set desiredDynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set desiredDynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set desiredDynamicTableLagSpecification = desiredDynamicTableLagValue ~ ' ' ~ desiredDynamicTableLagValuePeriod %}
                    {% endif %}

                    ## Current Warehouse
                    {% set currentDynamicTableWarehouse = currentState.config.warehouseName %}

                    ## Current Downstream Option or Lag Specification
                    {% if currentState.config.downstreamOption == true %}
                        {% set currentDynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set currentDynamicTableLagValue = currentState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set currentDynamicTableLagValuePeriod = currentState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set currentDynamicTableLagSpecification = currentDynamicTableLagValue ~ ' ' ~ currentDynamicTableLagValuePeriod %}
                    {% endif %}

                    ## ALTER for Warehouse if necessary
                    {% set dynamicTableWarehouse = '' %}
                    {% if desiredDynamicTableWarehouse != currentDynamicTableWarehouse %}
                        {% set dynamicTableWarehouse = 'WAREHOUSE = ' + desiredDynamicTableWarehouse %}
                    {% endif %}

                    ## Alter for Target lag if necessary
                    {% set dynamicTableLagSpecification = '' %}
                    {% if desiredDynamicTableLagSpecification != currentDynamicTableLagSpecification %}
                        {% if desiredDynamicTableLagSpecification == 'DOWNSTREAM' %}
                            {% set dynamicTableLagSpecification = 'TARGET_LAG = DOWNSTREAM' %}
                        {% else %}
                            {% set dynamicTableLagSpecification = 'TARGET_LAG = ' + '\'' + desiredDynamicTableLagSpecification + '\'' %}
                        {% endif %}
                    {% endif %}

                    {%- if desiredState.node.description | length > 0 %}
                        {% set dynamicTableComment = "COMMENT = " + "'" + desiredState.node.description + "'" %}
                    {% endif %}

                    {{ stage('Alter Dynamic Table', true, "sql", "create") }}
                    ALTER DYNAMIC TABLE {{ desiredFullyQualifiedTargetDynamicTableName }} SET
                        {{ dynamicTableWarehouse }}
                        {{ dynamicTableLagSpecification }}
                        {{ dynamicTableComment }}
                    
                    {{ stage('Refresh Dynamic Table', true, "sql", "create") }}
                    ALTER DYNAMIC TABLE {{ desiredFullyQualifiedTargetDynamicTableName }} REFRESH

                {% else %}
                    {{ stage('Nothing to do.') }}
                    select 1 = 0
                
                {% endif %}
                    
            {% elif currentState != undefined and desiredState == undefined %}

                ## Dynamic Table Name
                {% set targetDynamicTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetDynamicTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetDynamicTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {{ stage('Drop Dynamic Table', true, "sql", "drop") }}
                DROP DYNAMIC TABLE IF EXISTS {{ fullyQualifiedTargetDynamicTableName }}


            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: ""
    name: Dynamic Table Dimension
    version: 1
  StepType-162:
    id: "162"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Fact Advanced Deploy
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        deployStrategy: advanced

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: false

          - type: toggleButton
            attributeName: clusterKey
            displayName: Cluster Key
            default: false
            isRequired: true
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: toggleButton
            attributeName: clusterKeyExpressions
            displayName: Allow Expressions in Cluster Key
            default: false
            isRequired: true
            enableIf: "{% if config.clusterKey %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfig
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnName
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and not config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfigExpressions
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnNameExpressions
               isRequired: false
          
            -  type: textBox
               displayName: Expression
               attributeName: sqlExpression
               default: "ex. trunc(<column_name>, -5)"
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Distinct
            attributeName: selectDistinct
            type: toggleButton
            enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"
            default: false
            

          - displayName: Group By All
            attributeName: groupByAll
            type: toggleButton
            default: false
            enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"    

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |-
            {% if desiredState == currentState %}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% elif desiredState %}

                {% if desiredState.node.materializationType == 'view' %}

                    {% if currentState != undefined %}
                        {% if currentState.node.materializationType != 'view' %}
                            {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "create") }}
                            DROP {{ currentState.node.materializationType }} {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                        {% endif %}
                    {% endif %}

            		{{ stage('Create Fact View') }}

            		CREATE OR REPLACE VIEW {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
            		(
            			{% for col in desiredState.columns %}
            				"{{ col.name }}"
            				{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            				{%- if not loop.last -%},{% endif %}
            			{% endfor %}
            		)
            		{%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}
            		AS
            		{% for source in desiredState.sources %}

            			{% if loop.first %}SELECT {% endif %}

            			{% for col in desiredState.source.columns %}
            				{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
            					NULL
            				{% else %}
            					{{ get_source_transform(col) }}
            				{% endif %}
            				AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            			{{ source.join }}

            			{% if not loop.last %} UNION ALL {% endif %}
            		{% endfor %}

            {% elif desiredState.node.materializationType == 'table' %}

                    {% if currentState != undefined %}
                        {% if currentState.node.materializationType != 'table' %}
                            {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "create") }}
                            DROP {{ currentState.node.materializationType }} {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                        {% endif %}
                    {% endif %}

                    {# Figure out cluster key #}
                    {% set nsVariables = namespace(finalClusterKey="") %}
                    {% if desiredState.config.clusterKey == true %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% else %}

                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% endif %}
                    {% endif %}

                    {% if currentState == undefined %}
                        {{ stage('Create Fact Table', true, "sql", "create") }}
            			CREATE OR REPLACE TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        (
                            {% for col in desiredState.columns %}
                                "{{ col.name }}" {{ col.dataType }}
                                {%- if not col.nullable %} NOT NULL
                                    {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                                {% endif %}
                                {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                                {%- if not loop.last -%}, {% endif %}
                            {% endfor %}
                        )
            			{%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

                        {% if desiredState.config.clusterKey == true %}
                            {{ stage('Apply Table Clustering', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

                            {{ stage('Resume Recluster Table', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER
                        {% endif %}

                    {% elif currentState != undefined %}

                        {# Change Node Name or Change Storage Location #}
                        {# Storage Location Tests #}
                        {# Only need to account for updated Storage Location mappings   #}
                        {# Current Namespace Varialbes #}
                        {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                        {# Current State Storage Location Info #}
                        {% for source in currentState.sources %}
                            {% for dep in source.dependencies %}
                                {% set depSourceLocation = dep.node.location.name %}
                                {% if loop.first %}
                                    {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                                {% else %}
                                    {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                                {% endif %}
                            {% endfor %}
                            
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                            {% else %}
                                {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                            {% endif %}
                        {% endfor %}

                        {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                        {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                        {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                        {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                        {# Desired Namespace Variables #}
                        {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                        {% set nsVariables = namespace(storageLocationTest="") %}

                        {# Desired State Storage Location Info #}
                        {% for source in desiredState.sources %}
                            {% for dep in source.dependencies %}
                                {% set depSourceLocation = dep.node.location.name %}
                                {% if loop.first %}
                                    {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                                {% else %}
                                    {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                                {% endif %}
                            {% endfor %}
                            
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                            {% else %}
                                {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                            {% endif %}
                        {% endfor %}

                        {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                        {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                        {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                        {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                        {# Test  #}
                        {% set nsVariables.storageLocationTest = true %}
                        {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                            {# Current mappings #}
                            {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                            {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                            {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                            
                            {# Desired mappings #}
                            {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                            {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                            {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                            {% if currentDatabaseSchema != desiredDatabaseSchema %}
                                {% set nsVariables.storageLocationTest = false %}
                            {% endif %}
                        {% endfor %}

                        {# Clustering Test #}
                        {% set clusterKeyTest = currentState.config.clusterKey == desiredState.config.clusterKey %}
                        {% set clusterKeyExpressionsTest = currentState.config.clusterKeyExpressions == desiredState.config.clusterKeyExpressions %}
                        {% set clusterKeyConfigTest = currentState.config.clusterKeyConfig == desiredState.config.clusterKeyConfig %}
                        {% set clusterKeyConfigExpressionsTest = currentState.config.clusterKeyConfigExpressions == desiredState.config.clusterKeyConfigExpressions %}

                        {% if 
                            clusterKeyTest == false or
                            clusterKeyExpressionsTest == false or
                            clusterKeyConfigTest == false or
                            clusterKeyConfigExpressionsTest == false %}

                            {% set clusterTest = false %}
                        {% else %}
                            {% set clusterTest = true %}
                        {% endif %}

                        {# Rename / Move Object #}
                        {% if (nsVariables.storageLocationTest == false or currentState.node.name != desiredState.node.name) %}
                            {{ stage('Rename and / or Move Table', true, "sql", "alter") }}
                            ALTER TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                            RENAME TO   {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        {% endif %}

                        {# Drop Columns #}
                        {% set nsVariables = namespace(colchanges=0) %}
                        {% for dropCurCol in currentState.columns %}
                            {% if dropCurCol.id not in desiredState.columns | map(attribute="id") %}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                {% if nsVariables.colchanges == 1 %}
                                    {{ stage('Drop Columns', true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    DROP COLUMN 
                                {% else %}
                                    , 
                                {% endif %}
                                "{{ dropCurCol.name }}"
                            {% endif %}
                        {% endfor %}

                        {# Add Columns #}
                        {% set nsVariables = namespace(colchanges=0) %}
                        {% for addDesCol in desiredState.columns %}
                            {% if addDesCol.id not in currentState.columns | map(attribute="id") %}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                {% if nsVariables.colchanges == 1 %}
                                    {{ stage('Add Columns', true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    ADD COLUMN
                                {% else %}
                                    ,
                                {% endif %}
                                    "{{ addDesCol.name }}" {{ addDesCol.dataType }}
                                    {%- if not addDesCol.nullable %} NOT NULL
                                        {%- if addDesCol.defaultValue | length > 0 %} DEFAULT {{ addDesCol.defaultValue }}{% endif %}
                                    {% endif %}
                                    {%- if addDesCol.description | length > 0 %} COMMENT '{{ addDescol.description | escape }}'{% endif %}
                            {% endif %}
                        {% endfor %}

                        {# Rename Columns #}
                        {% for renameCurCol in currentState.columns %}
                            {% if renameCurCol.id in desiredState.columns | map(attribute="id") %}
                                {% set desiredColumnName = desiredState.columns | selectattr('id', 'equalto', renameCurCol.id) | map(attribute='name') | first %}
                                {% if renameCurCol.name != desiredColumnName %}
                                    {{ stage('Rename Column ' + renameCurCol.name, true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    RENAME COLUMN "{{ renameCurCol.name }}"
                                    TO "{{ desiredColumnName }}"
                                {% endif %}
                            {% endif %}
                        {% endfor %}

                        {# Change data types etc #}
                        {% set nsVariables.colchanges = 0 %}
                        {% for alterCurCol in currentState.columns %}        
                            {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
                                {% set currentDatatype = alterCurCol.dataType %}
                                {% set currentNullable = alterCurCol.nullable %}
                                {% set currentDefaultValue = alterCurCol.defaultValue %}
                                {% set currentDescription = alterCurCol.description %}

                                {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                                {% set desiredDatatype = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                                {% set desiredNullable = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                                {% set desiredDefaultValue = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                                {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}

                                {% set datatypeTest = currentDatatype == desiredDatatype %}
                                {% set nullableTest = currentNullable == desiredNullable %}
                                {% set defaultValueTest = currentDefaultValue == desiredDefaultValue %}
                                {% set descriptionTest = currentDescription == desiredDescription %}

                                {% if (datatypeTest == false or 
                                        nullableTest == false  or
                                        defaultValueTest == false or
                                        descriptionTest == false) %}
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                    {% if nsVariables.colchanges == 1 %}
                                        {{ stage('Change Column Attributes', true, "sql", "alter") }}
                                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                        MODIFY
                                    {% endif %}
                                    {% if datatypeTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        SET DATA TYPE {{ desiredDatatype }}
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if nullableTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        {% if currentNullable == true %}
                                            SET
                                        {% else %}
                                            DROP
                                        {% endif %}
                                        NOT NULL
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if descriptionTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        COMMENT '{{ desiredDescription }}'
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if defaultValueTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        {% if desiredDefaultValue == '' %}
                                            DROP DEFAULT
                                        {% else %}
                                            SET DEFAULT {{ desiredDefaultValue }}
                                        {% endif %}
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    
                                {% else %}
                                                        
                                {% endif %}
                            {% endif %}
                        {% endfor %}

                        {# Figure out cluster key #}
                        {% set nsVariables = namespace(finalClusterKey="") %}
                        {% if clusterTest == false %}
                            {% if desiredState.config.clusterKeyExpressions == true %}
                                {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                                {%- set nsVariables = namespace(clusterValues=[]) %}

                                {% for r in column %}
                                    {% if expression[loop.index0] == "" %}
                                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                    {% else %}
                                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                    {% endif %}
                                {% endfor %}

                                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                            {% elif desiredState.config.clusterKey == true %}

                                {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                                {%- set nsVariables = namespace(clusterValues=[]) %}

                                {% for r in column %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% endfor %}

                                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
                            
                            {% else %}

                                {% set nsVariables.finalClusterKey = 'DROP CLUSTERING KEY' %}

                            {% endif %}

                            {{ stage('Recluster TABLE', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                            {{ nsVariables.finalClusterKey }}

                        {% endif %}

                    {% endif %}


                {% endif %}

            {% elif currentState != undefined and desiredState == undefined %}

                {# Table or View Name #}
                {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {{ stage('Drop Table or View', true, "sql", "drop") }}
                DROP {{ currentState.node.materializationType }} IF EXISTS {{ fullyQualifiedTargetObjectName }}

            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: |-
            fact
            {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                    
                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
                    
                    {% for source in sources %}
                    
                        {% if has_business_key %}
                    
                            {{ stage('MERGE ' + source.name | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                                SELECT
                                {% if config.selectDistinct %}
                                 DISTINCT
                                {% endif %}
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                             {% if config.groupByAll %}
                             GROUP BY ALL
                             {% endif %}
                             ) 
                                AS "SRC"
                            ON
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in source.columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}
                    
                            {{ stage('Insert ' + source.name | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                                SELECT
            		    {% if config.selectDistinct %}
                                DISTINCT
                                {% endif %}
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
            		    {% if config.groupByAll %}
                                 GROUP BY ALL
                                {% endif %}
                        {% endif %}
                    {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
                
    name: Fact Advanced Deploy
    version: 1
  StepType-173:
    id: "173"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of Persistent Stage Group All Distinct
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"


          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Distinct
            attributeName: selectDistinct
            type: toggleButton
            enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"
            default: false

          - displayName: Group By All
            attributeName: groupByAll
            type: toggleButton
            enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"
            default: false
            
          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% endif %}
        run:
          templateString: |-
            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}


                {% if config.truncateBefore %}
                    {{ stage('Truncate Persistent Table') }}
                    TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
                {% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */

             			SELECT
            			{% if config.selectDistinct %}
            			DISTINCT
            			{% endif %}           
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        {% if config.groupByAll %}
                        Group By All
                        {% endif %}            
                        UNION ALL

                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
            			SELECT
            			{% if config.selectDistinct %}
            			DISTINCT
            			{% endif %}
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {% if config.groupByAll %}
                        Group By All
                        {% endif %}            
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
            			SELECT
            			{% if config.selectDistinct %}
            			DISTINCT
            			{% endif %}
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {% if config.groupByAll %}
                        Group By All
                        {% endif %}            
                        UNION ALL           
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
            			SELECT
            			{% if config.selectDistinct %}
            			DISTINCT
            			{% endif %}
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
             	    {% if config.groupByAll %}         
                    Group By All
                    {% endif %}            
                    )
                   AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% if config.selectDistinct %}
                            DISTINCT
                            {% endif %}
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }}
                            {% if config.groupByAll %}
                            Group By All               
                            {% endif %} )             
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

            			SELECT
            			{% if config.selectDistinct %}
            			DISTINCT
            			{% endif %}
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                 {% if config.groupByAll %}
                 Group By All
                 {% endif %}            
                    {% endfor %}            
                {% endif %}

            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage Group All Distinct
    version: 1
  StepType-179:
    id: "179"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Copy of Stage Advanced Deploy
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        deployStrategy: advanced

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: toggleButton
            attributeName: clusterKey
            displayName: Cluster Key
            default: false
            isRequired: true
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: toggleButton
            attributeName: clusterKeyExpressions
            displayName: Allow Expressions in Cluster Key
            default: false
            isRequired: true
            enableIf: "{% if config.clusterKey %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfig
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnName
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and not config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfigExpressions
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnNameExpressions
               isRequired: false
          
            -  type: textBox
               displayName: Expression
               attributeName: sqlExpression
               default: "ex. trunc(<column_name>, -5)"
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true

          - displayName: Distinct
            attributeName: selectDistinct
            type: toggleButton
            default: false
            enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"


          - displayName: Group By All
            attributeName: groupByAll
            type: toggleButton
            default: false
            enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"
            
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if desiredState == currentState %}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% elif desiredState %}

                {% if desiredState.node.materializationType == 'view' %}

                    {% if currentState != undefined %}
                        {% if currentState.node.materializationType != 'view' %}
                            {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "create") }}
                            DROP {{ currentState.node.materializationType }} {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                        {% endif %}
                    {% endif %}

                    {{ stage('Create Stage View', true, "sql", "create") }}

                    CREATE OR REPLACE VIEW {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                    (
                        {% for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}
                    AS
                    {% for source in desiredState.sources %}
                        SELECT
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}

                        {{ source.join }}

                        {% if not loop.last %}
                            {% if desiredState.config.insertStrategy in ['UNION', 'UNION ALL'] %}
                                {{ desiredState.config.insertStrategy }}
                            {% else %}
                                UNION
                            {% endif %}
                        {% endif %}
                    {% endfor %}

                {% elif desiredState.node.materializationType == 'table' %}

                    {% if currentState != undefined %}
                        {% if currentState.node.materializationType != 'table' %}
                            {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "create") }}
                            DROP {{ currentState.node.materializationType }} {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                        {% endif %}
                    {% endif %}

                    {# Figure out cluster key #}
                    {% set nsVariables = namespace(finalClusterKey="") %}
                    {% if desiredState.config.clusterKey == true %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% else %}

                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% endif %}
                    {% endif %}

                    {% if currentState == undefined %}
                        {{ stage('Create Stage Table', true, "sql", "create") }}
                        CREATE OR REPLACE TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        (
                            {% for col in desiredState.columns %}
                                "{{ col.name }}" {{ col.dataType }}
                                {%- if not col.nullable %} NOT NULL
                                    {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                                {% endif %}
                                {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                                {%- if not loop.last -%}, {% endif %}
                            {% endfor %}
                        )
                        {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

                    {% if desiredState.config.clusterKey == true %}
                        {{ stage('Apply Table Clustering', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

                        {{ stage('Resume Recluster Table', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER
                    {% endif %}

                    {% elif currentState != undefined %}

                        {# Change Node Name or Change Storage Location #}
                        {# Storage Location Tests #}
                        {# Only need to account for updated Storage Location mappings   #}
                        {# Current Namespace Varialbes #}
                        {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                        {# Current State Storage Location Info #}
                        {% for source in currentState.sources %}
                            {% for dep in source.dependencies %}
                                {% set depSourceLocation = dep.node.location.name %}
                                {% if loop.first %}
                                    {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                                {% else %}
                                    {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                                {% endif %}
                            {% endfor %}
                            
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                            {% else %}
                                {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                            {% endif %}
                        {% endfor %}

                        {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                        {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                        {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                        {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                        {# Desired Namespace Variables #}
                        {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                        {% set nsVariables = namespace(storageLocationTest="") %}

                        {# Desired State Storage Location Info #}
                        {% for source in desiredState.sources %}
                            {% for dep in source.dependencies %}
                                {% set depSourceLocation = dep.node.location.name %}
                                {% if loop.first %}
                                    {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                                {% else %}
                                    {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                                {% endif %}
                            {% endfor %}
                            
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                            {% else %}
                                {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                            {% endif %}
                        {% endfor %}

                        {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                        {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                        {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                        {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                        {# Test  #}
                        {% set nsVariables.storageLocationTest = true %}
                        {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                            {# Current mappings #}
                            {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                            {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                            {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                            
                            {# Desired mappings #}
                            {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                            {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                            {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                            {% if currentDatabaseSchema != desiredDatabaseSchema %}
                                {% set nsVariables.storageLocationTest = false %}
                            {% endif %}
                        {% endfor %}

                        {# Clustering Test #}
                        {% set clusterKeyTest = currentState.config.clusterKey == desiredState.config.clusterKey %}
                        {% set clusterKeyExpressionsTest = currentState.config.clusterKeyExpressions == desiredState.config.clusterKeyExpressions %}
                        {% set clusterKeyConfigTest = currentState.config.clusterKeyConfig == desiredState.config.clusterKeyConfig %}
                        {% set clusterKeyConfigExpressionsTest = currentState.config.clusterKeyConfigExpressions == desiredState.config.clusterKeyConfigExpressions %}

                        {% if 
                            clusterKeyTest == false or
                            clusterKeyExpressionsTest == false or
                            clusterKeyConfigTest == false or
                            clusterKeyConfigExpressionsTest == false %}

                            {% set clusterTest = false %}
                        {% else %}
                            {% set clusterTest = true %}
                        {% endif %}

                        {# Rename / Move Object #}
                        {% if (nsVariables.storageLocationTest == false or currentState.node.name != desiredState.node.name) %}
                            {{ stage('Rename and / or Move Table', true, "sql", "alter") }}
                            ALTER TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                            RENAME TO   {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        {% endif %}

                        {# Drop Columns #}
                        {% set nsVariables = namespace(colchanges=0) %}
                        {% for dropCurCol in currentState.columns %}
                            {% if dropCurCol.id not in desiredState.columns | map(attribute="id") %}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                {% if nsVariables.colchanges == 1 %}
                                    {{ stage('Drop Columns', true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    DROP COLUMN 
                                {% else %}
                                    , 
                                {% endif %}
                                "{{ dropCurCol.name }}"
                            {% endif %}
                        {% endfor %}

                        {# Add Columns #}
                        {% set nsVariables = namespace(colchanges=0) %}
                        {% for addDesCol in desiredState.columns %}
                            {% if addDesCol.id not in currentState.columns | map(attribute="id") %}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                {% if nsVariables.colchanges == 1 %}
                                    {{ stage('Add Columns', true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    ADD COLUMN
                                {% else %}
                                    ,
                                {% endif %}
                                    "{{ addDesCol.name }}" {{ addDesCol.dataType }}
                                    {%- if not addDesCol.nullable %} NOT NULL
                                        {%- if addDesCol.defaultValue | length > 0 %} DEFAULT {{ addDesCol.defaultValue }}{% endif %}
                                    {% endif %}
                                    {%- if addDesCol.description | length > 0 %} COMMENT '{{ addDescol.description | escape }}'{% endif %}
                            {% endif %}
                        {% endfor %}

                        {# Rename Columns #}
                        {% for renameCurCol in currentState.columns %}
                            {% if renameCurCol.id in desiredState.columns | map(attribute="id") %}
                                {% set desiredColumnName = desiredState.columns | selectattr('id', 'equalto', renameCurCol.id) | map(attribute='name') | first %}
                                {% if renameCurCol.name != desiredColumnName %}
                                    {{ stage('Rename Column ' + renameCurCol.name, true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    RENAME COLUMN "{{ renameCurCol.name }}"
                                    TO "{{ desiredColumnName }}"
                                {% endif %}
                            {% endif %}
                        {% endfor %}

                        {# Change data types etc #}
                        {% set nsVariables.colchanges = 0 %}
                        {% for alterCurCol in currentState.columns %}        
                            {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
                                {% set currentDatatype = alterCurCol.dataType %}
                                {% set currentNullable = alterCurCol.nullable %}
                                {% set currentDefaultValue = alterCurCol.defaultValue %}
                                {% set currentDescription = alterCurCol.description %}

                                {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                                {% set desiredDatatype = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                                {% set desiredNullable = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                                {% set desiredDefaultValue = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                                {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}

                                {% set datatypeTest = currentDatatype == desiredDatatype %}
                                {% set nullableTest = currentNullable == desiredNullable %}
                                {% set defaultValueTest = currentDefaultValue == desiredDefaultValue %}
                                {% set descriptionTest = currentDescription == desiredDescription %}

                                {% if (datatypeTest == false or 
                                        nullableTest == false  or
                                        defaultValueTest == false or
                                        descriptionTest == false) %}
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                    {% if nsVariables.colchanges == 1 %}
                                        {{ stage('Change Column Attributes', true, "sql", "alter") }}
                                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                        MODIFY
                                    {% endif %}
                                    {% if datatypeTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        SET DATA TYPE {{ desiredDatatype }}
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if nullableTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        {% if currentNullable == true %}
                                            SET
                                        {% else %}
                                            DROP
                                        {% endif %}
                                        NOT NULL
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if descriptionTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        COMMENT '{{ desiredDescription }}'
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if defaultValueTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        {% if desiredDefaultValue == '' %}
                                            DROP DEFAULT
                                        {% else %}
                                            SET DEFAULT {{ desiredDefaultValue }}
                                        {% endif %}
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    
                                {% else %}
                                                        
                                {% endif %}
                            {% endif %}
                        {% endfor %}
                        
                        {# Figure out cluster key #}
                        {% set nsVariables = namespace(finalClusterKey="") %}
                        {% if clusterTest == false %}
                            {% if desiredState.config.clusterKeyExpressions == true %}
                                {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                                {%- set nsVariables = namespace(clusterValues=[]) %}

                                {% for r in column %}
                                    {% if expression[loop.index0] == "" %}
                                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                    {% else %}
                                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                    {% endif %}
                                {% endfor %}

                                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                            {% elif desiredState.config.clusterKey == true %}

                                {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                                {%- set nsVariables = namespace(clusterValues=[]) %}

                                {% for r in column %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% endfor %}

                                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
                            
                            {% else %}

                                {% set nsVariables.finalClusterKey = 'DROP CLUSTERING KEY' %}

                            {% endif %}

                            {{ stage('Recluster TABLE', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                            {{ nsVariables.finalClusterKey }}

                        {% endif %}

                    {% endif %}


                {% endif %}

            {% elif currentState != undefined and desiredState == undefined %}

                {# Table or View Name #}
                {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {{ stage('Drop Table or View', true, "sql", "drop") }}
                DROP {{ currentState.node.materializationType }} IF EXISTS {{ fullyQualifiedTargetObjectName }}

            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: |
            {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
             			SELECT
            			{% if config.selectDistinct %}
            			DISTINCT
            			{% endif %}
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            		{% if config.groupByAll %}
            		Group By All
            		{% endif %}
            			
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage Advanced Deploy
    version: 1
  StepType-180:
    id: "180"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of Persistent Stage Advanced Deploy
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        deployStrategy: advanced

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
          
          - type: businessKeyColumns
            isRequired: false

          - type: toggleButton
            attributeName: clusterKey
            displayName: Cluster Key
            default: false
            isRequired: true
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: toggleButton
            attributeName: clusterKeyExpressions
            displayName: Allow Expressions in Cluster Key
            default: false
            isRequired: true
            enableIf: "{% if config.clusterKey %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfig
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnName
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and not config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfigExpressions
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnNameExpressions
               isRequired: false
          
            -  type: textBox
               displayName: Expression
               attributeName: sqlExpression
               default: "ex. trunc(<column_name>, -5)"
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true

          - displayName: Distinct
            attributeName: selectDistinct
            type: toggleButton
            default: false
            enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"

          - displayName: Group By All
            attributeName: groupByAll
            type: toggleButton
            enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"
            default: false

          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |+
            {% if desiredState == currentState %}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% elif desiredState %}

                {% if desiredState.node.materializationType == 'view' %}

                    {% if currentState != undefined %}
                        {% if currentState.node.materializationType != 'view' %}
                            {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "create") }}
                            DROP {{ currentState.node.materializationType }} {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                        {% endif %}
                    {% endif %}

                    {{ stage('Create Stage View', true, "sql", "create") }}

                    CREATE OR REPLACE VIEW {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                    (
                        {% for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}
                    AS 
                    SELECT
                    {% for source in desiredState.sources %}

                        {% if not loop.last %} UNION ALL {% endif %}

                        {% for col in source.columns %}
                            {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                                NULL
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}

            {% elif desiredState.node.materializationType == 'table' %}

                    {% if currentState != undefined %}
                        {% if currentState.node.materializationType != 'table' %}
                            {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "create") }}
                            DROP {{ currentState.node.materializationType }} {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                        {% endif %}
                    {% endif %}

                    {% if currentState == undefined %}

                    {# Figure out cluster key #}
                    {% set nsVariables = namespace(finalClusterKey="") %}
                    {% if desiredState.config.clusterKey == true %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% else %}

                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% endif %}
                    {% endif %}

                    {{ stage('Create Stage Table', true, "sql", "create") }}
                    CREATE OR REPLACE TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                    (
                        {% for col in desiredState.columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {% if col.isSurrogateKey %}
                                identity
                            {% endif %}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

                    {% if desiredState.config.clusterKey == true %}
                        {{ stage('Apply Table Clustering', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

                        {{ stage('Resume Recluster Table', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER
                    {% endif %}

                    {% elif currentState != undefined %}

                        {# Change Node Name or Change Storage Location #}
                        {# Storage Location Tests #}
                        {# Only need to account for updated Storage Location mappings   #}
                        {# Current Namespace Varialbes #}
                        {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                        {# Current State Storage Location Info #}
                        {% for source in currentState.sources %}
                            {% for dep in source.dependencies %}
                                {% set depSourceLocation = dep.node.location.name %}
                                {% if loop.first %}
                                    {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                                {% else %}
                                    {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                                {% endif %}
                            {% endfor %}
                            
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                            {% else %}
                                {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                            {% endif %}
                        {% endfor %}

                        {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                        {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                        {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                        {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                        {# Desired Namespace Variables #}
                        {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                        {% set nsVariables = namespace(storageLocationTest="") %}

                        {# Desired State Storage Location Info #}
                        {% for source in desiredState.sources %}
                            {% for dep in source.dependencies %}
                                {% set depSourceLocation = dep.node.location.name %}
                                {% if loop.first %}
                                    {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                                {% else %}
                                    {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                                {% endif %}
                            {% endfor %}
                            
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                            {% else %}
                                {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                            {% endif %}
                        {% endfor %}

                        {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                        {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                        {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                        {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                        {# Test  #}
                        {% set nsVariables.storageLocationTest = true %}
                        {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                            {# Current mappings #}
                            {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                            {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                            {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                            
                            {# Desired mappings #}
                            {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                            {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                            {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                            {% if currentDatabaseSchema != desiredDatabaseSchema %}
                                {% set nsVariables.storageLocationTest = false %}
                            {% endif %}
                        {% endfor %}

                        {# Clustering Test #}
                        {% set clusterKeyTest = currentState.config.clusterKey == desiredState.config.clusterKey %}
                        {% set clusterKeyExpressionsTest = currentState.config.clusterKeyExpressions == desiredState.config.clusterKeyExpressions %}
                        {% set clusterKeyConfigTest = currentState.config.clusterKeyConfig == desiredState.config.clusterKeyConfig %}
                        {% set clusterKeyConfigExpressionsTest = currentState.config.clusterKeyConfigExpressions == desiredState.config.clusterKeyConfigExpressions %}

                        {% if 
                            clusterKeyTest == false or
                            clusterKeyExpressionsTest == false or
                            clusterKeyConfigTest == false or
                            clusterKeyConfigExpressionsTest == false %}

                            {% set clusterTest = false %}
                        {% else %}
                            {% set clusterTest = true %}
                        {% endif %}

                        {# Rename / Move Object #}
                        {% if (nsVariables.storageLocationTest == false or currentState.node.name != desiredState.node.name) %}
                            {{ stage('Rename and / or Move Table', true, "sql", "alter") }}
                            ALTER TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                            RENAME TO   {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        {% endif %}

                        {# Drop Columns #}
                        {% set nsVariables = namespace(colchanges=0) %}
                        {% for dropCurCol in currentState.columns %}
                            {% if dropCurCol.id not in desiredState.columns | map(attribute="id") %}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                {% if nsVariables.colchanges == 1 %}
                                    {{ stage('Drop Columns', true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    DROP COLUMN 
                                {% else %}
                                    , 
                                {% endif %}
                                "{{ dropCurCol.name }}"
                            {% endif %}
                        {% endfor %}

                        {# Add Columns #}
                        {% set nsVariables = namespace(colchanges=0) %}
                        {% for addDesCol in desiredState.columns %}
                            {% if addDesCol.id not in currentState.columns | map(attribute="id") %}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                {% if nsVariables.colchanges == 1 %}
                                    {{ stage('Add Columns', true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    ADD COLUMN
                                {% else %}
                                    ,
                                {% endif %}
                                    "{{ addDesCol.name }}" {{ addDesCol.dataType }}
                                    {%- if not addDesCol.nullable %} NOT NULL
                                        {%- if addDesCol.defaultValue | length > 0 %} DEFAULT {{ addDesCol.defaultValue }}{% endif %}
                                    {% endif %}
                                    {%- if addDesCol.description | length > 0 %} COMMENT '{{ addDescol.description | escape }}'{% endif %}
                            {% endif %}
                        {% endfor %}

                        {# Rename Columns #}
                        {% for renameCurCol in currentState.columns %}
                            {% if renameCurCol.id in desiredState.columns | map(attribute="id") %}
                                {% set desiredColumnName = desiredState.columns | selectattr('id', 'equalto', renameCurCol.id) | map(attribute='name') | first %}
                                {% if renameCurCol.name != desiredColumnName %}
                                    {{ stage('Rename Column ' + renameCurCol.name, true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    RENAME COLUMN "{{ renameCurCol.name }}"
                                    TO "{{ desiredColumnName }}"
                                {% endif %}
                            {% endif %}
                        {% endfor %}

                        {# Change data types etc #}
                        {% set nsVariables.colchanges = 0 %}
                        {% for alterCurCol in currentState.columns %}        
                            {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
                                {% set currentDatatype = alterCurCol.dataType %}
                                {% set currentNullable = alterCurCol.nullable %}
                                {% set currentDefaultValue = alterCurCol.defaultValue %}
                                {% set currentDescription = alterCurCol.description %}

                                {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                                {% set desiredDatatype = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                                {% set desiredNullable = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                                {% set desiredDefaultValue = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                                {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}

                                {% set desiredDatatypeAlterBehavior = desiredState.config.dataTypeAlterBehavior %}
                                {% set desiredNullableAlterBehavior = desiredState.config.nullableAlterBehavior %}
                                {% set desiredDataTypeAlterBehavior = desiredState.config.dataTypeAlterBehavior %}

                                {% set datatypeTest = currentDatatype == desiredDatatype %}
                                {% set nullableTest = currentNullable == desiredNullable %}
                                {% set defaultValueTest = currentDefaultValue == desiredDefaultValue %}
                                {% set descriptionTest = currentDescription == desiredDescription %}

                                {% if (datatypeTest == false or 
                                        nullableTest == false  or
                                        defaultValueTest == false or
                                        descriptionTest == false) %}
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                    {% if nsVariables.colchanges == 1 %}
                                        {{ stage('Change Column Attributes', true, "sql", "alter") }}
                                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                        MODIFY
                                    {% endif %}
                                    {% if datatypeTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        SET DATA TYPE {{ desiredDatatype }}
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if nullableTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        {% if currentNullable == true %}
                                            SET
                                        {% else %}
                                            DROP
                                        {% endif %}
                                        NOT NULL
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if descriptionTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        COMMENT '{{ desiredDescription }}'
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if defaultValueTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        {% if desiredDefaultValue == '' %}
                                            DROP DEFAULT
                                        {% else %}
                                            SET DEFAULT {{ desiredDefaultValue }}
                                        {% endif %}
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    
                                {% else %}
                                                        
                                {% endif %}
                            {% endif %}
                        {% endfor %}

                        {# Figure out cluster key #}
                        {% set nsVariables = namespace(finalClusterKey="") %}
                        {% if clusterTest == false %}
                            {% if desiredState.config.clusterKeyExpressions == true %}
                                {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                                {%- set nsVariables = namespace(clusterValues=[]) %}

                                {% for r in column %}
                                    {% if expression[loop.index0] == "" %}
                                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                    {% else %}
                                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                    {% endif %}
                                {% endfor %}

                                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                            {% elif desiredState.config.clusterKey == true %}

                                {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                                {%- set nsVariables = namespace(clusterValues=[]) %}

                                {% for r in column %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% endfor %}

                                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
                            
                            {% else %}

                                {% set nsVariables.finalClusterKey = 'DROP CLUSTERING KEY' %}

                            {% endif %}

                            {{ stage('Recluster TABLE', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                            {{ nsVariables.finalClusterKey }}

                        {% endif %}


                    {% endif %}


                {% endif %}

            {% elif currentState != undefined and desiredState == undefined %}

                {# Table or View Name #}
                {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {{ stage('Drop Table or View', true, "sql", "drop") }}
                DROP {{ currentState.node.materializationType }} IF EXISTS {{ fullyQualifiedTargetObjectName }}

            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}

        run:
          templateString: |-
            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */

             			SELECT
            			{% if config.selectDistinct %}
            			DISTINCT
            			{% endif %} 
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        {% if config.groupByAll %}
                        Group By All
                        {% endif %}  
                        UNION ALL
                        
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
            			SELECT
            			{% if config.selectDistinct %}
            			DISTINCT
            			{% endif %}
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {% if config.groupByAll %}
                        Group By All
                        {% endif %} 
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
            			SELECT
            			{% if config.selectDistinct %}
            			DISTINCT
            			{% endif %}
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {% if config.groupByAll %}
                        Group By All
                        {% endif %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
            			SELECT
            			{% if config.selectDistinct %}
            			DISTINCT
            			{% endif %}
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
             	    {% if config.groupByAll %}         
                    Group By All
                    {% endif %}            
                    )
                   AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% if config.selectDistinct %}
                            DISTINCT
                            {% endif %}
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }}
                            {% if config.groupByAll %}
                            Group By All               
                            {% endif %} ) 
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

            			SELECT
            			{% if config.selectDistinct %}
            			DISTINCT
            			{% endif %}
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                 {% if config.groupByAll %}
                 Group By All
                 {% endif %}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage Advanced Deploy
    version: 1
  StepType-183:
    id: "183"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension Advanced Deploy
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        deployStrategy: advanced

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: toggleButton
            attributeName: clusterKey
            displayName: Cluster Key
            default: false
            isRequired: true
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: toggleButton
            attributeName: clusterKeyExpressions
            displayName: Allow Expressions in Cluster Key
            default: false
            isRequired: true
            enableIf: "{% if config.clusterKey %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfig
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnName
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and not config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfigExpressions
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnNameExpressions
               isRequired: false
          
            -  type: textBox
               displayName: Expression
               attributeName: sqlExpression
               default: "ex. trunc(<column_name>, -5)"
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Distinct
            attributeName: selectDistinct
            type: toggleButton
            enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"
            default: false
            

          - displayName: Group By All
            attributeName: groupByAll
            type: toggleButton
            default: false
            enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"    

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if desiredState == currentState %}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% elif desiredState %}

                {% if desiredState.node.materializationType == 'view' %}

                    {% if currentState != undefined %}
                        {% if currentState.node.materializationType != 'view' %}
                            {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "create") }}
                            DROP {{ currentState.node.materializationType }} {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                        {% endif %}
                    {% endif %}

            		{{ stage('Create Dimension View') }}

            		CREATE OR REPLACE VIEW {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
            		(
            			{% for col in desiredState.columns %}
            				"{{ col.name }}"
            				{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            				{%- if not loop.last -%},{% endif %}
            			{% endfor %}
            		)
            		{%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}
            		AS
            		{% for source in desiredState.sources %}

            			{% if loop.first %}SELECT {% endif %}

            			{% for col in source.columns %}
            				{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
            					NULL
            				{% else %}
            					{{ get_source_transform(col) }}
            				{% endif %}
            				AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            			{{ source.join }}

            			{% if not loop.last %} UNION ALL {% endif %}
            		{% endfor %}

            {% elif desiredState.node.materializationType == 'table' %}

                    {% if currentState != undefined %}
                        {% if currentState.node.materializationType != 'table' %}
                            {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "create") }}
                            DROP {{ currentState.node.materializationType }} {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                        {% endif %}
                    {% endif %}

                    {# Figure out cluster key #}
                    {% set nsVariables = namespace(finalClusterKey="") %}
                    {% if desiredState.config.clusterKey == true %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% else %}

                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% endif %}
                    {% endif %}

                    {% if currentState == undefined %}
                        {{ stage('Create Dimension Table', true, "sql", "create") }}
            			CREATE OR REPLACE TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
            			(
            			{% for col in desiredState.columns %}
            				"{{ col.name }}" {{ col.dataType }}
            				{% if col.isSurrogateKey %}
            					identity
            				{% endif %}
            				{%- if not col.nullable %} NOT NULL
            					{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            				{% endif %}
            				{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            			)
            			{%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

                        {% if desiredState.config.clusterKey == true %}
                            {{ stage('Apply Table Clustering', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

                            {{ stage('Resume Recluster Table', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER
                        {% endif %}

                    {% elif currentState != undefined %}

                        {# Change Node Name or Change Storage Location #}
                        {# Storage Location Tests #}
                        {# Only need to account for updated Storage Location mappings   #}
                        {# Current Namespace Varialbes #}
                        {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                        {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                        {# Current State Storage Location Info #}
                        {% for source in currentState.sources %}
                            {% for dep in source.dependencies %}
                                {% set depSourceLocation = dep.node.location.name %}
                                {% if loop.first %}
                                    {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                                {% else %}
                                    {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                                {% endif %}
                            {% endfor %}
                            
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                            {% else %}
                                {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                            {% endif %}
                        {% endfor %}

                        {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                        {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                        {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                        {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                        {# Desired Namespace Variables #}
                        {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                        {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                        {% set nsVariables = namespace(storageLocationTest="") %}

                        {# Desired State Storage Location Info #}
                        {% for source in desiredState.sources %}
                            {% for dep in source.dependencies %}
                                {% set depSourceLocation = dep.node.location.name %}
                                {% if loop.first %}
                                    {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                                {% else %}
                                    {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                                {% endif %}
                            {% endfor %}
                            
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                            {% else %}
                                {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                            {% endif %}
                        {% endfor %}

                        {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                        {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                        {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                        {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                        {# Test  #}
                        {% set nsVariables.storageLocationTest = true %}
                        {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                            {# Current mappings #}
                            {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                            {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                            {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                            
                            {# Desired mappings #}
                            {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                            {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                            {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                            {% if currentDatabaseSchema != desiredDatabaseSchema %}
                                {% set nsVariables.storageLocationTest = false %}
                            {% endif %}
                        {% endfor %}

                        {# Clustering Test #}
                        {% set clusterKeyTest = currentState.config.clusterKey == desiredState.config.clusterKey %}
                        {% set clusterKeyExpressionsTest = currentState.config.clusterKeyExpressions == desiredState.config.clusterKeyExpressions %}
                        {% set clusterKeyConfigTest = currentState.config.clusterKeyConfig == desiredState.config.clusterKeyConfig %}
                        {% set clusterKeyConfigExpressionsTest = currentState.config.clusterKeyConfigExpressions == desiredState.config.clusterKeyConfigExpressions %}

                        {% if 
                            clusterKeyTest == false or
                            clusterKeyExpressionsTest == false or
                            clusterKeyConfigTest == false or
                            clusterKeyConfigExpressionsTest == false %}

                            {% set clusterTest = false %}
                        {% else %}
                            {% set clusterTest = true %}
                        {% endif %}

                        {# Rename / Move Object #}
                        {% if (nsVariables.storageLocationTest == false or currentState.node.name != desiredState.node.name) %}
                            {{ stage('Rename and / or Move Table', true, "sql", "alter") }}
                            ALTER TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                            RENAME TO   {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        {% endif %}

                        {# Drop Columns #}
                        {% set nsVariables = namespace(colchanges=0) %}
                        {% for dropCurCol in currentState.columns %}
                            {% if dropCurCol.id not in desiredState.columns | map(attribute="id") %}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                {% if nsVariables.colchanges == 1 %}
                                    {{ stage('Drop Columns', true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    DROP COLUMN 
                                {% else %}
                                    , 
                                {% endif %}
                                "{{ dropCurCol.name }}"
                            {% endif %}
                        {% endfor %}

                        {# Add Columns #}
                        {% set nsVariables = namespace(colchanges=0) %}
                        {% for addDesCol in desiredState.columns %}
                            {% if addDesCol.id not in currentState.columns | map(attribute="id") %}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                {% if nsVariables.colchanges == 1 %}
                                    {{ stage('Add Columns', true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    ADD COLUMN
                                {% else %}
                                    ,
                                {% endif %}
                                    "{{ addDesCol.name }}" {{ addDesCol.dataType }}
                                    {%- if not addDesCol.nullable %} NOT NULL
                                        {%- if addDesCol.defaultValue | length > 0 %} DEFAULT {{ addDesCol.defaultValue }}{% endif %}
                                    {% endif %}
                                    {%- if addDesCol.description | length > 0 %} COMMENT '{{ addDescol.description | escape }}'{% endif %}
                            {% endif %}
                        {% endfor %}

                        {# Rename Columns #}
                        {% for renameCurCol in currentState.columns %}
                            {% if renameCurCol.id in desiredState.columns | map(attribute="id") %}
                                {% set desiredColumnName = desiredState.columns | selectattr('id', 'equalto', renameCurCol.id) | map(attribute='name') | first %}
                                {% if renameCurCol.name != desiredColumnName %}
                                    {{ stage('Rename Column ' + renameCurCol.name, true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    RENAME COLUMN "{{ renameCurCol.name }}"
                                    TO "{{ desiredColumnName }}"
                                {% endif %}
                            {% endif %}
                        {% endfor %}

                        {# Change data types etc #}
                        {% set nsVariables.colchanges = 0 %}
                        {% for alterCurCol in currentState.columns %}        
                            {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
                                {% set currentDatatype = alterCurCol.dataType %}
                                {% set currentNullable = alterCurCol.nullable %}
                                {% set currentDefaultValue = alterCurCol.defaultValue %}
                                {% set currentDescription = alterCurCol.description %}

                                {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                                {% set desiredDatatype = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                                {% set desiredNullable = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                                {% set desiredDefaultValue = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                                {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}

                                {% set datatypeTest = currentDatatype == desiredDatatype %}
                                {% set nullableTest = currentNullable == desiredNullable %}
                                {% set defaultValueTest = currentDefaultValue == desiredDefaultValue %}
                                {% set descriptionTest = currentDescription == desiredDescription %}

                                {% if (datatypeTest == false or 
                                        nullableTest == false  or
                                        defaultValueTest == false or
                                        descriptionTest == false) %}
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                    {% if nsVariables.colchanges == 1 %}
                                        {{ stage('Change Column Attributes', true, "sql", "alter") }}
                                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                        MODIFY
                                    {% endif %}
                                    {% if datatypeTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        SET DATA TYPE {{ desiredDatatype }}
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if nullableTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        {% if currentNullable == true %}
                                            SET
                                        {% else %}
                                            DROP
                                        {% endif %}
                                        NOT NULL
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if descriptionTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        COMMENT '{{ desiredDescription }}'
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    {% if defaultValueTest == false %}
                                        {% if nsVariables.colchanges > 1 %},{% endif %}
                                        COLUMN "{{ desiredColumnName }}"
                                        {% if desiredDefaultValue == '' %}
                                            DROP DEFAULT
                                        {% else %}
                                            SET DEFAULT {{ desiredDefaultValue }}
                                        {% endif %}
                                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                    {% endif %}
                                    
                                {% else %}
                                                        
                                {% endif %}
                            {% endif %}
                        {% endfor %}
                        
                        {# Figure out cluster key #}
                        {% set nsVariables = namespace(finalClusterKey="") %}
                        {% if clusterTest == false %}
                            {% if desiredState.config.clusterKeyExpressions == true %}
                                {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                                {%- set nsVariables = namespace(clusterValues=[]) %}

                                {% for r in column %}
                                    {% if expression[loop.index0] == "" %}
                                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                    {% else %}
                                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                    {% endif %}
                                {% endfor %}

                                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                            {% elif desiredState.config.clusterKey == true %}

                                {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                                {%- set nsVariables = namespace(clusterValues=[]) %}

                                {% for r in column %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% endfor %}

                                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
                            
                            {% else %}

                                {% set nsVariables.finalClusterKey = 'DROP CLUSTERING KEY' %}

                            {% endif %}

                            {{ stage('Recluster TABLE', true, "sql", "create") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                            {{ nsVariables.finalClusterKey }}

                        {% endif %}

                    {% endif %}


                {% endif %}

            {% elif currentState != undefined and desiredState == undefined %}

                {# Table or View Name #}
                {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {{ stage('Drop Table or View', true, "sql", "drop") }}
                DROP {{ currentState.node.materializationType }} IF EXISTS {{ fullyQualifiedTargetObjectName }}

            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: |
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% if config.selectDistinct %}
                        DISTINCT
                        {% endif %}
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        {% if config.groupByAll %}
                        GROUP BY ALL
                        {% endif %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% if config.selectDistinct %}
                        DISTINCT
                        {% endif %}
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {% if config.groupByAll %}
                        GROUP BY ALL
                        {% endif %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {% if config.selectDistinct %}
                        DISTINCT
                        {% endif %}
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {% if config.groupByAll %}
                        GROUP BY ALL
                        {% endif %}
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                          SELECT
                          {% if config.selectDistinct %}
                          DISTINCT
                          {% endif %}
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  "DIM"."{{ col.name }}"
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                  {{ get_source_transform(col) }}
                              {% endif %}
                              AS "{{ col.name }}",
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                          {{ source.join }}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %}
                          WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %} )
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        {% endif %}
                    {% if config.groupByAll %}
                    GROUP BY ALL
                    {% endif %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% if config.selectDistinct %}
                            DISTINCT
                            {% endif %}
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }}
                             {% if config.groupByAll %}
                             GROUP BY ALL
                             {% endif %}
                             ) 
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension Advanced Deploy
    version: 1
  StepType-187:
    id: "187"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Copy of Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                          SELECT
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  "DIM"."{{ col.name }}"
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                  {{ get_source_transform(col) }}
                              {% endif %}
                              AS "{{ col.name }}",
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                          {{ source.join }}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %}
                          WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %} )
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        {% endif %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Copy of Dimension
    version: 1
  StepType-189:
    id: "189"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Copy of Dimension Group All Distinct
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION ALL
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: false
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Distinct
            attributeName: selectDistinct
            type: toggleButton
            enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"
            default: false
            

          - displayName: Group By All
            attributeName: groupByAll
            type: toggleButton
            default: false
            enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"    

          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}
            		{% if config.selectDistinct %}DISTINCT{% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}
                    {% if config.groupByAll %} GROUP BY ALL {% endif %}
            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}
                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}


            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}

                {% if config.truncateBefore %}
                    {{ stage('Truncate Dimension Table') }}
                    TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
                {% endif %}
            	
                {% if is_type_2 %}
                     
                    
                        {{ stage('MERGE ' + ' Sources' | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                  

                    {% for source in sources %}
                       

                        {% set join_clause = source.join %}
                        {% set has_where_clause = 'where'in join_clause %}
                        {% set has_WHERE_clause = 'WHERE'in join_clause %}

                        {% if has_where_clause %}

                            {% set keyword='where'%} 
              
                        {% elif  has_WHERE_clause %}

                             {% set keyword='WHERE'%}

                        {% endif %}

                        {% if has_where_clause or has_WHERE_clause %}
                           {% set parts = join_clause.split(keyword) %}
                           {% set from_clause = parts[0] %}
                           {% set where_clause = 'AND' + join_clause.split(keyword)[1] %}

                        {% else %}

                           {% set from_clause = source.join %}
                           {% set where_clause = '' %}

                        {% endif %}



                        /* New Rows That Don't Exist */
                        SELECT
                        {% if config.selectDistinct %}
                        DISTINCT
                        {% endif %}
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{from_clause}}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        {{ where_clause }}
                        {% if config.groupByAll %}
                        GROUP BY ALL
                        {% endif %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% if config.selectDistinct %}
                        DISTINCT
                        {% endif %}
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{from_clause}}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {{ where_clause }}
                        {% if config.groupByAll %}
                        GROUP BY ALL
                        {% endif %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {% if config.selectDistinct %}
                        DISTINCT
                        {% endif %}
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{from_clause}}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {{ where_clause }}
                        {% if config.groupByAll %}
                        GROUP BY ALL
                        {% endif %}
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                          SELECT
                          {% if config.selectDistinct %}
                          DISTINCT
                          {% endif %}
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  "DIM"."{{ col.name }}"
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                  {{ get_source_transform(col) }}
                              {% endif %}
                              AS "{{ col.name }}",
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                          {{from_clause}}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %}
                          WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %} )
                          {{ where_clause }}
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        {% endif %}
                        {% if config.groupByAll %}
                            GROUP BY ALL
                        {% endif %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                            {{config.insertStrategy}}
                        {% endif %}               
                    {% endfor %}             
                    ) AS "SRC"
                    ON
                    {% for col in columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% else %}
                    
                        {{ stage('MERGE ' + ' Sources' | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (

                    {% for source in sources %}
                            SELECT
                            {% if config.selectDistinct %}
                            DISTINCT
                            {% endif %}
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }}
                             {% if config.groupByAll %}
                             GROUP BY ALL
                             {% endif %}
                             {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                                 {{config.insertStrategy}}
                             {% endif %}
                    {% endfor %}
                             )               
                            AS "SRC"               
                        ON
                        {% for col in columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Copy of Dimension Group All Distinct
    version: 1
  StepType-Dimension:
    id: Dimension
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                          SELECT
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  "DIM"."{{ col.name }}"
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                  {{ get_source_transform(col) }}
                              {% endif %}
                              AS "{{ col.name }}",
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                          {{ source.join }}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %}
                          WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %} )
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        {% endif %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension
    version: 1
  StepType-Fact:
    id: Fact
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Fact
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |2-

                {% if node.materializationType == 'table' %}
                    {{ stage('Create Fact Table') }}
                
                    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                
                
                {% elif node.materializationType == 'view' %}
                    {{ stage('Create Fact View') }}
                
                    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                    AS
                    {% for source in sources %}
                
                        {% if loop.first %}SELECT {% endif %}
                
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                
                        {% if not loop.last %} UNION ALL {% endif %}
                    {% endfor %}
                
                {% endif %}
                
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                    
                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
                    
                    {% for source in sources %}
                    
                        {% if has_business_key %}
                    
                            {{ stage('MERGE ' + source.name | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }})
                                AS "SRC"
                            ON
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in source.columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}
                    
                            {{ stage('Insert ' + source.name | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                        {% endif %}
                    {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
                
                
    name: Fact
    version: 1
  StepType-Source:
    id: Source
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Source
        short: null
        tagColor: '#D26000'
        plural: Sources
      templates:
        create:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
        run:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
    name: Source
    version: 1
  StepType-Stage:
    id: Stage
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage
    version: 1
  StepType-View:
    id: View
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-persistentStage:
    id: persistentStage
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage
    version: 1
subgraphs: {}
version: 2
